
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800100  00800100  00000412  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000327  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d02  00000000  00000000  00000779  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000033e  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000719  00000000  00000000  000017b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e0  00000000  00000000  00001ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003dc  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000159  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  000025e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "onewire.h"


int main(void){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  

  OneWire_Init_Master();
  94:	0e 94 b5 01 	call	0x36a	; 0x36a <OneWire_Init_Master>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  98:	cc e2       	ldi	r28, 0x2C	; 44
  9a:	d1 e0       	ldi	r29, 0x01	; 1
  uint16_t Reg_Addr   = ONEWIRE_CONT_CMD  | ONEWIRE_READ_CMD | (0x01<<1) | 1;
  uint16_t Data_Len   = ONEWIRE_CONT_CMD  | ONEWIRE_READ_CMD | (0xFF<<1) | 1;
  while(1){
      
	  
	  OneWire_TRX_Byte( Slave_Addr );
  9c:	8f e7       	ldi	r24, 0x7F	; 127
  9e:	9a e0       	ldi	r25, 0x0A	; 10
  a0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <OneWire_TRX_Byte>
	  OneWire_TRX_Byte( Reg_Addr );
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	92 e0       	ldi	r25, 0x02	; 2
  a8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <OneWire_TRX_Byte>
	  OneWire_TRX_Byte( Data_Len );
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <OneWire_TRX_Byte>
  b4:	88 e8       	ldi	r24, 0x88	; 136
  b6:	93 e1       	ldi	r25, 0x13	; 19
  b8:	fe 01       	movw	r30, r28
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c0:	d9 f7       	brne	.-10     	; 0xb8 <main+0x28>
  c2:	ec cf       	rjmp	.-40     	; 0x9c <main+0xc>

000000c4 <OneWire_Struct_Init>:
}onewire_t;

onewire_t OneWire;

void OneWire_Struct_Init(void){
  OneWire.BitCounter = 0;
  c4:	10 92 00 01 	sts	0x0100, r1
  OneWire.FrameVal = 0;
  c8:	10 92 02 01 	sts	0x0102, r1
  cc:	10 92 01 01 	sts	0x0101, r1
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
    OneWire.FrameBuf[i] = 0;
  d0:	10 92 04 01 	sts	0x0104, r1
  d4:	10 92 03 01 	sts	0x0103, r1
  d8:	10 92 06 01 	sts	0x0106, r1
  dc:	10 92 05 01 	sts	0x0105, r1
  e0:	10 92 08 01 	sts	0x0108, r1
  e4:	10 92 07 01 	sts	0x0107, r1
  }
  OneWire.FrameBufIndex = 0;
  e8:	10 92 09 01 	sts	0x0109, r1
}
  ec:	08 95       	ret

000000ee <OneWire_Flush_Frame>:

void OneWire_Flush_Frame(void){
  OneWire.BitCounter = 0;
  ee:	10 92 00 01 	sts	0x0100, r1
  OneWire.FrameVal = 0;
  f2:	10 92 02 01 	sts	0x0102, r1
  f6:	10 92 01 01 	sts	0x0101, r1
}
  fa:	08 95       	ret

000000fc <OneWire_Flush_Frame_Buf>:

void OneWire_Flush_Frame_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
    OneWire.FrameBuf[i] = 0;
  fc:	10 92 04 01 	sts	0x0104, r1
 100:	10 92 03 01 	sts	0x0103, r1
 104:	10 92 06 01 	sts	0x0106, r1
 108:	10 92 05 01 	sts	0x0105, r1
 10c:	10 92 08 01 	sts	0x0108, r1
 110:	10 92 07 01 	sts	0x0107, r1
  }
  OneWire.FrameBufIndex = 0;
 114:	10 92 09 01 	sts	0x0109, r1
}
 118:	08 95       	ret

0000011a <OneWire_TRX_Set_DDR>:




void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
 11a:	88 23       	and	r24, r24
 11c:	11 f4       	brne	.+4      	; 0x122 <OneWire_TRX_Set_DDR+0x8>
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 11e:	20 98       	cbi	0x04, 0	; 4
 120:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 122:	20 9a       	sbi	0x04, 0	; 4
 124:	08 95       	ret

00000126 <OneWire_TRX_Set_Port>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
 126:	88 23       	and	r24, r24
 128:	11 f4       	brne	.+4      	; 0x12e <OneWire_TRX_Set_Port+0x8>
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 12a:	28 98       	cbi	0x05, 0	; 5
 12c:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
 12e:	28 9a       	sbi	0x05, 0	; 5
 130:	08 95       	ret

00000132 <OneWire_TRX_Get_Input_State>:
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 132:	83 b1       	in	r24, 0x03	; 3
    return 1;
  }
  else{
    return 0;
  }
}
 134:	81 70       	andi	r24, 0x01	; 1
 136:	08 95       	ret

00000138 <OneWire_TRX_Set_Logic>:

void OneWire_TRX_Set_Logic(uint8_t state){
  if(state == 0){
 138:	88 23       	and	r24, r24
 13a:	11 f4       	brne	.+4      	; 0x140 <OneWire_TRX_Set_Logic+0x8>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 13c:	20 9a       	sbi	0x04, 0	; 4
 13e:	08 95       	ret



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 140:	20 98       	cbi	0x04, 0	; 4
 142:	08 95       	ret

00000144 <OneWire_TRX_GPIO_Init>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 144:	28 98       	cbi	0x05, 0	; 5



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 146:	20 98       	cbi	0x04, 0	; 4
  OneWire_TRX_Set_Port(0);
  OneWire_TRX_Set_DDR(0);
  OneWire_TRX_Set_Logic(1);
  
  #ifdef ONEWIRE_DBGTX_ENABLE
  ONEWIRE_DBGTX_DDR  |= (1<<ONEWIRE_DBGTX_BP);
 148:	20 98       	cbi	0x04, 0	; 4
 14a:	3d 9a       	sbi	0x07, 5	; 7
  ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
 14c:	45 98       	cbi	0x08, 5	; 8
  #endif
  
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_DDR  |= (1<<ONEWIRE_DBGRX_BP);
 14e:	57 9a       	sbi	0x0a, 7	; 10
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 150:	5f 98       	cbi	0x0b, 7	; 11
  #endif
}
 152:	08 95       	ret

00000154 <OneWire_TRX_Interrupt_Init>:
  #define ONEWIRE_TRX_PCMSK      PCMSK2
  #define ONEWIRE_TRX_PCIF       PCIF2
  #define ONEWIRE_TRX_PCINT_VECT PCINT2_vect
  #endif
  
  PCICR             |= (1<<ONEWIRE_TRX_PCIE);
 154:	e8 e6       	ldi	r30, 0x68	; 104
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24
  PCIFR             |= (1<<ONEWIRE_TRX_PCIF);
 15e:	d8 9a       	sbi	0x1b, 0	; 27
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 160:	eb e6       	ldi	r30, 0x6B	; 107
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	80 83       	st	Z, r24
  
  sei();
 16a:	78 94       	sei
}
 16c:	08 95       	ret

0000016e <OneWire_TRX_Interrupt_Enable>:



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 16e:	eb e6       	ldi	r30, 0x6B	; 107
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 83       	st	Z, r24
}
 178:	08 95       	ret

0000017a <OneWire_TRX_Interrupt_Disable>:

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 17a:	eb e6       	ldi	r30, 0x6B	; 107
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8e 7f       	andi	r24, 0xFE	; 254
 182:	80 83       	st	Z, r24
}
 184:	08 95       	ret

00000186 <OneWire_TRX_Interrupt_Status>:

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 186:	80 91 6b 00 	lds	r24, 0x006B
    return 1;
  }
  else{
    return 0;
  }
}
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	08 95       	ret

0000018e <OneWire_TRX_Falling_Edge_Interrupt>:
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 18e:	83 b1       	in	r24, 0x03	; 3
 190:	80 95       	com	r24
    return 1;
  }
  else{
    return 0;
  }
}
 192:	81 70       	andi	r24, 0x01	; 1
 194:	08 95       	ret

00000196 <OneWire_Debug_Tx_Pulse>:



void OneWire_Debug_Tx_Pulse(void){
  #ifdef ONEWIRE_DBGTX_ENABLE
  ONEWIRE_DBGTX_PORT |= (1<<ONEWIRE_DBGTX_BP);
 196:	45 9a       	sbi	0x08, 5	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <OneWire_Debug_Tx_Pulse+0x4>
  _delay_us(1);
  ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
 19e:	45 98       	cbi	0x08, 5	; 8
  #endif
}
 1a0:	08 95       	ret

000001a2 <OneWire_Debug_Rx_Pulse>:

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 1a2:	5f 9a       	sbi	0x0b, 7	; 11
 1a4:	84 e0       	ldi	r24, 0x04	; 4
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <OneWire_Debug_Rx_Pulse+0x4>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 1aa:	5f 98       	cbi	0x0b, 7	; 11
  #endif
}
 1ac:	08 95       	ret

000001ae <OneWire_Delay_Clock_Low_Time>:
 1ae:	88 e2       	ldi	r24, 0x28	; 40
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <OneWire_Delay_Clock_Low_Time+0x2>



void OneWire_Delay_Clock_Low_Time(void){
  _delay_us(ONEWIRE_CLK_LOW);
}
 1b4:	08 95       	ret

000001b6 <OneWire_Delay_Clock_High_Time>:
 1b6:	88 e2       	ldi	r24, 0x28	; 40
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <OneWire_Delay_Clock_High_Time+0x2>

void OneWire_Delay_Clock_High_Time(void){
  _delay_us(ONEWIRE_CLK_HIGH);
}
 1bc:	08 95       	ret

000001be <OneWire_Delay_Half_Bit_Time>:
 1be:	80 e5       	ldi	r24, 0x50	; 80
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <OneWire_Delay_Half_Bit_Time+0x2>

void OneWire_Delay_Half_Bit_Time(void){
  _delay_us(ONEWIRE_CLK_HBIT);
}
 1c4:	08 95       	ret

000001c6 <OneWire_Delay_Byte_Gap>:
 1c6:	88 ec       	ldi	r24, 0xC8	; 200
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <OneWire_Delay_Byte_Gap+0x2>

void OneWire_Delay_Byte_Gap(void){
  _delay_us(ONEWIRE_BYTE_GAP);
}
 1cc:	08 95       	ret

000001ce <OneWire_Delay_Rx_Int>:
 1ce:	88 e2       	ldi	r24, 0x28	; 40
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <OneWire_Delay_Rx_Int+0x2>

void OneWire_Delay_Rx_Int(void){
  OneWire_Delay_Clock_Low_Time();
  OneWire_Delay_Half_Bit_Time();
}
 1d4:	80 e5       	ldi	r24, 0x50	; 80
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <OneWire_Delay_Rx_Int+0x8>
 1da:	08 95       	ret

000001dc <OneWire_TRX_Byte>:



uint16_t OneWire_TRX_Byte(uint16_t val){
 1dc:	ac 01       	movw	r20, r24
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	e8 e2       	ldi	r30, 0x28	; 40
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 1e6:	70 e5       	ldi	r23, 0x50	; 80
 1e8:	f4 e0       	ldi	r31, 0x04	; 4
 1ea:	20 9a       	sbi	0x04, 0	; 4
 1ec:	8e 2f       	mov	r24, r30
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <OneWire_TRX_Byte+0x12>
	//Initial Logic Low
	OneWire_TRX_Set_Logic(0);
    OneWire_Delay_Clock_Low_Time();
	
	//Data Controlled By Master
	if(i < (ONEWIRE_FRAME_LEN-1)){
 1f2:	6b 30       	cpi	r22, 0x0B	; 11
 1f4:	21 f0       	breq	.+8      	; 0x1fe <OneWire_TRX_Byte+0x22>
      if(val & 0x800){
 1f6:	53 fd       	sbrc	r21, 3
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <OneWire_TRX_Byte+0x22>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 1fa:	20 9a       	sbi	0x04, 0	; 4
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <OneWire_TRX_Byte+0x24>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 1fe:	20 98       	cbi	0x04, 0	; 4
 200:	87 2f       	mov	r24, r23
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <OneWire_TRX_Byte+0x26>



void OneWire_Debug_Tx_Pulse(void){
  #ifdef ONEWIRE_DBGTX_ENABLE
  ONEWIRE_DBGTX_PORT |= (1<<ONEWIRE_DBGTX_BP);
 206:	45 9a       	sbi	0x08, 5	; 8
 208:	8f 2f       	mov	r24, r31
 20a:	8a 95       	dec	r24
 20c:	f1 f7       	brne	.-4      	; 0x20a <OneWire_TRX_Byte+0x2e>
  _delay_us(1);
  ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
 20e:	45 98       	cbi	0x08, 5	; 8
	}
	
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse();
	rx_val <<= 1;
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 214:	83 b1       	in	r24, 0x03	; 3
	
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse();
	rx_val <<= 1;
	rx_val |= OneWire_TRX_Get_Input_State();
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	81 70       	andi	r24, 0x01	; 1
 21a:	90 70       	andi	r25, 0x00	; 0
 21c:	28 2b       	or	r18, r24
 21e:	39 2b       	or	r19, r25
 220:	87 2f       	mov	r24, r23
 222:	8a 95       	dec	r24
 224:	f1 f7       	brne	.-4      	; 0x222 <OneWire_TRX_Byte+0x46>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 226:	20 98       	cbi	0x04, 0	; 4
 228:	8e 2f       	mov	r24, r30
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <OneWire_TRX_Byte+0x4e>
  
  //OneWire_TRX_Interrupt_Disable();
  
  uint16_t rx_val=0;
  
  for(uint8_t i=0;i<ONEWIRE_FRAME_LEN;i++){
 22e:	6f 5f       	subi	r22, 0xFF	; 255
 230:	6c 30       	cpi	r22, 0x0C	; 12
 232:	19 f0       	breq	.+6      	; 0x23a <OneWire_TRX_Byte+0x5e>
	//Leave For Ack
	else{
	  OneWire_TRX_Set_Logic(1);
	}
	
	val <<= 1;
 234:	44 0f       	add	r20, r20
 236:	55 1f       	adc	r21, r21
 238:	d8 cf       	rjmp	.-80     	; 0x1ea <OneWire_TRX_Byte+0xe>
 23a:	88 ec       	ldi	r24, 0xC8	; 200
 23c:	8a 95       	dec	r24
 23e:	f1 f7       	brne	.-4      	; 0x23c <OneWire_TRX_Byte+0x60>
  }
  
  //OneWire_TRX_Interrupt_Enable();
  OneWire_Delay_Byte_Gap();
  return rx_val;
}
 240:	c9 01       	movw	r24, r18
 242:	08 95       	ret

00000244 <OneWire_Bit_Sample>:




void OneWire_Bit_Sample(void){
  OneWire.FrameVal <<= 1;
 244:	80 91 01 01 	lds	r24, 0x0101
 248:	90 91 02 01 	lds	r25, 0x0102
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	90 93 02 01 	sts	0x0102, r25
 254:	80 93 01 01 	sts	0x0101, r24
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 258:	5f 9a       	sbi	0x0b, 7	; 11
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <OneWire_Bit_Sample+0x18>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 260:	5f 98       	cbi	0x0b, 7	; 11


void OneWire_Bit_Sample(void){
  OneWire.FrameVal <<= 1;
  OneWire_Debug_Rx_Pulse();
  OneWire.FrameVal |= OneWire_TRX_Get_Input_State();
 262:	20 91 01 01 	lds	r18, 0x0101
 266:	30 91 02 01 	lds	r19, 0x0102
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 26a:	83 b1       	in	r24, 0x03	; 3


void OneWire_Bit_Sample(void){
  OneWire.FrameVal <<= 1;
  OneWire_Debug_Rx_Pulse();
  OneWire.FrameVal |= OneWire_TRX_Get_Input_State();
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	81 70       	andi	r24, 0x01	; 1
 270:	90 70       	andi	r25, 0x00	; 0
 272:	82 2b       	or	r24, r18
 274:	93 2b       	or	r25, r19
 276:	90 93 02 01 	sts	0x0102, r25
 27a:	80 93 01 01 	sts	0x0101, r24
  OneWire.BitCounter++;
 27e:	e1 e0       	ldi	r30, 0x01	; 1
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	82 91       	ld	r24, -Z
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	80 83       	st	Z, r24
}
 288:	08 95       	ret

0000028a <OneWire_Bit_Counter_Overflow>:


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 28a:	80 91 00 01 	lds	r24, 0x0100
 28e:	8c 30       	cpi	r24, 0x0C	; 12
 290:	10 f4       	brcc	.+4      	; 0x296 <OneWire_Bit_Counter_Overflow+0xc>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
    OneWire.BitCounter = 0;
 296:	10 92 00 01 	sts	0x0100, r1
 29a:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
  }
  else{
    return 0;
  }
}
 29c:	08 95       	ret

0000029e <OneWire_Fill_Frame_Buf>:

void OneWire_Fill_Frame_Buf(void){
  OneWire.FrameBuf[OneWire.FrameBufIndex] = OneWire.FrameVal;
 29e:	e9 e0       	ldi	r30, 0x09	; 9
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	80 91 09 01 	lds	r24, 0x0109
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	df 01       	movw	r26, r30
 2aa:	18 97       	sbiw	r26, 0x08	; 8
 2ac:	2d 91       	ld	r18, X+
 2ae:	3c 91       	ld	r19, X
 2b0:	11 97       	sbiw	r26, 0x01	; 1
 2b2:	39 97       	sbiw	r30, 0x09	; 9
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	e8 0f       	add	r30, r24
 2ba:	f9 1f       	adc	r31, r25
 2bc:	34 83       	std	Z+4, r19	; 0x04
 2be:	23 83       	std	Z+3, r18	; 0x03
  OneWire.FrameBufIndex++;
 2c0:	80 91 09 01 	lds	r24, 0x0109
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 09 01 	sts	0x0109, r24
  OneWire.FrameVal = 0;
 2ca:	11 96       	adiw	r26, 0x01	; 1
 2cc:	1c 92       	st	X, r1
 2ce:	1e 92       	st	-X, r1
}
 2d0:	08 95       	ret

000002d2 <__vector_3>:





ISR(ONEWIRE_TRX_PCINT_VECT){
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
}

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 2f4:	80 91 6b 00 	lds	r24, 0x006B
 2f8:	80 ff       	sbrs	r24, 0
 2fa:	26 c0       	rjmp	.+76     	; 0x348 <__vector_3+0x76>
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 2fc:	18 99       	sbic	0x03, 0	; 3
 2fe:	24 c0       	rjmp	.+72     	; 0x348 <__vector_3+0x76>
 300:	88 e2       	ldi	r24, 0x28	; 40
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <__vector_3+0x30>
  if( OneWire_TRX_Interrupt_Status() == 1){        
    
	//Falling Edge Interrupt
    if(OneWire_TRX_Falling_Edge_Interrupt() == 1){
	  OneWire_Delay_Rx_Int();
	  OneWire_Bit_Sample();
 306:	80 e5       	ldi	r24, 0x50	; 80
 308:	8a 95       	dec	r24
 30a:	f1 f7       	brne	.-4      	; 0x308 <__vector_3+0x36>
 30c:	0e 94 22 01 	call	0x244	; 0x244 <OneWire_Bit_Sample>
  OneWire.BitCounter++;
}


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 310:	80 91 00 01 	lds	r24, 0x0100
 314:	8c 30       	cpi	r24, 0x0C	; 12
 316:	c0 f0       	brcs	.+48     	; 0x348 <__vector_3+0x76>
    OneWire.BitCounter = 0;
 318:	10 92 00 01 	sts	0x0100, r1
    return 0;
  }
}

void OneWire_Fill_Frame_Buf(void){
  OneWire.FrameBuf[OneWire.FrameBufIndex] = OneWire.FrameVal;
 31c:	e0 91 09 01 	lds	r30, 0x0109
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 91 01 01 	lds	r24, 0x0101
 326:	90 91 02 01 	lds	r25, 0x0102
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	e0 50       	subi	r30, 0x00	; 0
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	94 83       	std	Z+4, r25	; 0x04
 334:	83 83       	std	Z+3, r24	; 0x03
  OneWire.FrameBufIndex++;
 336:	80 91 09 01 	lds	r24, 0x0109
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	80 93 09 01 	sts	0x0109, r24
  OneWire.FrameVal = 0;
 340:	10 92 02 01 	sts	0x0102, r1
 344:	10 92 01 01 	sts	0x0101, r1
	  if(OneWire_Bit_Counter_Overflow() == 1){
		OneWire_Fill_Frame_Buf();
	  }
	}
  }
}
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <OneWire_Init_Master>:



void OneWire_Init_Master(void){
  OneWire_Struct_Init();
 36a:	0e 94 62 00 	call	0xc4	; 0xc4 <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 36e:	0e 94 a2 00 	call	0x144	; 0x144 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 372:	0e 94 aa 00 	call	0x154	; 0x154 <OneWire_TRX_Interrupt_Init>
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 376:	eb e6       	ldi	r30, 0x6B	; 107
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	8e 7f       	andi	r24, 0xFE	; 254
 37e:	80 83       	st	Z, r24
void OneWire_Init_Master(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Disable();
}
 380:	08 95       	ret

00000382 <OneWire_Init_Slave>:

void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
 382:	0e 94 62 00 	call	0xc4	; 0xc4 <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 386:	0e 94 a2 00 	call	0x144	; 0x144 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 38a:	0e 94 aa 00 	call	0x154	; 0x154 <OneWire_TRX_Interrupt_Init>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 38e:	eb e6       	ldi	r30, 0x6B	; 107
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	81 60       	ori	r24, 0x01	; 1
 396:	80 83       	st	Z, r24
void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Enable();
 398:	08 95       	ret

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
