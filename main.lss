
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000006d4  00000768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  0080010e  0080010e  00000776  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000041e  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f6c  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000431  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ae  00000000  00000000  00001f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  00002920  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053a  00000000  00000000  00002b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b6  00000000  00000000  000030ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "onewire.h"

#define  TX_MODE
//#define  RX_MODE

int main(void){
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2e 97       	sbiw	r28, 0x0e	; 14
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  
  #ifdef TX_MODE
  OneWire_Init_Master();
  c2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <OneWire_Init_Master>
  c6:	20 e0       	ldi	r18, 0x00	; 0
  while(1){
      
	  #ifdef TX_MODE
	  
	  if( mode == 0){
	    uint8_t buf[14]={0,1,2,3,4,5,6,7,8,9,10,11,12,13};
  c8:	8e 01       	movw	r16, r28
  ca:	0f 5f       	subi	r16, 0xFF	; 255
  cc:	1f 4f       	sbci	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ce:	8c e2       	ldi	r24, 0x2C	; 44
  d0:	e8 2e       	mov	r14, r24
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	f8 2e       	mov	r15, r24
  
  while(1){
      
	  #ifdef TX_MODE
	  
	  if( mode == 0){
  d6:	22 23       	and	r18, r18
  d8:	71 f4       	brne	.+28     	; 0xf6 <main+0x50>
	    uint8_t buf[14]={0,1,2,3,4,5,6,7,8,9,10,11,12,13};
  da:	d8 01       	movw	r26, r16
  dc:	e0 e0       	ldi	r30, 0x00	; 0
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	01 90       	ld	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x3c>
	    OneWire_Master_Send_Data(buf, 14);
  ea:	c8 01       	movw	r24, r16
  ec:	6e e0       	ldi	r22, 0x0E	; 14
  ee:	0e 94 86 02 	call	0x50c	; 0x50c <OneWire_Master_Send_Data>
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	13 c0       	rjmp	.+38     	; 0x11c <main+0x76>
		mode = 1;
	  }
	  else{
	    OneWire_Master_Receive_Data(0x00);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 bc 02 	call	0x578	; 0x578 <OneWire_Master_Receive_Data>
		OneWire_Master_Receive_Data(0x01);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 bc 02 	call	0x578	; 0x578 <OneWire_Master_Receive_Data>
		OneWire_Master_Receive_Data(0x02);
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	0e 94 bc 02 	call	0x578	; 0x578 <OneWire_Master_Receive_Data>
		OneWire_Master_Receive_Data(0x03);
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	0e 94 bc 02 	call	0x578	; 0x578 <OneWire_Master_Receive_Data>
		OneWire_Master_Receive_Data(0x04);
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	0e 94 bc 02 	call	0x578	; 0x578 <OneWire_Master_Receive_Data>
		OneWire_Master_Receive_Data(0x05);
 114:	85 e0       	ldi	r24, 0x05	; 5
 116:	0e 94 bc 02 	call	0x578	; 0x578 <OneWire_Master_Receive_Data>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	88 e8       	ldi	r24, 0x88	; 136
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	f7 01       	movw	r30, r14
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x7c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 126:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	d9 f7       	brne	.-10     	; 0x120 <main+0x7a>
 12a:	d5 cf       	rjmp	.-86     	; 0xd6 <main+0x30>

0000012c <OneWire_Struct_Init>:
}onewire_t;

onewire_t OneWire;

void OneWire_Struct_Init(void){
  OneWire.BitCounter = 0;
 12c:	10 92 0e 01 	sts	0x010E, r1
  OneWire.FrameVal = 0;
 130:	10 92 10 01 	sts	0x0110, r1
 134:	10 92 0f 01 	sts	0x010F, r1
  OneWire.FrameCounter = 0;
 138:	10 92 12 01 	sts	0x0112, r1
 13c:	10 92 11 01 	sts	0x0111, r1
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
    OneWire.FrameBuf[i] = 0;
 144:	fc 01       	movw	r30, r24
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	e2 5f       	subi	r30, 0xF2	; 242
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	16 82       	std	Z+6, r1	; 0x06
 150:	15 82       	std	Z+5, r1	; 0x05
 152:	01 96       	adiw	r24, 0x01	; 1

void OneWire_Struct_Init(void){
  OneWire.BitCounter = 0;
  OneWire.FrameVal = 0;
  OneWire.FrameCounter = 0;
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
 154:	82 33       	cpi	r24, 0x32	; 50
 156:	91 05       	cpc	r25, r1
 158:	a9 f7       	brne	.-22     	; 0x144 <OneWire_Struct_Init+0x18>
    OneWire.FrameBuf[i] = 0;
  }
  OneWire.FrameBufIndex = 0;
 15a:	10 92 77 01 	sts	0x0177, r1
  OneWire.CmdReceived = 0;
 15e:	10 92 78 01 	sts	0x0178, r1
  OneWire.CmdVal = 0;
 162:	10 92 7a 01 	sts	0x017A, r1
 166:	10 92 79 01 	sts	0x0179, r1
  OneWire.CmdValReg = 0;
 16a:	10 92 7c 01 	sts	0x017C, r1
 16e:	10 92 7b 01 	sts	0x017B, r1
  OneWire.FeedbackData = 0;
 172:	10 92 7e 01 	sts	0x017E, r1
 176:	10 92 7d 01 	sts	0x017D, r1
  OneWire.FeedbackDataLoaded = 0;
 17a:	10 92 7f 01 	sts	0x017F, r1
  OneWire.FeedbackCounter = 0;
 17e:	10 92 80 01 	sts	0x0180, r1
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
    OneWire.DataBuf[i] = 0;
 186:	fc 01       	movw	r30, r24
 188:	ef 57       	subi	r30, 0x7F	; 127
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	10 82       	st	Z, r1
 18e:	01 96       	adiw	r24, 0x01	; 1
  OneWire.CmdVal = 0;
  OneWire.CmdValReg = 0;
  OneWire.FeedbackData = 0;
  OneWire.FeedbackDataLoaded = 0;
  OneWire.FeedbackCounter = 0;
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
 190:	86 39       	cpi	r24, 0x96	; 150
 192:	91 05       	cpc	r25, r1
 194:	c1 f7       	brne	.-16     	; 0x186 <OneWire_Struct_Init+0x5a>
    OneWire.DataBuf[i] = 0;
  }
  OneWire.DataBufIndex = 0;
 196:	10 92 17 02 	sts	0x0217, r1
}
 19a:	08 95       	ret

0000019c <OneWire_Flush_Frame>:

void OneWire_Flush_Frame(void){
  OneWire.BitCounter = 0;
 19c:	10 92 0e 01 	sts	0x010E, r1
  OneWire.FrameVal = 0;
 1a0:	10 92 10 01 	sts	0x0110, r1
 1a4:	10 92 0f 01 	sts	0x010F, r1
}
 1a8:	08 95       	ret

000001aa <OneWire_Flush_Frame_Buf>:

void OneWire_Flush_Frame_Buf(void){
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
    OneWire.FrameBuf[i] = 0;
 1ae:	fc 01       	movw	r30, r24
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e2 5f       	subi	r30, 0xF2	; 242
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	16 82       	std	Z+6, r1	; 0x06
 1ba:	15 82       	std	Z+5, r1	; 0x05
 1bc:	01 96       	adiw	r24, 0x01	; 1
  OneWire.BitCounter = 0;
  OneWire.FrameVal = 0;
}

void OneWire_Flush_Frame_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
 1be:	82 33       	cpi	r24, 0x32	; 50
 1c0:	91 05       	cpc	r25, r1
 1c2:	a9 f7       	brne	.-22     	; 0x1ae <OneWire_Flush_Frame_Buf+0x4>
    OneWire.FrameBuf[i] = 0;
  }
  OneWire.FrameBufIndex = 0;
 1c4:	10 92 77 01 	sts	0x0177, r1
}
 1c8:	08 95       	ret

000001ca <OneWire_Flush_Data_Buf>:

void OneWire_Flush_Data_Buf(void){
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
    OneWire.DataBuf[i] = 0;
 1ce:	fc 01       	movw	r30, r24
 1d0:	ef 57       	subi	r30, 0x7F	; 127
 1d2:	fe 4f       	sbci	r31, 0xFE	; 254
 1d4:	10 82       	st	Z, r1
 1d6:	01 96       	adiw	r24, 0x01	; 1
  }
  OneWire.FrameBufIndex = 0;
}

void OneWire_Flush_Data_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
 1d8:	86 39       	cpi	r24, 0x96	; 150
 1da:	91 05       	cpc	r25, r1
 1dc:	c1 f7       	brne	.-16     	; 0x1ce <OneWire_Flush_Data_Buf+0x4>
    OneWire.DataBuf[i] = 0;
  }
  OneWire.DataBufIndex = 0;
 1de:	10 92 17 02 	sts	0x0217, r1
}
 1e2:	08 95       	ret

000001e4 <OneWire_TRX_Set_DDR>:




void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
 1e4:	88 23       	and	r24, r24
 1e6:	11 f4       	brne	.+4      	; 0x1ec <OneWire_TRX_Set_DDR+0x8>
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 1e8:	20 98       	cbi	0x04, 0	; 4
 1ea:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 1ec:	20 9a       	sbi	0x04, 0	; 4
 1ee:	08 95       	ret

000001f0 <OneWire_TRX_Set_Port>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
 1f0:	88 23       	and	r24, r24
 1f2:	11 f4       	brne	.+4      	; 0x1f8 <OneWire_TRX_Set_Port+0x8>
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 1f4:	28 98       	cbi	0x05, 0	; 5
 1f6:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
 1f8:	28 9a       	sbi	0x05, 0	; 5
 1fa:	08 95       	ret

000001fc <OneWire_TRX_Get_Input_State>:
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 1fc:	83 b1       	in	r24, 0x03	; 3
    return 1;
  }
  else{
    return 0;
  }
}
 1fe:	81 70       	andi	r24, 0x01	; 1
 200:	08 95       	ret

00000202 <OneWire_TRX_Set_Logic>:

void OneWire_TRX_Set_Logic(uint8_t state){
  if(state == 0){
 202:	88 23       	and	r24, r24
 204:	11 f4       	brne	.+4      	; 0x20a <OneWire_TRX_Set_Logic+0x8>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 206:	20 9a       	sbi	0x04, 0	; 4
 208:	08 95       	ret



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 20a:	20 98       	cbi	0x04, 0	; 4
 20c:	08 95       	ret

0000020e <OneWire_TRX_GPIO_Init>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 20e:	28 98       	cbi	0x05, 0	; 5



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 210:	20 98       	cbi	0x04, 0	; 4
  
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_DDR  |= (1<<ONEWIRE_DBGRX_BP);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
  #endif
}
 212:	20 98       	cbi	0x04, 0	; 4
 214:	08 95       	ret

00000216 <OneWire_TRX_Interrupt_Init>:
  #define ONEWIRE_TRX_PCMSK      PCMSK2
  #define ONEWIRE_TRX_PCIF       PCIF2
  #define ONEWIRE_TRX_PCINT_VECT PCINT2_vect
  #endif
  
  PCICR             |= (1<<ONEWIRE_TRX_PCIE);
 216:	e8 e6       	ldi	r30, 0x68	; 104
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	80 83       	st	Z, r24
  PCIFR             |= (1<<ONEWIRE_TRX_PCIF);
 220:	d8 9a       	sbi	0x1b, 0	; 27
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 222:	eb e6       	ldi	r30, 0x6B	; 107
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	80 83       	st	Z, r24
  
  sei();
 22c:	78 94       	sei
}
 22e:	08 95       	ret

00000230 <OneWire_TRX_Interrupt_Enable>:



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 230:	eb e6       	ldi	r30, 0x6B	; 107
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	81 60       	ori	r24, 0x01	; 1
 238:	80 83       	st	Z, r24
}
 23a:	08 95       	ret

0000023c <OneWire_TRX_Interrupt_Disable>:

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 23c:	eb e6       	ldi	r30, 0x6B	; 107
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	8e 7f       	andi	r24, 0xFE	; 254
 244:	80 83       	st	Z, r24
}
 246:	08 95       	ret

00000248 <OneWire_TRX_Interrupt_Status>:

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 248:	80 91 6b 00 	lds	r24, 0x006B
    return 1;
  }
  else{
    return 0;
  }
}
 24c:	81 70       	andi	r24, 0x01	; 1
 24e:	08 95       	ret

00000250 <OneWire_TRX_Falling_Edge_Interrupt>:
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 250:	83 b1       	in	r24, 0x03	; 3
 252:	80 95       	com	r24
    return 1;
  }
  else{
    return 0;
  }
}
 254:	81 70       	andi	r24, 0x01	; 1
 256:	08 95       	ret

00000258 <OneWire_Debug_Tx_Pulse>:
  #ifdef ONEWIRE_DBGTX_ENABLE
  ONEWIRE_DBGTX_PORT |= (1<<ONEWIRE_DBGTX_BP);
  _delay_us(1);
  ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
  #endif
}
 258:	08 95       	ret

0000025a <OneWire_Debug_Rx_Pulse>:
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
  #endif
}
 25a:	08 95       	ret

0000025c <OneWire_Delay_Clock_Low_Time>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 25c:	80 e5       	ldi	r24, 0x50	; 80
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <OneWire_Delay_Clock_Low_Time+0x2>



void OneWire_Delay_Clock_Low_Time(void){
  _delay_us(ONEWIRE_CLK_LOW);
}
 262:	08 95       	ret

00000264 <OneWire_Delay_Clock_High_Time>:
 264:	80 e5       	ldi	r24, 0x50	; 80
 266:	8a 95       	dec	r24
 268:	f1 f7       	brne	.-4      	; 0x266 <OneWire_Delay_Clock_High_Time+0x2>

void OneWire_Delay_Clock_High_Time(void){
  _delay_us(ONEWIRE_CLK_HIGH);
}
 26a:	08 95       	ret

0000026c <OneWire_Delay_Half_Bit_Time>:
 26c:	80 ea       	ldi	r24, 0xA0	; 160
 26e:	8a 95       	dec	r24
 270:	f1 f7       	brne	.-4      	; 0x26e <OneWire_Delay_Half_Bit_Time+0x2>

void OneWire_Delay_Half_Bit_Time(void){
  _delay_us(ONEWIRE_CLK_HBIT);
}
 272:	08 95       	ret

00000274 <OneWire_Delay_Byte_Gap>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 274:	8c e2       	ldi	r24, 0x2C	; 44
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <OneWire_Delay_Byte_Gap+0x4>

void OneWire_Delay_Byte_Gap(void){
  _delay_us(ONEWIRE_BYTE_GAP);
}
 27c:	08 95       	ret

0000027e <OneWire_Delay_Rx_Int>:
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 27e:	eb e6       	ldi	r30, 0x6B	; 107
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 288:	80 e5       	ldi	r24, 0x50	; 80
 28a:	8a 95       	dec	r24
 28c:	f1 f7       	brne	.-4      	; 0x28a <OneWire_Delay_Rx_Int+0xc>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 28e:	80 ea       	ldi	r24, 0xA0	; 160
 290:	8a 95       	dec	r24
 292:	f1 f7       	brne	.-4      	; 0x290 <OneWire_Delay_Rx_Int+0x12>
 294:	80 81       	ld	r24, Z
 296:	81 60       	ori	r24, 0x01	; 1
 298:	80 83       	st	Z, r24
void OneWire_Delay_Rx_Int(void){
  OneWire_TRX_Interrupt_Disable();
  OneWire_Delay_Clock_Low_Time();
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Interrupt_Enable();
}
 29a:	08 95       	ret

0000029c <OneWire_TRX_Byte>:



uint16_t OneWire_TRX_Byte(uint16_t val){
 29c:	ac 01       	movw	r20, r24
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	e0 e5       	ldi	r30, 0x50	; 80
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 2a6:	70 ea       	ldi	r23, 0xA0	; 160
 2a8:	20 9a       	sbi	0x04, 0	; 4
 2aa:	8e 2f       	mov	r24, r30
 2ac:	8a 95       	dec	r24
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <OneWire_TRX_Byte+0x10>
	//Initial Logic Low
	OneWire_TRX_Set_Logic(0);
    OneWire_Delay_Clock_Low_Time();
	
	//Data Controlled By Master
	if(i < (ONEWIRE_FRAME_LEN-1)){
 2b0:	6b 30       	cpi	r22, 0x0B	; 11
 2b2:	21 f0       	breq	.+8      	; 0x2bc <OneWire_TRX_Byte+0x20>
      if(val & 0x800){
 2b4:	53 fd       	sbrc	r21, 3
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <OneWire_TRX_Byte+0x20>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 2b8:	20 9a       	sbi	0x04, 0	; 4
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <OneWire_TRX_Byte+0x22>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 2bc:	20 98       	cbi	0x04, 0	; 4
 2be:	87 2f       	mov	r24, r23
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <OneWire_TRX_Byte+0x24>
	}
	
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse();
	rx_val <<= 1;
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 2c8:	83 b1       	in	r24, 0x03	; 3
	
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse();
	rx_val <<= 1;
	rx_val |= OneWire_TRX_Get_Input_State();
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	81 70       	andi	r24, 0x01	; 1
 2ce:	90 70       	andi	r25, 0x00	; 0
 2d0:	28 2b       	or	r18, r24
 2d2:	39 2b       	or	r19, r25
 2d4:	87 2f       	mov	r24, r23
 2d6:	8a 95       	dec	r24
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <OneWire_TRX_Byte+0x3a>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 2da:	20 98       	cbi	0x04, 0	; 4
 2dc:	8e 2f       	mov	r24, r30
 2de:	8a 95       	dec	r24
 2e0:	f1 f7       	brne	.-4      	; 0x2de <OneWire_TRX_Byte+0x42>
  
  //OneWire_TRX_Interrupt_Disable();
  
  uint16_t rx_val=0;
  
  for(uint8_t i=0;i<ONEWIRE_FRAME_LEN;i++){
 2e2:	6f 5f       	subi	r22, 0xFF	; 255
 2e4:	6c 30       	cpi	r22, 0x0C	; 12
 2e6:	19 f0       	breq	.+6      	; 0x2ee <OneWire_TRX_Byte+0x52>
	//Leave For Ack
	else{
	  OneWire_TRX_Set_Logic(1);
	}
	
	val <<= 1;
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	dd cf       	rjmp	.-70     	; 0x2a8 <OneWire_TRX_Byte+0xc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ee:	8c e2       	ldi	r24, 0x2C	; 44
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <OneWire_TRX_Byte+0x56>
  }
  
  //OneWire_TRX_Interrupt_Enable();
  OneWire_Delay_Byte_Gap();
  return rx_val;
}
 2f6:	c9 01       	movw	r24, r18
 2f8:	08 95       	ret

000002fa <OneWire_Bit_Sample_And_Update>:




void OneWire_Bit_Sample_And_Update(void){
  OneWire.FrameVal <<= 1;
 2fa:	80 91 0f 01 	lds	r24, 0x010F
 2fe:	90 91 10 01 	lds	r25, 0x0110
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	90 93 10 01 	sts	0x0110, r25
 30a:	80 93 0f 01 	sts	0x010F, r24
  OneWire_Debug_Rx_Pulse();
  OneWire.FrameVal |= OneWire_TRX_Get_Input_State();
 30e:	20 91 0f 01 	lds	r18, 0x010F
 312:	30 91 10 01 	lds	r19, 0x0110
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 316:	83 b1       	in	r24, 0x03	; 3


void OneWire_Bit_Sample_And_Update(void){
  OneWire.FrameVal <<= 1;
  OneWire_Debug_Rx_Pulse();
  OneWire.FrameVal |= OneWire_TRX_Get_Input_State();
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	81 70       	andi	r24, 0x01	; 1
 31c:	90 70       	andi	r25, 0x00	; 0
 31e:	82 2b       	or	r24, r18
 320:	93 2b       	or	r25, r19
 322:	90 93 10 01 	sts	0x0110, r25
 326:	80 93 0f 01 	sts	0x010F, r24
  OneWire.BitCounter++;
 32a:	ef e0       	ldi	r30, 0x0F	; 15
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	82 91       	ld	r24, -Z
 330:	8f 5f       	subi	r24, 0xFF	; 255
 332:	80 83       	st	Z, r24
}
 334:	08 95       	ret

00000336 <OneWire_Bit_Counter_Overflow>:


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 336:	80 91 0e 01 	lds	r24, 0x010E
 33a:	8c 30       	cpi	r24, 0x0C	; 12
 33c:	10 f4       	brcc	.+4      	; 0x342 <OneWire_Bit_Counter_Overflow+0xc>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
    OneWire.BitCounter = 0;
 342:	10 92 0e 01 	sts	0x010E, r1
 346:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
  }
  else{
    return 0;
  }
}
 348:	08 95       	ret

0000034a <OneWire_Buf_Sample_And_Update>:

void OneWire_Buf_Sample_And_Update(void){
  OneWire.FrameBuf[OneWire.FrameBufIndex] = OneWire.FrameVal;
 34a:	e0 91 77 01 	lds	r30, 0x0177
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 91 0f 01 	lds	r24, 0x010F
 354:	90 91 10 01 	lds	r25, 0x0110
 358:	ee 0f       	add	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	e2 5f       	subi	r30, 0xF2	; 242
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	96 83       	std	Z+6, r25	; 0x06
 362:	85 83       	std	Z+5, r24	; 0x05
  OneWire.FrameVal = 0;
 364:	10 92 10 01 	sts	0x0110, r1
 368:	10 92 0f 01 	sts	0x010F, r1
  OneWire.FrameBufIndex++;
 36c:	80 91 77 01 	lds	r24, 0x0177
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	80 93 77 01 	sts	0x0177, r24
}
 376:	08 95       	ret

00000378 <OneWire_Buf_Counter_Overflow>:

uint8_t OneWire_Buf_Counter_Overflow(void){
  if(OneWire.FrameBufIndex >= ONEWIRE_FRAME_BUF){
 378:	80 91 77 01 	lds	r24, 0x0177
 37c:	82 33       	cpi	r24, 0x32	; 50
 37e:	68 f0       	brcs	.+26     	; 0x39a <OneWire_Buf_Counter_Overflow+0x22>
    OneWire.FrameBufIndex = 0;
 380:	10 92 77 01 	sts	0x0177, r1
	OneWire.FrameCounter++;
 384:	80 91 11 01 	lds	r24, 0x0111
 388:	90 91 12 01 	lds	r25, 0x0112
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	90 93 12 01 	sts	0x0112, r25
 392:	80 93 11 01 	sts	0x0111, r24
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	08 95       	ret
	return 1;
  }
  else{
    OneWire.FrameCounter++;
 39a:	80 91 11 01 	lds	r24, 0x0111
 39e:	90 91 12 01 	lds	r25, 0x0112
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	90 93 12 01 	sts	0x0112, r25
 3a8:	80 93 11 01 	sts	0x0111, r24
 3ac:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
  }
}
 3ae:	08 95       	ret

000003b0 <OneWire_Fill_Buf>:
    return 0;
  }
}

void OneWire_Buf_Sample_And_Update(void){
  OneWire.FrameBuf[OneWire.FrameBufIndex] = OneWire.FrameVal;
 3b0:	e0 91 77 01 	lds	r30, 0x0177
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 91 0f 01 	lds	r24, 0x010F
 3ba:	90 91 10 01 	lds	r25, 0x0110
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	e2 5f       	subi	r30, 0xF2	; 242
 3c4:	fe 4f       	sbci	r31, 0xFE	; 254
 3c6:	96 83       	std	Z+6, r25	; 0x06
 3c8:	85 83       	std	Z+5, r24	; 0x05
  OneWire.FrameVal = 0;
 3ca:	10 92 10 01 	sts	0x0110, r1
 3ce:	10 92 0f 01 	sts	0x010F, r1
  OneWire.FrameBufIndex++;
 3d2:	80 91 77 01 	lds	r24, 0x0177
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	80 93 77 01 	sts	0x0177, r24
  }
}

void OneWire_Fill_Buf(void){
  OneWire_Buf_Sample_And_Update();
  OneWire_Buf_Counter_Overflow();
 3dc:	0e 94 bc 01 	call	0x378	; 0x378 <OneWire_Buf_Counter_Overflow>
  
  if((OneWire.FrameBufIndex > 0) && ((OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_START_CMD) == ONEWIRE_START_CMD) ){
 3e0:	80 91 77 01 	lds	r24, 0x0177
 3e4:	88 23       	and	r24, r24
 3e6:	79 f1       	breq	.+94     	; 0x446 <OneWire_Fill_Buf+0x96>
 3e8:	e0 91 77 01 	lds	r30, 0x0177
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	ee 0f       	add	r30, r30
 3f0:	ff 1f       	adc	r31, r31
 3f2:	e4 5f       	subi	r30, 0xF4	; 244
 3f4:	fe 4f       	sbci	r31, 0xFE	; 254
 3f6:	85 81       	ldd	r24, Z+5	; 0x05
 3f8:	96 81       	ldd	r25, Z+6	; 0x06
 3fa:	93 ff       	sbrs	r25, 3
 3fc:	24 c0       	rjmp	.+72     	; 0x446 <OneWire_Fill_Buf+0x96>
    OneWire.CmdReceived = 1;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	80 93 78 01 	sts	0x0178, r24
	OneWire.CmdVal = OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_RW_MASK;
 404:	e0 91 77 01 	lds	r30, 0x0177
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	ee 0f       	add	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	e4 5f       	subi	r30, 0xF4	; 244
 410:	fe 4f       	sbci	r31, 0xFE	; 254
 412:	85 81       	ldd	r24, Z+5	; 0x05
 414:	96 81       	ldd	r25, Z+6	; 0x06
 416:	80 70       	andi	r24, 0x00	; 0
 418:	92 70       	andi	r25, 0x02	; 2
 41a:	90 93 7a 01 	sts	0x017A, r25
 41e:	80 93 79 01 	sts	0x0179, r24
	OneWire.CmdValReg = (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_REG_MASK)>>1;
 422:	e0 91 77 01 	lds	r30, 0x0177
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	ee 0f       	add	r30, r30
 42a:	ff 1f       	adc	r31, r31
 42c:	e4 5f       	subi	r30, 0xF4	; 244
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	85 81       	ldd	r24, Z+5	; 0x05
 432:	96 81       	ldd	r25, Z+6	; 0x06
 434:	8e 7f       	andi	r24, 0xFE	; 254
 436:	91 70       	andi	r25, 0x01	; 1
 438:	96 95       	lsr	r25
 43a:	87 95       	ror	r24
 43c:	90 93 7c 01 	sts	0x017C, r25
 440:	80 93 7b 01 	sts	0x017B, r24
 444:	08 95       	ret
	OneWire_Debug_Rx_Pulse();
  }
  else if( (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_STOP_CMD) == ONEWIRE_STOP_CMD){
 446:	e0 91 77 01 	lds	r30, 0x0177
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	ee 0f       	add	r30, r30
 44e:	ff 1f       	adc	r31, r31
 450:	e4 5f       	subi	r30, 0xF4	; 244
 452:	fe 4f       	sbci	r31, 0xFE	; 254
 454:	85 81       	ldd	r24, Z+5	; 0x05
 456:	96 81       	ldd	r25, Z+6	; 0x06
 458:	92 ff       	sbrs	r25, 2
 45a:	32 c0       	rjmp	.+100    	; 0x4c0 <OneWire_Fill_Buf+0x110>
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	18 c0       	rjmp	.+48     	; 0x490 <OneWire_Fill_Buf+0xe0>
    for(uint8_t i=0;i<OneWire.FrameBufIndex;i++){
	  OneWire.DataBuf[i] = OneWire.FrameBuf[i];
 460:	a2 2f       	mov	r26, r18
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	fd 01       	movw	r30, r26
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	e2 5f       	subi	r30, 0xF2	; 242
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	85 81       	ldd	r24, Z+5	; 0x05
 470:	96 81       	ldd	r25, Z+6	; 0x06
 472:	af 57       	subi	r26, 0x7F	; 127
 474:	be 4f       	sbci	r27, 0xFE	; 254
 476:	8c 93       	st	X, r24
	  OneWire.DataBufIndex++;
 478:	80 91 17 02 	lds	r24, 0x0217
 47c:	8f 5f       	subi	r24, 0xFF	; 255
 47e:	80 93 17 02 	sts	0x0217, r24
	  if(OneWire.DataBufIndex >= ONEWIRE_DATA_BUF){
 482:	80 91 17 02 	lds	r24, 0x0217
 486:	86 39       	cpi	r24, 0x96	; 150
 488:	10 f0       	brcs	.+4      	; 0x48e <OneWire_Fill_Buf+0xde>
	    OneWire.DataBufIndex = 0;
 48a:	10 92 17 02 	sts	0x0217, r1
	OneWire.CmdVal = OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_RW_MASK;
	OneWire.CmdValReg = (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_REG_MASK)>>1;
	OneWire_Debug_Rx_Pulse();
  }
  else if( (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_STOP_CMD) == ONEWIRE_STOP_CMD){
    for(uint8_t i=0;i<OneWire.FrameBufIndex;i++){
 48e:	2f 5f       	subi	r18, 0xFF	; 255
 490:	80 91 77 01 	lds	r24, 0x0177
 494:	28 17       	cp	r18, r24
 496:	20 f3       	brcs	.-56     	; 0x460 <OneWire_Fill_Buf+0xb0>
	  OneWire.DataBufIndex++;
	  if(OneWire.DataBufIndex >= ONEWIRE_DATA_BUF){
	    OneWire.DataBufIndex = 0;
	  }
	}
    OneWire.CmdReceived = 0;
 498:	10 92 78 01 	sts	0x0178, r1
	OneWire.FrameBufIndex = 0;
 49c:	10 92 77 01 	sts	0x0177, r1
	OneWire.FrameBuf[0] = 0;
 4a0:	10 92 14 01 	sts	0x0114, r1
 4a4:	10 92 13 01 	sts	0x0113, r1
	OneWire.CmdVal = 0;
 4a8:	10 92 7a 01 	sts	0x017A, r1
 4ac:	10 92 79 01 	sts	0x0179, r1
	OneWire.CmdValReg = 0;
 4b0:	10 92 7c 01 	sts	0x017C, r1
 4b4:	10 92 7b 01 	sts	0x017B, r1
	OneWire.FeedbackDataLoaded = 0;
 4b8:	10 92 7f 01 	sts	0x017F, r1
	OneWire.FeedbackCounter = 0;
 4bc:	10 92 80 01 	sts	0x0180, r1
 4c0:	08 95       	ret

000004c2 <OneWire_Read_Mode_Feedback>:
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 4c2:	80 91 6b 00 	lds	r24, 0x006B
 4c6:	8e 7f       	andi	r24, 0xFE	; 254
 4c8:	80 93 6b 00 	sts	0x006B, r24
}


void OneWire_Read_Mode_Feedback(void){
  OneWire_TRX_Interrupt_Disable();
  if(OneWire.FeedbackData & 0x800){
 4cc:	80 91 7d 01 	lds	r24, 0x017D
 4d0:	90 91 7e 01 	lds	r25, 0x017E
 4d4:	93 ff       	sbrs	r25, 3
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <OneWire_Read_Mode_Feedback+0x1a>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 4d8:	20 98       	cbi	0x04, 0	; 4
 4da:	01 c0       	rjmp	.+2      	; 0x4de <OneWire_Read_Mode_Feedback+0x1c>
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 4dc:	20 9a       	sbi	0x04, 0	; 4
  if(OneWire.FeedbackData & 0x800){
	OneWire_TRX_Set_Logic(1);
  }else{
	OneWire_TRX_Set_Logic(0);
  }
  OneWire.FeedbackData <<= 1;
 4de:	80 91 7d 01 	lds	r24, 0x017D
 4e2:	90 91 7e 01 	lds	r25, 0x017E
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	90 93 7e 01 	sts	0x017E, r25
 4ee:	80 93 7d 01 	sts	0x017D, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4f2:	80 ea       	ldi	r24, 0xA0	; 160
 4f4:	98 2f       	mov	r25, r24
 4f6:	9a 95       	dec	r25
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <OneWire_Read_Mode_Feedback+0x34>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 4fa:	8a 95       	dec	r24
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <OneWire_Read_Mode_Feedback+0x38>
 4fe:	20 98       	cbi	0x04, 0	; 4
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 500:	80 91 6b 00 	lds	r24, 0x006B
 504:	81 60       	ori	r24, 0x01	; 1
 506:	80 93 6b 00 	sts	0x006B, r24
  OneWire.FeedbackData <<= 1;
  OneWire_Delay_Half_Bit_Time();
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Set_Logic(1);
  OneWire_TRX_Interrupt_Enable();
}
 50a:	08 95       	ret

0000050c <OneWire_Master_Send_Data>:


void OneWire_Master_Send_Data(uint8_t *data, uint8_t len){
 50c:	ef 92       	push	r14
 50e:	ff 92       	push	r15
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	18 2f       	mov	r17, r24
 51a:	09 2f       	mov	r16, r25
 51c:	e6 2e       	mov	r14, r22
  uint16_t StartByte = ONEWIRE_START_CMD | ONEWIRE_WRITE_CMD | 1;
  uint16_t DataByte  = ONEWIRE_CONT_CMD  | ONEWIRE_WRITE_CMD | 1;
  uint16_t EndByte   = ONEWIRE_STOP_CMD  | ONEWIRE_WRITE_CMD | 1;
  uint16_t temp      = 0;
  OneWire_TRX_Byte(StartByte);
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	98 e0       	ldi	r25, 0x08	; 8
 522:	0e 94 4e 01 	call	0x29c	; 0x29c <OneWire_TRX_Byte>
 526:	21 2f       	mov	r18, r17
 528:	30 2f       	mov	r19, r16
 52a:	c9 01       	movw	r24, r18
 52c:	ec 01       	movw	r28, r24
 52e:	ff 24       	eor	r15, r15
  for(uint8_t i=0;i<len;i++){
    if(i == (len-1)){
 530:	0e 2d       	mov	r16, r14
 532:	10 e0       	ldi	r17, 0x00	; 0
 534:	01 50       	subi	r16, 0x01	; 1
 536:	10 40       	sbci	r17, 0x00	; 0
 538:	16 c0       	rjmp	.+44     	; 0x566 <OneWire_Master_Send_Data+0x5a>
 53a:	8f 2d       	mov	r24, r15
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	28 81       	ld	r18, Y
 540:	80 17       	cp	r24, r16
 542:	91 07       	cpc	r25, r17
 544:	39 f4       	brne	.+14     	; 0x554 <OneWire_Master_Send_Data+0x48>
	  temp = EndByte  | (data[i]<<1);
 546:	82 2f       	mov	r24, r18
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	94 60       	ori	r25, 0x04	; 4
 552:	05 c0       	rjmp	.+10     	; 0x55e <OneWire_Master_Send_Data+0x52>
	}
	else{
	  temp = DataByte | (data[i]<<1);
 554:	82 2f       	mov	r24, r18
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	81 60       	ori	r24, 0x01	; 1
	}
	OneWire_TRX_Byte(temp);
 55e:	0e 94 4e 01 	call	0x29c	; 0x29c <OneWire_TRX_Byte>
  uint16_t StartByte = ONEWIRE_START_CMD | ONEWIRE_WRITE_CMD | 1;
  uint16_t DataByte  = ONEWIRE_CONT_CMD  | ONEWIRE_WRITE_CMD | 1;
  uint16_t EndByte   = ONEWIRE_STOP_CMD  | ONEWIRE_WRITE_CMD | 1;
  uint16_t temp      = 0;
  OneWire_TRX_Byte(StartByte);
  for(uint8_t i=0;i<len;i++){
 562:	f3 94       	inc	r15
 564:	21 96       	adiw	r28, 0x01	; 1
 566:	fe 14       	cp	r15, r14
 568:	40 f3       	brcs	.-48     	; 0x53a <OneWire_Master_Send_Data+0x2e>
	else{
	  temp = DataByte | (data[i]<<1);
	}
	OneWire_TRX_Byte(temp);
  }
}
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	ff 90       	pop	r15
 574:	ef 90       	pop	r14
 576:	08 95       	ret

00000578 <OneWire_Master_Receive_Data>:

uint8_t OneWire_Master_Receive_Data(uint8_t addr){
  uint16_t StartByte = ONEWIRE_START_CMD | ONEWIRE_READ_CMD | 1;
  uint16_t EndByte   = ONEWIRE_STOP_CMD  | ONEWIRE_READ_CMD | 1;
  uint16_t temp      = 0;
  OneWire_TRX_Byte(StartByte | (addr<<1));
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	9a 60       	ori	r25, 0x0A	; 10
 582:	0e 94 4e 01 	call	0x29c	; 0x29c <OneWire_TRX_Byte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 586:	88 eb       	ldi	r24, 0xB8	; 184
 588:	9b e0       	ldi	r25, 0x0B	; 11
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <OneWire_Master_Receive_Data+0x12>
  _delay_ms(1);
  temp = OneWire_TRX_Byte(EndByte | (0xFF<<1));
 58e:	8f ef       	ldi	r24, 0xFF	; 255
 590:	97 e0       	ldi	r25, 0x07	; 7
 592:	0e 94 4e 01 	call	0x29c	; 0x29c <OneWire_TRX_Byte>
  return (uint8_t)temp;
}
 596:	08 95       	ret

00000598 <__vector_3>:





ISR(ONEWIRE_TRX_PCINT_VECT){
 598:	1f 92       	push	r1
 59a:	0f 92       	push	r0
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	0f 92       	push	r0
 5a0:	11 24       	eor	r1, r1
 5a2:	2f 93       	push	r18
 5a4:	3f 93       	push	r19
 5a6:	4f 93       	push	r20
 5a8:	5f 93       	push	r21
 5aa:	6f 93       	push	r22
 5ac:	7f 93       	push	r23
 5ae:	8f 93       	push	r24
 5b0:	9f 93       	push	r25
 5b2:	af 93       	push	r26
 5b4:	bf 93       	push	r27
 5b6:	ef 93       	push	r30
 5b8:	ff 93       	push	r31
void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
}

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 5ba:	80 91 6b 00 	lds	r24, 0x006B
 5be:	80 ff       	sbrs	r24, 0
 5c0:	55 c0       	rjmp	.+170    	; 0x66c <__vector_3+0xd4>
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 5c2:	18 99       	sbic	0x03, 0	; 3
 5c4:	53 c0       	rjmp	.+166    	; 0x66c <__vector_3+0xd4>
  //TRX Interrupt Fired
  if( OneWire_TRX_Interrupt_Status() == 1){        
	//Falling Edge Interrupt
    if(OneWire_TRX_Falling_Edge_Interrupt() == 1){
	  
	  if((OneWire.CmdReceived == 1) && (OneWire.CmdVal == ONEWIRE_WRITE_CMD)){
 5c6:	80 91 78 01 	lds	r24, 0x0178
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	31 f4       	brne	.+12     	; 0x5da <__vector_3+0x42>
 5ce:	80 91 79 01 	lds	r24, 0x0179
 5d2:	90 91 7a 01 	lds	r25, 0x017A
 5d6:	89 2b       	or	r24, r25
 5d8:	e9 f1       	breq	.+122    	; 0x654 <__vector_3+0xbc>
	    OneWire_Bit_Sample_And_Update();
	    if(OneWire_Bit_Counter_Overflow() == 1){
		  OneWire_Fill_Buf();
	    }
      }
	  else if((OneWire.CmdReceived == 1) && (OneWire.CmdVal == ONEWIRE_READ_CMD)){
 5da:	20 91 78 01 	lds	r18, 0x0178
 5de:	21 30       	cpi	r18, 0x01	; 1
 5e0:	c9 f5       	brne	.+114    	; 0x654 <__vector_3+0xbc>
 5e2:	80 91 79 01 	lds	r24, 0x0179
 5e6:	90 91 7a 01 	lds	r25, 0x017A
 5ea:	80 50       	subi	r24, 0x00	; 0
 5ec:	92 40       	sbci	r25, 0x02	; 2
 5ee:	91 f5       	brne	.+100    	; 0x654 <__vector_3+0xbc>
		if(OneWire.FeedbackDataLoaded == 0){
 5f0:	80 91 7f 01 	lds	r24, 0x017F
 5f4:	88 23       	and	r24, r24
 5f6:	71 f4       	brne	.+28     	; 0x614 <__vector_3+0x7c>
		  OneWire.FeedbackData = (OneWire.CmdValReg<<1) | ONEWIRE_STOP_CMD | 1;
 5f8:	80 91 7b 01 	lds	r24, 0x017B
 5fc:	90 91 7c 01 	lds	r25, 0x017C
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	81 60       	ori	r24, 0x01	; 1
 606:	94 60       	ori	r25, 0x04	; 4
 608:	90 93 7e 01 	sts	0x017E, r25
 60c:	80 93 7d 01 	sts	0x017D, r24
		  OneWire.FeedbackDataLoaded = 1;
 610:	20 93 7f 01 	sts	0x017F, r18
		}
	    OneWire_Read_Mode_Feedback();
 614:	0e 94 61 02 	call	0x4c2	; 0x4c2 <OneWire_Read_Mode_Feedback>
		OneWire.FeedbackCounter ++;
 618:	80 91 80 01 	lds	r24, 0x0180
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	80 93 80 01 	sts	0x0180, r24
		if(OneWire.FeedbackCounter >= ONEWIRE_FRAME_LEN){
 622:	80 91 80 01 	lds	r24, 0x0180
 626:	8c 30       	cpi	r24, 0x0C	; 12
 628:	08 f1       	brcs	.+66     	; 0x66c <__vector_3+0xd4>
		  OneWire.CmdReceived = 0;
 62a:	10 92 78 01 	sts	0x0178, r1
	      OneWire.FrameBufIndex = 0;
 62e:	10 92 77 01 	sts	0x0177, r1
	      OneWire.FrameBuf[0] = 0;
 632:	10 92 14 01 	sts	0x0114, r1
 636:	10 92 13 01 	sts	0x0113, r1
	      OneWire.CmdVal = 0;
 63a:	10 92 7a 01 	sts	0x017A, r1
 63e:	10 92 79 01 	sts	0x0179, r1
	      OneWire.CmdValReg = 0;
 642:	10 92 7c 01 	sts	0x017C, r1
 646:	10 92 7b 01 	sts	0x017B, r1
	      OneWire.FeedbackDataLoaded = 0;
 64a:	10 92 7f 01 	sts	0x017F, r1
	      OneWire.FeedbackCounter = 0;
 64e:	10 92 80 01 	sts	0x0180, r1
 652:	0c c0       	rjmp	.+24     	; 0x66c <__vector_3+0xd4>
	      OneWire_Debug_Rx_Pulse();
		}
	  }
	  else{
	    OneWire_Delay_Rx_Int();
 654:	0e 94 3f 01 	call	0x27e	; 0x27e <OneWire_Delay_Rx_Int>
	    OneWire_Bit_Sample_And_Update();
 658:	0e 94 7d 01 	call	0x2fa	; 0x2fa <OneWire_Bit_Sample_And_Update>
  OneWire.BitCounter++;
}


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 65c:	80 91 0e 01 	lds	r24, 0x010E
 660:	8c 30       	cpi	r24, 0x0C	; 12
 662:	20 f0       	brcs	.+8      	; 0x66c <__vector_3+0xd4>
    OneWire.BitCounter = 0;
 664:	10 92 0e 01 	sts	0x010E, r1
	  }
	  else{
	    OneWire_Delay_Rx_Int();
	    OneWire_Bit_Sample_And_Update();
	    if(OneWire_Bit_Counter_Overflow() == 1){
		  OneWire_Fill_Buf();
 668:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <OneWire_Fill_Buf>
	    }
	  }
	}
  }
}
 66c:	ff 91       	pop	r31
 66e:	ef 91       	pop	r30
 670:	bf 91       	pop	r27
 672:	af 91       	pop	r26
 674:	9f 91       	pop	r25
 676:	8f 91       	pop	r24
 678:	7f 91       	pop	r23
 67a:	6f 91       	pop	r22
 67c:	5f 91       	pop	r21
 67e:	4f 91       	pop	r20
 680:	3f 91       	pop	r19
 682:	2f 91       	pop	r18
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <OneWire_Get_Data_Buf>:




uint8_t OneWire_Get_Data_Buf(uint8_t index){
  return OneWire.DataBuf[index];
 68e:	e8 2f       	mov	r30, r24
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	ef 57       	subi	r30, 0x7F	; 127
 694:	fe 4f       	sbci	r31, 0xFE	; 254
 696:	80 81       	ld	r24, Z
}
 698:	08 95       	ret

0000069a <OneWire_Get_Data_Buf_Index>:

uint8_t OneWire_Get_Data_Buf_Index(void){
  return OneWire.DataBufIndex;
 69a:	80 91 17 02 	lds	r24, 0x0217
}
 69e:	08 95       	ret

000006a0 <OneWire_Init_Master>:




void OneWire_Init_Master(void){
  OneWire_Struct_Init();
 6a0:	0e 94 96 00 	call	0x12c	; 0x12c <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 6a4:	0e 94 07 01 	call	0x20e	; 0x20e <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 6a8:	0e 94 0b 01 	call	0x216	; 0x216 <OneWire_TRX_Interrupt_Init>
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 6ac:	eb e6       	ldi	r30, 0x6B	; 107
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	8e 7f       	andi	r24, 0xFE	; 254
 6b4:	80 83       	st	Z, r24
void OneWire_Init_Master(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Disable();
}
 6b6:	08 95       	ret

000006b8 <OneWire_Init_Slave>:

void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
 6b8:	0e 94 96 00 	call	0x12c	; 0x12c <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 6bc:	0e 94 07 01 	call	0x20e	; 0x20e <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 6c0:	0e 94 0b 01 	call	0x216	; 0x216 <OneWire_TRX_Interrupt_Init>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 6c4:	eb e6       	ldi	r30, 0x6B	; 107
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	81 60       	ori	r24, 0x01	; 1
 6cc:	80 83       	st	Z, r24
void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Enable();
 6ce:	08 95       	ret

000006d0 <_exit>:
 6d0:	f8 94       	cli

000006d2 <__stop_program>:
 6d2:	ff cf       	rjmp	.-2      	; 0x6d2 <__stop_program>
