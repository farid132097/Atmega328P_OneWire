
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000cb6  00000d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000139  00800128  00800128  00000d72  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006d5  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017d3  00000000  00000000  000014a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a3  00000000  00000000  00002c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000105a  00000000  00000000  0000331d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  00004378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000810  00000000  00000000  00004788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000074a  00000000  00000000  00004f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  000056e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 36       	cpi	r26, 0x61	; 97
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "uart.h"

#define  TX_MODE
//#define  RX_MODE

int main(void){
  a6:	af 92       	push	r10
  a8:	bf 92       	push	r11
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	1f 93       	push	r17
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	2e 97       	sbiw	r28, 0x0e	; 14
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  
  UART_Init(19200);
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	7b e4       	ldi	r23, 0x4B	; 75
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 13 06 	call	0xc26	; 0xc26 <UART_Init>
  
  
  #ifdef TX_MODE
  UART_Transmit_Text("TX Mode\r\n");
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 11 05 	call	0xa22	; 0xa22 <UART_Transmit_Text>
  OneWire_Init_Master();
  dc:	0e 94 b8 03 	call	0x770	; 0x770 <OneWire_Init_Master>
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e4:	2c e2       	ldi	r18, 0x2C	; 44
  e6:	31 e0       	ldi	r19, 0x01	; 1
  e8:	f9 01       	movw	r30, r18
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f0:	d9 f7       	brne	.-10     	; 0xe8 <main+0x42>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	98 eb       	ldi	r25, 0xB8	; 184
  f6:	a9 2e       	mov	r10, r25
  f8:	9b e0       	ldi	r25, 0x0B	; 11
  fa:	b9 2e       	mov	r11, r25
  while(1){
      
	  #ifdef TX_MODE
	  
	  if( mode == 0){
	    uint8_t buf[14]={0,1,2,3,4,5,6,7,8,9,10,11,12,13};
  fc:	7e 01       	movw	r14, r28
  fe:	08 94       	sec
 100:	e1 1c       	adc	r14, r1
 102:	f1 1c       	adc	r15, r1
 104:	8c e2       	ldi	r24, 0x2C	; 44
 106:	c8 2e       	mov	r12, r24
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	d8 2e       	mov	r13, r24
  
  while(1){
      
	  #ifdef TX_MODE
	  
	  if( mode == 0){
 10c:	22 23       	and	r18, r18
 10e:	71 f4       	brne	.+28     	; 0x12c <main+0x86>
	    uint8_t buf[14]={0,1,2,3,4,5,6,7,8,9,10,11,12,13};
 110:	d7 01       	movw	r26, r14
 112:	e4 e1       	ldi	r30, 0x14	; 20
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	8e e0       	ldi	r24, 0x0E	; 14
 118:	01 90       	ld	r0, Z+
 11a:	0d 92       	st	X+, r0
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x72>
	    OneWire_Master_Send_Data(buf, 14);
 120:	c7 01       	movw	r24, r14
 122:	6e e0       	ldi	r22, 0x0E	; 14
 124:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <OneWire_Master_Send_Data>
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	1a c0       	rjmp	.+52     	; 0x160 <main+0xba>
		mode = 1;
	  }
	  else{
	    UART_Transmit_Text("Tx data :");
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 11 05 	call	0xa22	; 0xa22 <UART_Transmit_Text>
 134:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<6; i++){
		  UART_Transmit_Number(OneWire_Master_Receive_Data(i));
 136:	81 2f       	mov	r24, r17
 138:	0e 94 1a 03 	call	0x634	; 0x634 <OneWire_Master_Receive_Data>
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	bc 01       	movw	r22, r24
 144:	cd 01       	movw	r24, r26
 146:	0e 94 80 05 	call	0xb00	; 0xb00 <UART_Transmit_Number>
		  UART_Transmit_Space();
 14a:	0e 94 27 05 	call	0xa4e	; 0xa4e <UART_Transmit_Space>
 14e:	c5 01       	movw	r24, r10
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0xaa>
	    OneWire_Master_Send_Data(buf, 14);
		mode = 1;
	  }
	  else{
	    UART_Transmit_Text("Tx data :");
		for(uint8_t i=0;i<6; i++){
 154:	1f 5f       	subi	r17, 0xFF	; 255
 156:	16 30       	cpi	r17, 0x06	; 6
 158:	71 f7       	brne	.-36     	; 0x136 <main+0x90>
		  UART_Transmit_Number(OneWire_Master_Receive_Data(i));
		  UART_Transmit_Space();
		  _delay_ms(1);
		}
	    UART_Transmit_New_Line();
 15a:	0e 94 22 05 	call	0xa44	; 0xa44 <UART_Transmit_New_Line>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	88 ee       	ldi	r24, 0xE8	; 232
 162:	93 e0       	ldi	r25, 0x03	; 3
 164:	f6 01       	movw	r30, r12
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16c:	d9 f7       	brne	.-10     	; 0x164 <main+0xbe>
 16e:	ce cf       	rjmp	.-100    	; 0x10c <main+0x66>

00000170 <OneWire_Struct_Init>:
}onewire_t;

onewire_t OneWire;

void OneWire_Struct_Init(void){
  OneWire.BitCounter = 0;
 170:	10 92 57 01 	sts	0x0157, r1
  OneWire.FrameVal = 0;
 174:	10 92 59 01 	sts	0x0159, r1
 178:	10 92 58 01 	sts	0x0158, r1
  OneWire.FrameCounter = 0;
 17c:	10 92 5b 01 	sts	0x015B, r1
 180:	10 92 5a 01 	sts	0x015A, r1
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
    OneWire.FrameBuf[i] = 0;
 188:	fc 01       	movw	r30, r24
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e9 5a       	subi	r30, 0xA9	; 169
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	16 82       	std	Z+6, r1	; 0x06
 194:	15 82       	std	Z+5, r1	; 0x05
 196:	01 96       	adiw	r24, 0x01	; 1

void OneWire_Struct_Init(void){
  OneWire.BitCounter = 0;
  OneWire.FrameVal = 0;
  OneWire.FrameCounter = 0;
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
 198:	82 33       	cpi	r24, 0x32	; 50
 19a:	91 05       	cpc	r25, r1
 19c:	a9 f7       	brne	.-22     	; 0x188 <OneWire_Struct_Init+0x18>
    OneWire.FrameBuf[i] = 0;
  }
  OneWire.FrameBufIndex = 0;
 19e:	10 92 c0 01 	sts	0x01C0, r1
  OneWire.CmdReceived = 0;
 1a2:	10 92 c1 01 	sts	0x01C1, r1
  OneWire.CmdVal = 0;
 1a6:	10 92 c3 01 	sts	0x01C3, r1
 1aa:	10 92 c2 01 	sts	0x01C2, r1
  OneWire.CmdValReg = 0;
 1ae:	10 92 c5 01 	sts	0x01C5, r1
 1b2:	10 92 c4 01 	sts	0x01C4, r1
  OneWire.FeedbackData = 0;
 1b6:	10 92 c7 01 	sts	0x01C7, r1
 1ba:	10 92 c6 01 	sts	0x01C6, r1
  OneWire.FeedbackDataLoaded = 0;
 1be:	10 92 c8 01 	sts	0x01C8, r1
  OneWire.FeedbackCounter = 0;
 1c2:	10 92 c9 01 	sts	0x01C9, r1
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
    OneWire.DataBuf[i] = 0;
 1ca:	fc 01       	movw	r30, r24
 1cc:	e6 53       	subi	r30, 0x36	; 54
 1ce:	fe 4f       	sbci	r31, 0xFE	; 254
 1d0:	10 82       	st	Z, r1
 1d2:	01 96       	adiw	r24, 0x01	; 1
  OneWire.CmdVal = 0;
  OneWire.CmdValReg = 0;
  OneWire.FeedbackData = 0;
  OneWire.FeedbackDataLoaded = 0;
  OneWire.FeedbackCounter = 0;
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
 1d4:	86 39       	cpi	r24, 0x96	; 150
 1d6:	91 05       	cpc	r25, r1
 1d8:	c1 f7       	brne	.-16     	; 0x1ca <OneWire_Struct_Init+0x5a>
    OneWire.DataBuf[i] = 0;
  }
  OneWire.DataBufIndex = 0;
 1da:	10 92 60 02 	sts	0x0260, r1
}
 1de:	08 95       	ret

000001e0 <OneWire_Flush_Frame>:

void OneWire_Flush_Frame(void){
  OneWire.BitCounter = 0;
 1e0:	10 92 57 01 	sts	0x0157, r1
  OneWire.FrameVal = 0;
 1e4:	10 92 59 01 	sts	0x0159, r1
 1e8:	10 92 58 01 	sts	0x0158, r1
}
 1ec:	08 95       	ret

000001ee <OneWire_Flush_Frame_Buf>:

void OneWire_Flush_Frame_Buf(void){
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
    OneWire.FrameBuf[i] = 0;
 1f2:	fc 01       	movw	r30, r24
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	e9 5a       	subi	r30, 0xA9	; 169
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	16 82       	std	Z+6, r1	; 0x06
 1fe:	15 82       	std	Z+5, r1	; 0x05
 200:	01 96       	adiw	r24, 0x01	; 1
  OneWire.BitCounter = 0;
  OneWire.FrameVal = 0;
}

void OneWire_Flush_Frame_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
 202:	82 33       	cpi	r24, 0x32	; 50
 204:	91 05       	cpc	r25, r1
 206:	a9 f7       	brne	.-22     	; 0x1f2 <OneWire_Flush_Frame_Buf+0x4>
    OneWire.FrameBuf[i] = 0;
  }
  OneWire.FrameBufIndex = 0;
 208:	10 92 c0 01 	sts	0x01C0, r1
}
 20c:	08 95       	ret

0000020e <OneWire_Flush_Data_Buf>:

void OneWire_Flush_Data_Buf(void){
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
    OneWire.DataBuf[i] = 0;
 212:	fc 01       	movw	r30, r24
 214:	e6 53       	subi	r30, 0x36	; 54
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	10 82       	st	Z, r1
 21a:	01 96       	adiw	r24, 0x01	; 1
  }
  OneWire.FrameBufIndex = 0;
}

void OneWire_Flush_Data_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
 21c:	86 39       	cpi	r24, 0x96	; 150
 21e:	91 05       	cpc	r25, r1
 220:	c1 f7       	brne	.-16     	; 0x212 <OneWire_Flush_Data_Buf+0x4>
    OneWire.DataBuf[i] = 0;
  }
  OneWire.DataBufIndex = 0;
 222:	10 92 60 02 	sts	0x0260, r1
}
 226:	08 95       	ret

00000228 <OneWire_TRX_Set_DDR>:




void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
 228:	88 23       	and	r24, r24
 22a:	11 f4       	brne	.+4      	; 0x230 <OneWire_TRX_Set_DDR+0x8>
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 22c:	20 98       	cbi	0x04, 0	; 4
 22e:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 230:	20 9a       	sbi	0x04, 0	; 4
 232:	08 95       	ret

00000234 <OneWire_TRX_Set_Port>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
 234:	88 23       	and	r24, r24
 236:	11 f4       	brne	.+4      	; 0x23c <OneWire_TRX_Set_Port+0x8>
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 238:	28 98       	cbi	0x05, 0	; 5
 23a:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
 23c:	28 9a       	sbi	0x05, 0	; 5
 23e:	08 95       	ret

00000240 <OneWire_TRX_Get_Input_State>:
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 240:	83 b1       	in	r24, 0x03	; 3
    return 1;
  }
  else{
    return 0;
  }
}
 242:	81 70       	andi	r24, 0x01	; 1
 244:	08 95       	ret

00000246 <OneWire_TRX_Set_Logic>:

void OneWire_TRX_Set_Logic(uint8_t state){
  if(state == 0){
 246:	88 23       	and	r24, r24
 248:	11 f4       	brne	.+4      	; 0x24e <OneWire_TRX_Set_Logic+0x8>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 24a:	20 9a       	sbi	0x04, 0	; 4
 24c:	08 95       	ret



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 24e:	20 98       	cbi	0x04, 0	; 4
 250:	08 95       	ret

00000252 <OneWire_TRX_GPIO_Init>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 252:	28 98       	cbi	0x05, 0	; 5



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 254:	20 98       	cbi	0x04, 0	; 4
  
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_DDR  |= (1<<ONEWIRE_DBGRX_BP);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
  #endif
}
 256:	20 98       	cbi	0x04, 0	; 4
 258:	08 95       	ret

0000025a <OneWire_TRX_Interrupt_Init>:
  #define ONEWIRE_TRX_PCMSK      PCMSK2
  #define ONEWIRE_TRX_PCIF       PCIF2
  #define ONEWIRE_TRX_PCINT_VECT PCINT2_vect
  #endif
  
  PCICR             |= (1<<ONEWIRE_TRX_PCIE);
 25a:	e8 e6       	ldi	r30, 0x68	; 104
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	81 60       	ori	r24, 0x01	; 1
 262:	80 83       	st	Z, r24
  PCIFR             |= (1<<ONEWIRE_TRX_PCIF);
 264:	d8 9a       	sbi	0x1b, 0	; 27
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 266:	eb e6       	ldi	r30, 0x6B	; 107
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	8e 7f       	andi	r24, 0xFE	; 254
 26e:	80 83       	st	Z, r24
  
  sei();
 270:	78 94       	sei
}
 272:	08 95       	ret

00000274 <OneWire_TRX_Interrupt_Enable>:



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 274:	eb e6       	ldi	r30, 0x6B	; 107
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	80 83       	st	Z, r24
}
 27e:	08 95       	ret

00000280 <OneWire_TRX_Interrupt_Disable>:

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 280:	eb e6       	ldi	r30, 0x6B	; 107
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	8e 7f       	andi	r24, 0xFE	; 254
 288:	80 83       	st	Z, r24
}
 28a:	08 95       	ret

0000028c <OneWire_TRX_Interrupt_Status>:

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 28c:	80 91 6b 00 	lds	r24, 0x006B
    return 1;
  }
  else{
    return 0;
  }
}
 290:	81 70       	andi	r24, 0x01	; 1
 292:	08 95       	ret

00000294 <OneWire_TRX_Falling_Edge_Interrupt>:
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 294:	83 b1       	in	r24, 0x03	; 3
 296:	80 95       	com	r24
    return 1;
  }
  else{
    return 0;
  }
}
 298:	81 70       	andi	r24, 0x01	; 1
 29a:	08 95       	ret

0000029c <OneWire_Debug_Tx_Pulse>:
  #ifdef ONEWIRE_DBGTX_ENABLE
  ONEWIRE_DBGTX_PORT |= (1<<ONEWIRE_DBGTX_BP);
  _delay_us(1);
  ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
  #endif
}
 29c:	08 95       	ret

0000029e <OneWire_Debug_Rx_Pulse>:
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
  #endif
}
 29e:	08 95       	ret

000002a0 <OneWire_Delay_Clock_Low_Time>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a0:	80 e5       	ldi	r24, 0x50	; 80
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <OneWire_Delay_Clock_Low_Time+0x2>



void OneWire_Delay_Clock_Low_Time(void){
  _delay_us(ONEWIRE_CLK_LOW);
}
 2a6:	08 95       	ret

000002a8 <OneWire_Delay_Clock_High_Time>:
 2a8:	80 e5       	ldi	r24, 0x50	; 80
 2aa:	8a 95       	dec	r24
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <OneWire_Delay_Clock_High_Time+0x2>

void OneWire_Delay_Clock_High_Time(void){
  _delay_us(ONEWIRE_CLK_HIGH);
}
 2ae:	08 95       	ret

000002b0 <OneWire_Delay_Half_Bit_Time>:
 2b0:	80 ea       	ldi	r24, 0xA0	; 160
 2b2:	8a 95       	dec	r24
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <OneWire_Delay_Half_Bit_Time+0x2>

void OneWire_Delay_Half_Bit_Time(void){
  _delay_us(ONEWIRE_CLK_HBIT);
}
 2b6:	08 95       	ret

000002b8 <OneWire_Delay_Byte_Gap>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2b8:	8c e2       	ldi	r24, 0x2C	; 44
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <OneWire_Delay_Byte_Gap+0x4>

void OneWire_Delay_Byte_Gap(void){
  _delay_us(ONEWIRE_BYTE_GAP);
}
 2c0:	08 95       	ret

000002c2 <OneWire_Delay_Rx_Int>:
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 2c2:	eb e6       	ldi	r30, 0x6B	; 107
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2cc:	80 e5       	ldi	r24, 0x50	; 80
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <OneWire_Delay_Rx_Int+0xc>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 2d2:	80 ea       	ldi	r24, 0xA0	; 160
 2d4:	8a 95       	dec	r24
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <OneWire_Delay_Rx_Int+0x12>
 2d8:	80 81       	ld	r24, Z
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	80 83       	st	Z, r24
void OneWire_Delay_Rx_Int(void){
  OneWire_TRX_Interrupt_Disable();
  OneWire_Delay_Clock_Low_Time();
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Interrupt_Enable();
}
 2de:	08 95       	ret

000002e0 <OneWire_TRX_Byte>:



uint16_t OneWire_TRX_Byte(uint16_t val){
 2e0:	ac 01       	movw	r20, r24
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	e0 e5       	ldi	r30, 0x50	; 80
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 2ea:	70 ea       	ldi	r23, 0xA0	; 160
 2ec:	20 9a       	sbi	0x04, 0	; 4
 2ee:	8e 2f       	mov	r24, r30
 2f0:	8a 95       	dec	r24
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <OneWire_TRX_Byte+0x10>
	//Initial Logic Low
	OneWire_TRX_Set_Logic(0);
    OneWire_Delay_Clock_Low_Time();
	
	//Data Controlled By Master
	if(i < (ONEWIRE_FRAME_LEN-1)){
 2f4:	6b 30       	cpi	r22, 0x0B	; 11
 2f6:	21 f0       	breq	.+8      	; 0x300 <OneWire_TRX_Byte+0x20>
      if(val & 0x800){
 2f8:	53 fd       	sbrc	r21, 3
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <OneWire_TRX_Byte+0x20>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 2fc:	20 9a       	sbi	0x04, 0	; 4
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <OneWire_TRX_Byte+0x22>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 300:	20 98       	cbi	0x04, 0	; 4
 302:	87 2f       	mov	r24, r23
 304:	8a 95       	dec	r24
 306:	f1 f7       	brne	.-4      	; 0x304 <OneWire_TRX_Byte+0x24>
	}
	
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse();
	rx_val <<= 1;
 308:	22 0f       	add	r18, r18
 30a:	33 1f       	adc	r19, r19
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 30c:	83 b1       	in	r24, 0x03	; 3
	
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse();
	rx_val <<= 1;
	rx_val |= OneWire_TRX_Get_Input_State();
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	81 70       	andi	r24, 0x01	; 1
 312:	90 70       	andi	r25, 0x00	; 0
 314:	28 2b       	or	r18, r24
 316:	39 2b       	or	r19, r25
 318:	87 2f       	mov	r24, r23
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <OneWire_TRX_Byte+0x3a>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 31e:	20 98       	cbi	0x04, 0	; 4
 320:	8e 2f       	mov	r24, r30
 322:	8a 95       	dec	r24
 324:	f1 f7       	brne	.-4      	; 0x322 <OneWire_TRX_Byte+0x42>
  
  //OneWire_TRX_Interrupt_Disable();
  
  uint16_t rx_val=0;
  
  for(uint8_t i=0;i<ONEWIRE_FRAME_LEN;i++){
 326:	6f 5f       	subi	r22, 0xFF	; 255
 328:	6c 30       	cpi	r22, 0x0C	; 12
 32a:	19 f0       	breq	.+6      	; 0x332 <OneWire_TRX_Byte+0x52>
	//Leave For Ack
	else{
	  OneWire_TRX_Set_Logic(1);
	}
	
	val <<= 1;
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	dd cf       	rjmp	.-70     	; 0x2ec <OneWire_TRX_Byte+0xc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 332:	8c e2       	ldi	r24, 0x2C	; 44
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <OneWire_TRX_Byte+0x56>
  }
  
  //OneWire_TRX_Interrupt_Enable();
  OneWire_Delay_Byte_Gap();
  return rx_val;
}
 33a:	c9 01       	movw	r24, r18
 33c:	08 95       	ret

0000033e <OneWire_Bit_Sample_And_Update>:




void OneWire_Bit_Sample_And_Update(void){
  OneWire.FrameVal <<= 1;
 33e:	80 91 58 01 	lds	r24, 0x0158
 342:	90 91 59 01 	lds	r25, 0x0159
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	90 93 59 01 	sts	0x0159, r25
 34e:	80 93 58 01 	sts	0x0158, r24
  OneWire_Debug_Rx_Pulse();
  OneWire.FrameVal |= OneWire_TRX_Get_Input_State();
 352:	20 91 58 01 	lds	r18, 0x0158
 356:	30 91 59 01 	lds	r19, 0x0159
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 35a:	83 b1       	in	r24, 0x03	; 3


void OneWire_Bit_Sample_And_Update(void){
  OneWire.FrameVal <<= 1;
  OneWire_Debug_Rx_Pulse();
  OneWire.FrameVal |= OneWire_TRX_Get_Input_State();
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	81 70       	andi	r24, 0x01	; 1
 360:	90 70       	andi	r25, 0x00	; 0
 362:	82 2b       	or	r24, r18
 364:	93 2b       	or	r25, r19
 366:	90 93 59 01 	sts	0x0159, r25
 36a:	80 93 58 01 	sts	0x0158, r24
  OneWire.BitCounter++;
 36e:	e8 e5       	ldi	r30, 0x58	; 88
 370:	f1 e0       	ldi	r31, 0x01	; 1
 372:	82 91       	ld	r24, -Z
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 83       	st	Z, r24
}
 378:	08 95       	ret

0000037a <OneWire_Bit_Counter_Overflow>:


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 37a:	80 91 57 01 	lds	r24, 0x0157
 37e:	8c 30       	cpi	r24, 0x0C	; 12
 380:	10 f4       	brcc	.+4      	; 0x386 <OneWire_Bit_Counter_Overflow+0xc>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret
    OneWire.BitCounter = 0;
 386:	10 92 57 01 	sts	0x0157, r1
 38a:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
  }
  else{
    return 0;
  }
}
 38c:	08 95       	ret

0000038e <OneWire_Buf_Sample_And_Update>:

void OneWire_Buf_Sample_And_Update(void){
  OneWire.FrameBuf[OneWire.FrameBufIndex] = OneWire.FrameVal;
 38e:	e0 91 c0 01 	lds	r30, 0x01C0
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 91 58 01 	lds	r24, 0x0158
 398:	90 91 59 01 	lds	r25, 0x0159
 39c:	ee 0f       	add	r30, r30
 39e:	ff 1f       	adc	r31, r31
 3a0:	e9 5a       	subi	r30, 0xA9	; 169
 3a2:	fe 4f       	sbci	r31, 0xFE	; 254
 3a4:	96 83       	std	Z+6, r25	; 0x06
 3a6:	85 83       	std	Z+5, r24	; 0x05
  OneWire.FrameVal = 0;
 3a8:	10 92 59 01 	sts	0x0159, r1
 3ac:	10 92 58 01 	sts	0x0158, r1
  OneWire.FrameBufIndex++;
 3b0:	80 91 c0 01 	lds	r24, 0x01C0
 3b4:	8f 5f       	subi	r24, 0xFF	; 255
 3b6:	80 93 c0 01 	sts	0x01C0, r24
}
 3ba:	08 95       	ret

000003bc <OneWire_Buf_Counter_Overflow>:

uint8_t OneWire_Buf_Counter_Overflow(void){
  if(OneWire.FrameBufIndex >= ONEWIRE_FRAME_BUF){
 3bc:	80 91 c0 01 	lds	r24, 0x01C0
 3c0:	82 33       	cpi	r24, 0x32	; 50
 3c2:	68 f0       	brcs	.+26     	; 0x3de <OneWire_Buf_Counter_Overflow+0x22>
    OneWire.FrameBufIndex = 0;
 3c4:	10 92 c0 01 	sts	0x01C0, r1
	OneWire.FrameCounter++;
 3c8:	80 91 5a 01 	lds	r24, 0x015A
 3cc:	90 91 5b 01 	lds	r25, 0x015B
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 5b 01 	sts	0x015B, r25
 3d6:	80 93 5a 01 	sts	0x015A, r24
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	08 95       	ret
	return 1;
  }
  else{
    OneWire.FrameCounter++;
 3de:	80 91 5a 01 	lds	r24, 0x015A
 3e2:	90 91 5b 01 	lds	r25, 0x015B
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	90 93 5b 01 	sts	0x015B, r25
 3ec:	80 93 5a 01 	sts	0x015A, r24
 3f0:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
  }
}
 3f2:	08 95       	ret

000003f4 <OneWire_Fill_Buf>:
    return 0;
  }
}

void OneWire_Buf_Sample_And_Update(void){
  OneWire.FrameBuf[OneWire.FrameBufIndex] = OneWire.FrameVal;
 3f4:	e0 91 c0 01 	lds	r30, 0x01C0
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 91 58 01 	lds	r24, 0x0158
 3fe:	90 91 59 01 	lds	r25, 0x0159
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	e9 5a       	subi	r30, 0xA9	; 169
 408:	fe 4f       	sbci	r31, 0xFE	; 254
 40a:	96 83       	std	Z+6, r25	; 0x06
 40c:	85 83       	std	Z+5, r24	; 0x05
  OneWire.FrameVal = 0;
 40e:	10 92 59 01 	sts	0x0159, r1
 412:	10 92 58 01 	sts	0x0158, r1
  OneWire.FrameBufIndex++;
 416:	80 91 c0 01 	lds	r24, 0x01C0
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	80 93 c0 01 	sts	0x01C0, r24
  }
}

void OneWire_Fill_Buf(void){
  OneWire_Buf_Sample_And_Update();
  OneWire_Buf_Counter_Overflow();
 420:	0e 94 de 01 	call	0x3bc	; 0x3bc <OneWire_Buf_Counter_Overflow>
  
  if((OneWire.FrameBufIndex > 0) && ((OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_START_CMD) == ONEWIRE_START_CMD) ){
 424:	80 91 c0 01 	lds	r24, 0x01C0
 428:	88 23       	and	r24, r24
 42a:	e9 f1       	breq	.+122    	; 0x4a6 <OneWire_Fill_Buf+0xb2>
 42c:	e0 91 c0 01 	lds	r30, 0x01C0
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	ee 0f       	add	r30, r30
 434:	ff 1f       	adc	r31, r31
 436:	eb 5a       	subi	r30, 0xAB	; 171
 438:	fe 4f       	sbci	r31, 0xFE	; 254
 43a:	85 81       	ldd	r24, Z+5	; 0x05
 43c:	96 81       	ldd	r25, Z+6	; 0x06
 43e:	93 ff       	sbrs	r25, 3
 440:	32 c0       	rjmp	.+100    	; 0x4a6 <OneWire_Fill_Buf+0xb2>
    OneWire.CmdReceived = 1;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	80 93 c1 01 	sts	0x01C1, r24
	OneWire.CmdVal = OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_RW_MASK;
 448:	e0 91 c0 01 	lds	r30, 0x01C0
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	eb 5a       	subi	r30, 0xAB	; 171
 454:	fe 4f       	sbci	r31, 0xFE	; 254
 456:	85 81       	ldd	r24, Z+5	; 0x05
 458:	96 81       	ldd	r25, Z+6	; 0x06
 45a:	80 70       	andi	r24, 0x00	; 0
 45c:	92 70       	andi	r25, 0x02	; 2
 45e:	90 93 c3 01 	sts	0x01C3, r25
 462:	80 93 c2 01 	sts	0x01C2, r24
	OneWire.CmdValReg = (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_REG_MASK)>>1;
 466:	e0 91 c0 01 	lds	r30, 0x01C0
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	ee 0f       	add	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	eb 5a       	subi	r30, 0xAB	; 171
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	85 81       	ldd	r24, Z+5	; 0x05
 476:	96 81       	ldd	r25, Z+6	; 0x06
 478:	8e 7f       	andi	r24, 0xFE	; 254
 47a:	91 70       	andi	r25, 0x01	; 1
 47c:	96 95       	lsr	r25
 47e:	87 95       	ror	r24
 480:	90 93 c5 01 	sts	0x01C5, r25
 484:	80 93 c4 01 	sts	0x01C4, r24
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
  OneWire.FrameVal = 0;
}

void OneWire_Flush_Frame_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
    OneWire.FrameBuf[i] = 0;
 48c:	fc 01       	movw	r30, r24
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	e9 5a       	subi	r30, 0xA9	; 169
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	16 82       	std	Z+6, r1	; 0x06
 498:	15 82       	std	Z+5, r1	; 0x05
 49a:	01 96       	adiw	r24, 0x01	; 1
  OneWire.BitCounter = 0;
  OneWire.FrameVal = 0;
}

void OneWire_Flush_Frame_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
 49c:	82 33       	cpi	r24, 0x32	; 50
 49e:	91 05       	cpc	r25, r1
 4a0:	a9 f7       	brne	.-22     	; 0x48c <OneWire_Fill_Buf+0x98>
    OneWire.FrameBuf[i] = 0;
  }
  OneWire.FrameBufIndex = 0;
 4a2:	10 92 c0 01 	sts	0x01C0, r1
 4a6:	08 95       	ret

000004a8 <OneWire_Fill_Buf_Copy_Data>:
    return 0;
  }
}

void OneWire_Buf_Sample_And_Update(void){
  OneWire.FrameBuf[OneWire.FrameBufIndex] = OneWire.FrameVal;
 4a8:	e0 91 c0 01 	lds	r30, 0x01C0
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 91 58 01 	lds	r24, 0x0158
 4b2:	90 91 59 01 	lds	r25, 0x0159
 4b6:	ee 0f       	add	r30, r30
 4b8:	ff 1f       	adc	r31, r31
 4ba:	e9 5a       	subi	r30, 0xA9	; 169
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	96 83       	std	Z+6, r25	; 0x06
 4c0:	85 83       	std	Z+5, r24	; 0x05
  OneWire.FrameVal = 0;
 4c2:	10 92 59 01 	sts	0x0159, r1
 4c6:	10 92 58 01 	sts	0x0158, r1
  OneWire.FrameBufIndex++;
 4ca:	80 91 c0 01 	lds	r24, 0x01C0
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 93 c0 01 	sts	0x01C0, r24
  }
}

void OneWire_Fill_Buf_Copy_Data(void){
  OneWire_Buf_Sample_And_Update();
  OneWire_Buf_Counter_Overflow();
 4d4:	0e 94 de 01 	call	0x3bc	; 0x3bc <OneWire_Buf_Counter_Overflow>
  
  if( (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_STOP_CMD) == ONEWIRE_STOP_CMD){
 4d8:	e0 91 c0 01 	lds	r30, 0x01C0
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	ee 0f       	add	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	eb 5a       	subi	r30, 0xAB	; 171
 4e4:	fe 4f       	sbci	r31, 0xFE	; 254
 4e6:	85 81       	ldd	r24, Z+5	; 0x05
 4e8:	96 81       	ldd	r25, Z+6	; 0x06
 4ea:	92 ff       	sbrs	r25, 2
 4ec:	3f c0       	rjmp	.+126    	; 0x56c <OneWire_Fill_Buf_Copy_Data+0xc4>
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	1c c0       	rjmp	.+56     	; 0x52a <OneWire_Fill_Buf_Copy_Data+0x82>
    //Copy data to DataBuf
    for(uint8_t i=0;i<OneWire.FrameBufIndex;i++){
	  OneWire.DataBuf[OneWire.DataBufIndex] = (OneWire.FrameBuf[i]>>1) & 0xFF;
 4f2:	a0 91 60 02 	lds	r26, 0x0260
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	e2 2f       	mov	r30, r18
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	e9 5a       	subi	r30, 0xA9	; 169
 502:	fe 4f       	sbci	r31, 0xFE	; 254
 504:	85 81       	ldd	r24, Z+5	; 0x05
 506:	96 81       	ldd	r25, Z+6	; 0x06
 508:	96 95       	lsr	r25
 50a:	87 95       	ror	r24
 50c:	a6 53       	subi	r26, 0x36	; 54
 50e:	be 4f       	sbci	r27, 0xFE	; 254
 510:	8c 93       	st	X, r24
	  OneWire.DataBufIndex++;
 512:	80 91 60 02 	lds	r24, 0x0260
 516:	8f 5f       	subi	r24, 0xFF	; 255
 518:	80 93 60 02 	sts	0x0260, r24
	  if(OneWire.DataBufIndex >= ONEWIRE_DATA_BUF){
 51c:	80 91 60 02 	lds	r24, 0x0260
 520:	86 39       	cpi	r24, 0x96	; 150
 522:	10 f0       	brcs	.+4      	; 0x528 <OneWire_Fill_Buf_Copy_Data+0x80>
	    OneWire.DataBufIndex = 0;
 524:	10 92 60 02 	sts	0x0260, r1
  OneWire_Buf_Sample_And_Update();
  OneWire_Buf_Counter_Overflow();
  
  if( (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_STOP_CMD) == ONEWIRE_STOP_CMD){
    //Copy data to DataBuf
    for(uint8_t i=0;i<OneWire.FrameBufIndex;i++){
 528:	2f 5f       	subi	r18, 0xFF	; 255
 52a:	80 91 c0 01 	lds	r24, 0x01C0
 52e:	28 17       	cp	r18, r24
 530:	00 f3       	brcs	.-64     	; 0x4f2 <OneWire_Fill_Buf_Copy_Data+0x4a>
	  OneWire.DataBufIndex++;
	  if(OneWire.DataBufIndex >= ONEWIRE_DATA_BUF){
	    OneWire.DataBufIndex = 0;
	  }
	}
    OneWire.CmdReceived = 0;
 532:	10 92 c1 01 	sts	0x01C1, r1
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
  OneWire.FrameVal = 0;
}

void OneWire_Flush_Frame_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
    OneWire.FrameBuf[i] = 0;
 53a:	fc 01       	movw	r30, r24
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	e9 5a       	subi	r30, 0xA9	; 169
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	16 82       	std	Z+6, r1	; 0x06
 546:	15 82       	std	Z+5, r1	; 0x05
 548:	01 96       	adiw	r24, 0x01	; 1
  OneWire.BitCounter = 0;
  OneWire.FrameVal = 0;
}

void OneWire_Flush_Frame_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
 54a:	82 33       	cpi	r24, 0x32	; 50
 54c:	91 05       	cpc	r25, r1
 54e:	a9 f7       	brne	.-22     	; 0x53a <OneWire_Fill_Buf_Copy_Data+0x92>
    OneWire.FrameBuf[i] = 0;
  }
  OneWire.FrameBufIndex = 0;
 550:	10 92 c0 01 	sts	0x01C0, r1
	    OneWire.DataBufIndex = 0;
	  }
	}
    OneWire.CmdReceived = 0;
	OneWire_Flush_Frame_Buf();
	OneWire.CmdVal = 0;
 554:	10 92 c3 01 	sts	0x01C3, r1
 558:	10 92 c2 01 	sts	0x01C2, r1
	OneWire.CmdValReg = 0;
 55c:	10 92 c5 01 	sts	0x01C5, r1
 560:	10 92 c4 01 	sts	0x01C4, r1
	OneWire.FeedbackDataLoaded = 0;
 564:	10 92 c8 01 	sts	0x01C8, r1
	OneWire.FeedbackCounter = 0;
 568:	10 92 c9 01 	sts	0x01C9, r1
 56c:	08 95       	ret

0000056e <OneWire_Read_Mode_Feedback>:
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 56e:	80 91 6b 00 	lds	r24, 0x006B
 572:	8e 7f       	andi	r24, 0xFE	; 254
 574:	80 93 6b 00 	sts	0x006B, r24
}


void OneWire_Read_Mode_Feedback(void){
  OneWire_TRX_Interrupt_Disable();
  if(OneWire.FeedbackData & 0x800){
 578:	80 91 c6 01 	lds	r24, 0x01C6
 57c:	90 91 c7 01 	lds	r25, 0x01C7
 580:	93 ff       	sbrs	r25, 3
 582:	02 c0       	rjmp	.+4      	; 0x588 <OneWire_Read_Mode_Feedback+0x1a>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 584:	20 98       	cbi	0x04, 0	; 4
 586:	01 c0       	rjmp	.+2      	; 0x58a <OneWire_Read_Mode_Feedback+0x1c>
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 588:	20 9a       	sbi	0x04, 0	; 4
  if(OneWire.FeedbackData & 0x800){
	OneWire_TRX_Set_Logic(1);
  }else{
	OneWire_TRX_Set_Logic(0);
  }
  OneWire.FeedbackData <<= 1;
 58a:	80 91 c6 01 	lds	r24, 0x01C6
 58e:	90 91 c7 01 	lds	r25, 0x01C7
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	90 93 c7 01 	sts	0x01C7, r25
 59a:	80 93 c6 01 	sts	0x01C6, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 59e:	80 ea       	ldi	r24, 0xA0	; 160
 5a0:	98 2f       	mov	r25, r24
 5a2:	9a 95       	dec	r25
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <OneWire_Read_Mode_Feedback+0x34>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 5a6:	8a 95       	dec	r24
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <OneWire_Read_Mode_Feedback+0x38>
 5aa:	20 98       	cbi	0x04, 0	; 4
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 5ac:	80 91 6b 00 	lds	r24, 0x006B
 5b0:	81 60       	ori	r24, 0x01	; 1
 5b2:	80 93 6b 00 	sts	0x006B, r24
  OneWire.FeedbackData <<= 1;
  OneWire_Delay_Half_Bit_Time();
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Set_Logic(1);
  OneWire_TRX_Interrupt_Enable();
}
 5b6:	08 95       	ret

000005b8 <OneWire_Master_Send_Data>:


void OneWire_Master_Send_Data(uint8_t *data, uint8_t len){
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	18 2f       	mov	r17, r24
 5c6:	09 2f       	mov	r16, r25
 5c8:	e6 2e       	mov	r14, r22
  uint16_t StartByte = ONEWIRE_START_CMD | ONEWIRE_WRITE_CMD | 1;
  uint16_t DataByte  = ONEWIRE_CONT_CMD  | ONEWIRE_WRITE_CMD | 1;
  uint16_t EndByte   = ONEWIRE_STOP_CMD  | ONEWIRE_WRITE_CMD | 1;
  uint16_t temp      = 0;
  OneWire_TRX_Byte(StartByte);
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	98 e0       	ldi	r25, 0x08	; 8
 5ce:	0e 94 70 01 	call	0x2e0	; 0x2e0 <OneWire_TRX_Byte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5d2:	8c e2       	ldi	r24, 0x2C	; 44
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <OneWire_Master_Send_Data+0x1e>
 5da:	21 2f       	mov	r18, r17
 5dc:	30 2f       	mov	r19, r16
 5de:	c9 01       	movw	r24, r18
 5e0:	ec 01       	movw	r28, r24
 5e2:	ff 24       	eor	r15, r15
  _delay_us(100);
  for(uint8_t i=0;i<len;i++){
    if(i == (len-1)){
 5e4:	0e 2d       	mov	r16, r14
 5e6:	10 e0       	ldi	r17, 0x00	; 0
 5e8:	01 50       	subi	r16, 0x01	; 1
 5ea:	10 40       	sbci	r17, 0x00	; 0
 5ec:	16 c0       	rjmp	.+44     	; 0x61a <OneWire_Master_Send_Data+0x62>
 5ee:	8f 2d       	mov	r24, r15
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	28 81       	ld	r18, Y
 5f4:	80 17       	cp	r24, r16
 5f6:	91 07       	cpc	r25, r17
 5f8:	39 f4       	brne	.+14     	; 0x608 <OneWire_Master_Send_Data+0x50>
	  temp = EndByte  | (data[i]<<1);
 5fa:	82 2f       	mov	r24, r18
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	81 60       	ori	r24, 0x01	; 1
 604:	94 60       	ori	r25, 0x04	; 4
 606:	05 c0       	rjmp	.+10     	; 0x612 <OneWire_Master_Send_Data+0x5a>
	}
	else{
	  temp = DataByte | (data[i]<<1);
 608:	82 2f       	mov	r24, r18
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	81 60       	ori	r24, 0x01	; 1
	}
	OneWire_TRX_Byte(temp);
 612:	0e 94 70 01 	call	0x2e0	; 0x2e0 <OneWire_TRX_Byte>
  uint16_t DataByte  = ONEWIRE_CONT_CMD  | ONEWIRE_WRITE_CMD | 1;
  uint16_t EndByte   = ONEWIRE_STOP_CMD  | ONEWIRE_WRITE_CMD | 1;
  uint16_t temp      = 0;
  OneWire_TRX_Byte(StartByte);
  _delay_us(100);
  for(uint8_t i=0;i<len;i++){
 616:	f3 94       	inc	r15
 618:	21 96       	adiw	r28, 0x01	; 1
 61a:	fe 14       	cp	r15, r14
 61c:	40 f3       	brcs	.-48     	; 0x5ee <OneWire_Master_Send_Data+0x36>
 61e:	88 e5       	ldi	r24, 0x58	; 88
 620:	92 e0       	ldi	r25, 0x02	; 2
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <OneWire_Master_Send_Data+0x6a>
	  temp = DataByte | (data[i]<<1);
	}
	OneWire_TRX_Byte(temp);
  }
  _delay_us(200);
}
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	ff 90       	pop	r15
 630:	ef 90       	pop	r14
 632:	08 95       	ret

00000634 <OneWire_Master_Receive_Data>:

uint8_t OneWire_Master_Receive_Data(uint8_t addr){
  uint16_t StartByte = ONEWIRE_START_CMD | ONEWIRE_READ_CMD | 1;
  uint16_t EndByte   = ONEWIRE_STOP_CMD  | ONEWIRE_READ_CMD | 1;
  uint16_t temp      = 0;
  OneWire_TRX_Byte(StartByte | (addr<<1));
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	81 60       	ori	r24, 0x01	; 1
 63c:	9a 60       	ori	r25, 0x0A	; 10
 63e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <OneWire_TRX_Byte>
 642:	88 eb       	ldi	r24, 0xB8	; 184
 644:	9b e0       	ldi	r25, 0x0B	; 11
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <OneWire_Master_Receive_Data+0x12>
  _delay_ms(1);
  temp = OneWire_TRX_Byte(EndByte | (0xFF<<1));
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	97 e0       	ldi	r25, 0x07	; 7
 64e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <OneWire_TRX_Byte>
  temp >>= 1;
 652:	96 95       	lsr	r25
 654:	87 95       	ror	r24
  temp &= 0xFF;
  return (uint8_t)temp;
}
 656:	08 95       	ret

00000658 <__vector_3>:





ISR(ONEWIRE_TRX_PCINT_VECT){
 658:	1f 92       	push	r1
 65a:	0f 92       	push	r0
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	0f 92       	push	r0
 660:	11 24       	eor	r1, r1
 662:	2f 93       	push	r18
 664:	3f 93       	push	r19
 666:	4f 93       	push	r20
 668:	5f 93       	push	r21
 66a:	6f 93       	push	r22
 66c:	7f 93       	push	r23
 66e:	8f 93       	push	r24
 670:	9f 93       	push	r25
 672:	af 93       	push	r26
 674:	bf 93       	push	r27
 676:	ef 93       	push	r30
 678:	ff 93       	push	r31
void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
}

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 67a:	80 91 6b 00 	lds	r24, 0x006B
 67e:	80 ff       	sbrs	r24, 0
 680:	5d c0       	rjmp	.+186    	; 0x73c <__vector_3+0xe4>
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 682:	18 99       	sbic	0x03, 0	; 3
 684:	5b c0       	rjmp	.+182    	; 0x73c <__vector_3+0xe4>
  //TRX Interrupt Fired
  if( OneWire_TRX_Interrupt_Status() == 1){        
	//Falling Edge Interrupt
    if(OneWire_TRX_Falling_Edge_Interrupt() == 1){
	  
	  if((OneWire.CmdReceived == 1) && (OneWire.CmdVal == ONEWIRE_WRITE_CMD)){
 686:	80 91 c1 01 	lds	r24, 0x01C1
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	a1 f4       	brne	.+40     	; 0x6b6 <__vector_3+0x5e>
 68e:	80 91 c2 01 	lds	r24, 0x01C2
 692:	90 91 c3 01 	lds	r25, 0x01C3
 696:	89 2b       	or	r24, r25
 698:	71 f4       	brne	.+28     	; 0x6b6 <__vector_3+0x5e>
	    OneWire_Delay_Rx_Int();
 69a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <OneWire_Delay_Rx_Int>
	    OneWire_Bit_Sample_And_Update();
 69e:	0e 94 9f 01 	call	0x33e	; 0x33e <OneWire_Bit_Sample_And_Update>
  OneWire.BitCounter++;
}


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 6a2:	80 91 57 01 	lds	r24, 0x0157
 6a6:	8c 30       	cpi	r24, 0x0C	; 12
 6a8:	08 f4       	brcc	.+2      	; 0x6ac <__vector_3+0x54>
 6aa:	48 c0       	rjmp	.+144    	; 0x73c <__vector_3+0xe4>
    OneWire.BitCounter = 0;
 6ac:	10 92 57 01 	sts	0x0157, r1
	  
	  if((OneWire.CmdReceived == 1) && (OneWire.CmdVal == ONEWIRE_WRITE_CMD)){
	    OneWire_Delay_Rx_Int();
	    OneWire_Bit_Sample_And_Update();
	    if(OneWire_Bit_Counter_Overflow() == 1){
		  OneWire_Fill_Buf_Copy_Data();
 6b0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <OneWire_Fill_Buf_Copy_Data>
 6b4:	43 c0       	rjmp	.+134    	; 0x73c <__vector_3+0xe4>
	    }
      }
	  else if((OneWire.CmdReceived == 1) && (OneWire.CmdVal == ONEWIRE_READ_CMD)){
 6b6:	20 91 c1 01 	lds	r18, 0x01C1
 6ba:	21 30       	cpi	r18, 0x01	; 1
 6bc:	99 f5       	brne	.+102    	; 0x724 <__vector_3+0xcc>
 6be:	80 91 c2 01 	lds	r24, 0x01C2
 6c2:	90 91 c3 01 	lds	r25, 0x01C3
 6c6:	80 50       	subi	r24, 0x00	; 0
 6c8:	92 40       	sbci	r25, 0x02	; 2
 6ca:	61 f5       	brne	.+88     	; 0x724 <__vector_3+0xcc>
		if(OneWire.FeedbackDataLoaded == 0){
 6cc:	80 91 c8 01 	lds	r24, 0x01C8
 6d0:	88 23       	and	r24, r24
 6d2:	41 f4       	brne	.+16     	; 0x6e4 <__vector_3+0x8c>
		  //Pass your data to temp variable
		  uint16_t temp = 0x55;
		  temp <<= 1;
		  OneWire.FeedbackData = temp | ONEWIRE_STOP_CMD | ONEWIRE_READ_CMD | 1;
 6d4:	8b ea       	ldi	r24, 0xAB	; 171
 6d6:	96 e0       	ldi	r25, 0x06	; 6
 6d8:	90 93 c7 01 	sts	0x01C7, r25
 6dc:	80 93 c6 01 	sts	0x01C6, r24
		  OneWire.FeedbackDataLoaded = 1;
 6e0:	20 93 c8 01 	sts	0x01C8, r18
		}
	    OneWire_Read_Mode_Feedback();
 6e4:	0e 94 b7 02 	call	0x56e	; 0x56e <OneWire_Read_Mode_Feedback>
		OneWire.FeedbackCounter ++;
 6e8:	80 91 c9 01 	lds	r24, 0x01C9
 6ec:	8f 5f       	subi	r24, 0xFF	; 255
 6ee:	80 93 c9 01 	sts	0x01C9, r24
		if(OneWire.FeedbackCounter >= ONEWIRE_FRAME_LEN){
 6f2:	80 91 c9 01 	lds	r24, 0x01C9
 6f6:	8c 30       	cpi	r24, 0x0C	; 12
 6f8:	08 f1       	brcs	.+66     	; 0x73c <__vector_3+0xe4>
		  OneWire.CmdReceived = 0;
 6fa:	10 92 c1 01 	sts	0x01C1, r1
	      OneWire.FrameBufIndex = 0;
 6fe:	10 92 c0 01 	sts	0x01C0, r1
	      OneWire.FrameBuf[0] = 0;
 702:	10 92 5d 01 	sts	0x015D, r1
 706:	10 92 5c 01 	sts	0x015C, r1
	      OneWire.CmdVal = 0;
 70a:	10 92 c3 01 	sts	0x01C3, r1
 70e:	10 92 c2 01 	sts	0x01C2, r1
	      OneWire.CmdValReg = 0;
 712:	10 92 c5 01 	sts	0x01C5, r1
 716:	10 92 c4 01 	sts	0x01C4, r1
	      OneWire.FeedbackDataLoaded = 0;
 71a:	10 92 c8 01 	sts	0x01C8, r1
	      OneWire.FeedbackCounter = 0;
 71e:	10 92 c9 01 	sts	0x01C9, r1
 722:	0c c0       	rjmp	.+24     	; 0x73c <__vector_3+0xe4>
	      OneWire_Debug_Rx_Pulse();
		}
	  }
	  else{
	    OneWire_Delay_Rx_Int();
 724:	0e 94 61 01 	call	0x2c2	; 0x2c2 <OneWire_Delay_Rx_Int>
	    OneWire_Bit_Sample_And_Update();
 728:	0e 94 9f 01 	call	0x33e	; 0x33e <OneWire_Bit_Sample_And_Update>
  OneWire.BitCounter++;
}


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 72c:	80 91 57 01 	lds	r24, 0x0157
 730:	8c 30       	cpi	r24, 0x0C	; 12
 732:	20 f0       	brcs	.+8      	; 0x73c <__vector_3+0xe4>
    OneWire.BitCounter = 0;
 734:	10 92 57 01 	sts	0x0157, r1
	  }
	  else{
	    OneWire_Delay_Rx_Int();
	    OneWire_Bit_Sample_And_Update();
	    if(OneWire_Bit_Counter_Overflow() == 1){
		  OneWire_Fill_Buf();
 738:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <OneWire_Fill_Buf>
	    }
	  }
	}
  }
}
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	7f 91       	pop	r23
 74a:	6f 91       	pop	r22
 74c:	5f 91       	pop	r21
 74e:	4f 91       	pop	r20
 750:	3f 91       	pop	r19
 752:	2f 91       	pop	r18
 754:	0f 90       	pop	r0
 756:	0f be       	out	0x3f, r0	; 63
 758:	0f 90       	pop	r0
 75a:	1f 90       	pop	r1
 75c:	18 95       	reti

0000075e <OneWire_Get_Data_Buf>:




uint8_t OneWire_Get_Data_Buf(uint8_t index){
  return OneWire.DataBuf[index];
 75e:	e8 2f       	mov	r30, r24
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	e6 53       	subi	r30, 0x36	; 54
 764:	fe 4f       	sbci	r31, 0xFE	; 254
 766:	80 81       	ld	r24, Z
}
 768:	08 95       	ret

0000076a <OneWire_Get_Data_Buf_Index>:

uint8_t OneWire_Get_Data_Buf_Index(void){
  return OneWire.DataBufIndex;
 76a:	80 91 60 02 	lds	r24, 0x0260
}
 76e:	08 95       	ret

00000770 <OneWire_Init_Master>:




void OneWire_Init_Master(void){
  OneWire_Struct_Init();
 770:	0e 94 b8 00 	call	0x170	; 0x170 <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 774:	0e 94 29 01 	call	0x252	; 0x252 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 778:	0e 94 2d 01 	call	0x25a	; 0x25a <OneWire_TRX_Interrupt_Init>
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 77c:	eb e6       	ldi	r30, 0x6B	; 107
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	8e 7f       	andi	r24, 0xFE	; 254
 784:	80 83       	st	Z, r24
void OneWire_Init_Master(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Disable();
}
 786:	08 95       	ret

00000788 <OneWire_Init_Slave>:

void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
 788:	0e 94 b8 00 	call	0x170	; 0x170 <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 78c:	0e 94 29 01 	call	0x252	; 0x252 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 790:	0e 94 2d 01 	call	0x25a	; 0x25a <OneWire_TRX_Interrupt_Init>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 794:	eb e6       	ldi	r30, 0x6B	; 107
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	81 60       	ori	r24, 0x01	; 1
 79c:	80 83       	st	Z, r24
void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Enable();
 79e:	08 95       	ret

000007a0 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
 7a0:	10 92 28 01 	sts	0x0128, r1
 7a4:	e9 e2       	ldi	r30, 0x29	; 41
 7a6:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
 7a8:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	e1 33       	cpi	r30, 0x31	; 49
 7ae:	f8 07       	cpc	r31, r24
 7b0:	d9 f7       	brne	.-10     	; 0x7a8 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
 7b2:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
 7b4:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
 7b6:	80 e2       	ldi	r24, 0x20	; 32
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	93 a3       	std	Z+35, r25	; 0x23
 7bc:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
 7be:	15 a2       	std	Z+37, r1	; 0x25
 7c0:	14 a2       	std	Z+36, r1	; 0x24
 7c2:	20 e0       	ldi	r18, 0x00	; 0
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
 7c6:	e8 5d       	subi	r30, 0xD8	; 216
 7c8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ca:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
 7cc:	2f 5f       	subi	r18, 0xFF	; 255
 7ce:	80 91 53 01 	lds	r24, 0x0153
 7d2:	90 91 54 01 	lds	r25, 0x0154
 7d6:	e2 2f       	mov	r30, r18
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	e8 17       	cp	r30, r24
 7dc:	f9 07       	cpc	r31, r25
 7de:	98 f3       	brcs	.-26     	; 0x7c6 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
 7e0:	08 95       	ret

000007e2 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
 7e2:	08 95       	ret

000007e4 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
 7e4:	08 95       	ret

000007e6 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
 7e6:	9b 01       	movw	r18, r22
 7e8:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
 7ea:	60 e6       	ldi	r22, 0x60	; 96
 7ec:	73 ee       	ldi	r23, 0xE3	; 227
 7ee:	86 e1       	ldi	r24, 0x16	; 22
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodsi4>
 7f6:	21 50       	subi	r18, 0x01	; 1
 7f8:	30 40       	sbci	r19, 0x00	; 0
 7fa:	40 40       	sbci	r20, 0x00	; 0
 7fc:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
 7fe:	e0 ec       	ldi	r30, 0xC0	; 192
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	82 60       	ori	r24, 0x02	; 2
 806:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
 808:	bb 27       	eor	r27, r27
 80a:	a5 2f       	mov	r26, r21
 80c:	94 2f       	mov	r25, r20
 80e:	83 2f       	mov	r24, r19
 810:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
 814:	20 93 c4 00 	sts	0x00C4, r18
}
 818:	08 95       	ret

0000081a <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 81a:	e1 ec       	ldi	r30, 0xC1	; 193
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	80 81       	ld	r24, Z
 820:	88 60       	ori	r24, 0x08	; 8
 822:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 824:	86 e0       	ldi	r24, 0x06	; 6
 826:	80 93 c2 00 	sts	0x00C2, r24
}
 82a:	08 95       	ret

0000082c <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 82c:	e1 ec       	ldi	r30, 0xC1	; 193
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	80 61       	ori	r24, 0x10	; 16
 834:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 836:	86 e0       	ldi	r24, 0x06	; 6
 838:	80 93 c2 00 	sts	0x00C2, r24
}
 83c:	08 95       	ret

0000083e <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 83e:	e1 ec       	ldi	r30, 0xC1	; 193
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	80 68       	ori	r24, 0x80	; 128
 846:	80 83       	st	Z, r24
  sei();
 848:	78 94       	sei
}
 84a:	08 95       	ret

0000084c <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
 84c:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
 84e:	80 91 c0 00 	lds	r24, 0x00C0
 852:	85 ff       	sbrs	r24, 5
 854:	fc cf       	rjmp	.-8      	; 0x84e <UART_Transmit_Byte+0x2>
  UDR0=val;
 856:	90 93 c6 00 	sts	0x00C6, r25
}
 85a:	08 95       	ret

0000085c <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
 85c:	df 93       	push	r29
 85e:	cf 93       	push	r28
 860:	0f 92       	push	r0
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
 866:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
 868:	80 91 c0 00 	lds	r24, 0x00C0
 86c:	84 ff       	sbrs	r24, 4
 86e:	05 c0       	rjmp	.+10     	; 0x87a <UART_Receive_Byte+0x1e>
    val=UDR0;
 870:	80 91 c6 00 	lds	r24, 0x00C6
 874:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	08 c0       	rjmp	.+16     	; 0x88a <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
 87a:	80 91 c0 00 	lds	r24, 0x00C0
 87e:	83 ff       	sbrs	r24, 3
 880:	07 c0       	rjmp	.+14     	; 0x890 <UART_Receive_Byte+0x34>
    val=UDR0;
 882:	80 91 c6 00 	lds	r24, 0x00C6
 886:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
 888:	82 e0       	ldi	r24, 0x02	; 2
 88a:	80 93 28 01 	sts	0x0128, r24
 88e:	05 c0       	rjmp	.+10     	; 0x89a <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
 890:	80 91 c6 00 	lds	r24, 0x00C6
 894:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
 896:	10 92 28 01 	sts	0x0128, r1
  }
  return val;
 89a:	89 81       	ldd	r24, Y+1	; 0x01
}
 89c:	0f 90       	pop	r0
 89e:	cf 91       	pop	r28
 8a0:	df 91       	pop	r29
 8a2:	08 95       	ret

000008a4 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
 8a4:	80 91 32 01 	lds	r24, 0x0132
}
 8a8:	08 95       	ret

000008aa <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
 8aa:	10 92 32 01 	sts	0x0132, r1
}
 8ae:	08 95       	ret

000008b0 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
 8b0:	1f 93       	push	r17
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	ab 01       	movw	r20, r22
 8b8:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 8ba:	4f 3f       	cpi	r20, 0xFF	; 255
 8bc:	51 05       	cpc	r21, r1
 8be:	61 05       	cpc	r22, r1
 8c0:	71 05       	cpc	r23, r1
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <UART_Transmit_Byte_Hex+0x16>
 8c4:	28 f4       	brcc	.+10     	; 0x8d0 <UART_Transmit_Byte_Hex+0x20>
 8c6:	e8 e0       	ldi	r30, 0x08	; 8
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	c2 e0       	ldi	r28, 0x02	; 2
 8cc:	d0 e0       	ldi	r29, 0x00	; 0
 8ce:	11 c0       	rjmp	.+34     	; 0x8f2 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 8d0:	40 30       	cpi	r20, 0x00	; 0
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	58 07       	cpc	r21, r24
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	68 07       	cpc	r22, r24
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	78 07       	cpc	r23, r24
 8de:	28 f0       	brcs	.+10     	; 0x8ea <UART_Transmit_Byte_Hex+0x3a>
 8e0:	e0 e2       	ldi	r30, 0x20	; 32
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	c8 e0       	ldi	r28, 0x08	; 8
 8e6:	d0 e0       	ldi	r29, 0x00	; 0
 8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <UART_Transmit_Byte_Hex+0x42>
 8ea:	e0 e1       	ldi	r30, 0x10	; 16
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	c4 e0       	ldi	r28, 0x04	; 4
 8f0:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 8f2:	80 91 c0 00 	lds	r24, 0x00C0
 8f6:	85 ff       	sbrs	r24, 5
 8f8:	fc cf       	rjmp	.-8      	; 0x8f2 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
 8fa:	80 e3       	ldi	r24, 0x30	; 48
 8fc:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 900:	80 91 c0 00 	lds	r24, 0x00C0
 904:	85 ff       	sbrs	r24, 5
 906:	fc cf       	rjmp	.-8      	; 0x900 <__stack+0x1>
  UDR0=val;
 908:	88 e7       	ldi	r24, 0x78	; 120
 90a:	80 93 c6 00 	sts	0x00C6, r24
 90e:	10 e0       	ldi	r17, 0x00	; 0
 910:	1f c0       	rjmp	.+62     	; 0x950 <__stack+0x51>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 912:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 914:	db 01       	movw	r26, r22
 916:	ca 01       	movw	r24, r20
 918:	0e 2e       	mov	r0, r30
 91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0x25>
 91c:	b6 95       	lsr	r27
 91e:	a7 95       	ror	r26
 920:	97 95       	ror	r25
 922:	87 95       	ror	r24
 924:	0a 94       	dec	r0
 926:	d2 f7       	brpl	.-12     	; 0x91c <__stack+0x1d>
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	8f 70       	andi	r24, 0x0F	; 15
 92c:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 92e:	8a 30       	cpi	r24, 0x0A	; 10
 930:	91 05       	cpc	r25, r1
 932:	20 f0       	brcs	.+8      	; 0x93c <__stack+0x3d>
	    hex_digit+=55;
 934:	9c 01       	movw	r18, r24
 936:	29 5c       	subi	r18, 0xC9	; 201
 938:	3f 4f       	sbci	r19, 0xFF	; 255
 93a:	03 c0       	rjmp	.+6      	; 0x942 <__stack+0x43>
	  }else {
	    hex_digit+=48;
 93c:	9c 01       	movw	r18, r24
 93e:	20 5d       	subi	r18, 0xD0	; 208
 940:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 942:	80 91 c0 00 	lds	r24, 0x00C0
 946:	85 ff       	sbrs	r24, 5
 948:	fc cf       	rjmp	.-8      	; 0x942 <__stack+0x43>
  UDR0=val;
 94a:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 94e:	1f 5f       	subi	r17, 0xFF	; 255
 950:	81 2f       	mov	r24, r17
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	8c 17       	cp	r24, r28
 956:	9d 07       	cpc	r25, r29
 958:	e0 f2       	brcs	.-72     	; 0x912 <__stack+0x13>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	1f 91       	pop	r17
 960:	08 95       	ret

00000962 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
 962:	cf 92       	push	r12
 964:	df 92       	push	r13
 966:	ef 92       	push	r14
 968:	ff 92       	push	r15
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	ab 01       	movw	r20, r22
 974:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 976:	4f 3f       	cpi	r20, 0xFF	; 255
 978:	51 05       	cpc	r21, r1
 97a:	61 05       	cpc	r22, r1
 97c:	71 05       	cpc	r23, r1
 97e:	09 f0       	breq	.+2      	; 0x982 <UART_Transmit_Byte_Bin+0x20>
 980:	10 f4       	brcc	.+4      	; 0x986 <UART_Transmit_Byte_Bin+0x24>
 982:	97 e0       	ldi	r25, 0x07	; 7
 984:	0b c0       	rjmp	.+22     	; 0x99c <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 986:	40 30       	cpi	r20, 0x00	; 0
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	58 07       	cpc	r21, r24
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	68 07       	cpc	r22, r24
 990:	80 e0       	ldi	r24, 0x00	; 0
 992:	78 07       	cpc	r23, r24
 994:	10 f0       	brcs	.+4      	; 0x99a <UART_Transmit_Byte_Bin+0x38>
 996:	9f e1       	ldi	r25, 0x1F	; 31
 998:	01 c0       	rjmp	.+2      	; 0x99c <UART_Transmit_Byte_Bin+0x3a>
 99a:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 99c:	80 91 c0 00 	lds	r24, 0x00C0
 9a0:	85 ff       	sbrs	r24, 5
 9a2:	fc cf       	rjmp	.-8      	; 0x99c <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
 9a4:	80 e3       	ldi	r24, 0x30	; 48
 9a6:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 9aa:	80 91 c0 00 	lds	r24, 0x00C0
 9ae:	85 ff       	sbrs	r24, 5
 9b0:	fc cf       	rjmp	.-8      	; 0x9aa <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
 9b2:	82 e6       	ldi	r24, 0x62	; 98
 9b4:	80 93 c6 00 	sts	0x00C6, r24
 9b8:	20 e0       	ldi	r18, 0x00	; 0
 9ba:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
 9bc:	e9 2f       	mov	r30, r25
 9be:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 9c0:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 9c2:	11 e3       	ldi	r17, 0x31	; 49
 9c4:	ef 01       	movw	r28, r30
 9c6:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
 9c8:	cf 01       	movw	r24, r30
 9ca:	82 1b       	sub	r24, r18
 9cc:	93 0b       	sbc	r25, r19
 9ce:	6a 01       	movw	r12, r20
 9d0:	7b 01       	movw	r14, r22
 9d2:	04 c0       	rjmp	.+8      	; 0x9dc <UART_Transmit_Byte_Bin+0x7a>
 9d4:	f6 94       	lsr	r15
 9d6:	e7 94       	ror	r14
 9d8:	d7 94       	ror	r13
 9da:	c7 94       	ror	r12
 9dc:	8a 95       	dec	r24
 9de:	d2 f7       	brpl	.-12     	; 0x9d4 <UART_Transmit_Byte_Bin+0x72>
 9e0:	d7 01       	movw	r26, r14
 9e2:	c6 01       	movw	r24, r12
 9e4:	81 70       	andi	r24, 0x01	; 1
 9e6:	90 70       	andi	r25, 0x00	; 0
 9e8:	89 2b       	or	r24, r25
 9ea:	39 f0       	breq	.+14     	; 0x9fa <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 9ec:	80 91 c0 00 	lds	r24, 0x00C0
 9f0:	85 ff       	sbrs	r24, 5
 9f2:	fc cf       	rjmp	.-8      	; 0x9ec <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
 9f4:	10 93 c6 00 	sts	0x00C6, r17
 9f8:	06 c0       	rjmp	.+12     	; 0xa06 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 9fa:	80 91 c0 00 	lds	r24, 0x00C0
 9fe:	85 ff       	sbrs	r24, 5
 a00:	fc cf       	rjmp	.-8      	; 0x9fa <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
 a02:	00 93 c6 00 	sts	0x00C6, r16
 a06:	2f 5f       	subi	r18, 0xFF	; 255
 a08:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 a0a:	2c 17       	cp	r18, r28
 a0c:	3d 07       	cpc	r19, r29
 a0e:	e1 f6       	brne	.-72     	; 0x9c8 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
 a10:	df 91       	pop	r29
 a12:	cf 91       	pop	r28
 a14:	1f 91       	pop	r17
 a16:	0f 91       	pop	r16
 a18:	ff 90       	pop	r15
 a1a:	ef 90       	pop	r14
 a1c:	df 90       	pop	r13
 a1e:	cf 90       	pop	r12
 a20:	08 95       	ret

00000a22 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
 a22:	ac 01       	movw	r20, r24
 a24:	20 e0       	ldi	r18, 0x00	; 0
 a26:	07 c0       	rjmp	.+14     	; 0xa36 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 a28:	80 91 c0 00 	lds	r24, 0x00C0
 a2c:	85 ff       	sbrs	r24, 5
 a2e:	fc cf       	rjmp	.-8      	; 0xa28 <UART_Transmit_Text+0x6>
  UDR0=val;
 a30:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
 a34:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 a36:	fa 01       	movw	r30, r20
 a38:	e2 0f       	add	r30, r18
 a3a:	f1 1d       	adc	r31, r1
 a3c:	e0 81       	ld	r30, Z
 a3e:	ee 23       	and	r30, r30
 a40:	99 f7       	brne	.-26     	; 0xa28 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
 a42:	08 95       	ret

00000a44 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
 a44:	82 e2       	ldi	r24, 0x22	; 34
 a46:	91 e0       	ldi	r25, 0x01	; 1
 a48:	0e 94 11 05 	call	0xa22	; 0xa22 <UART_Transmit_Text>
}
 a4c:	08 95       	ret

00000a4e <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
 a4e:	85 e2       	ldi	r24, 0x25	; 37
 a50:	91 e0       	ldi	r25, 0x01	; 1
 a52:	0e 94 11 05 	call	0xa22	; 0xa22 <UART_Transmit_Text>
}
 a56:	08 95       	ret

00000a58 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
 a58:	bf 92       	push	r11
 a5a:	cf 92       	push	r12
 a5c:	df 92       	push	r13
 a5e:	ef 92       	push	r14
 a60:	ff 92       	push	r15
 a62:	0f 93       	push	r16
 a64:	1f 93       	push	r17
 a66:	6b 01       	movw	r12, r22
 a68:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 a6a:	61 15       	cp	r22, r1
 a6c:	71 05       	cpc	r23, r1
 a6e:	81 05       	cpc	r24, r1
 a70:	91 05       	cpc	r25, r1
 a72:	31 f4       	brne	.+12     	; 0xa80 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
 a74:	10 92 29 01 	sts	0x0129, r1
    UART.InputNumberDigits=1;
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	80 93 31 01 	sts	0x0131, r24
 a7e:	23 c0       	rjmp	.+70     	; 0xac6 <UART_Determine_Digit_Numbers+0x6e>
 a80:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
 a82:	0b 2d       	mov	r16, r11
 a84:	10 e0       	ldi	r17, 0x00	; 0
 a86:	08 5d       	subi	r16, 0xD8	; 216
 a88:	1e 4f       	sbci	r17, 0xFE	; 254
 a8a:	c7 01       	movw	r24, r14
 a8c:	b6 01       	movw	r22, r12
 a8e:	2a e0       	ldi	r18, 0x0A	; 10
 a90:	30 e0       	ldi	r19, 0x00	; 0
 a92:	40 e0       	ldi	r20, 0x00	; 0
 a94:	50 e0       	ldi	r21, 0x00	; 0
 a96:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodsi4>
 a9a:	f8 01       	movw	r30, r16
 a9c:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
 a9e:	c7 01       	movw	r24, r14
 aa0:	b6 01       	movw	r22, r12
 aa2:	2a e0       	ldi	r18, 0x0A	; 10
 aa4:	30 e0       	ldi	r19, 0x00	; 0
 aa6:	40 e0       	ldi	r20, 0x00	; 0
 aa8:	50 e0       	ldi	r21, 0x00	; 0
 aaa:	0e 94 37 06 	call	0xc6e	; 0xc6e <__udivmodsi4>
 aae:	c9 01       	movw	r24, r18
 ab0:	da 01       	movw	r26, r20
 ab2:	6c 01       	movw	r12, r24
 ab4:	7d 01       	movw	r14, r26
      i++;
 ab6:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
 ab8:	c1 14       	cp	r12, r1
 aba:	d1 04       	cpc	r13, r1
 abc:	e1 04       	cpc	r14, r1
 abe:	f1 04       	cpc	r15, r1
 ac0:	01 f7       	brne	.-64     	; 0xa82 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
 ac2:	b0 92 31 01 	sts	0x0131, r11
  }
}
 ac6:	1f 91       	pop	r17
 ac8:	0f 91       	pop	r16
 aca:	ff 90       	pop	r15
 acc:	ef 90       	pop	r14
 ace:	df 90       	pop	r13
 ad0:	cf 90       	pop	r12
 ad2:	bf 90       	pop	r11
 ad4:	08 95       	ret

00000ad6 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 ad6:	e0 91 31 01 	lds	r30, 0x0131
 ada:	0f c0       	rjmp	.+30     	; 0xafa <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
 adc:	2e 2f       	mov	r18, r30
 ade:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
 ae0:	e2 2f       	mov	r30, r18
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	e8 5d       	subi	r30, 0xD8	; 216
 ae6:	fe 4f       	sbci	r31, 0xFE	; 254
 ae8:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 aea:	80 91 c0 00 	lds	r24, 0x00C0
 aee:	85 ff       	sbrs	r24, 5
 af0:	fc cf       	rjmp	.-8      	; 0xaea <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
 af2:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 af4:	90 93 c6 00 	sts	0x00C6, r25
 af8:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 afa:	ee 23       	and	r30, r30
 afc:	79 f7       	brne	.-34     	; 0xadc <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
 afe:	08 95       	ret

00000b00 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
 b00:	9b 01       	movw	r18, r22
 b02:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 b04:	97 ff       	sbrs	r25, 7
 b06:	0e c0       	rjmp	.+28     	; 0xb24 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 b08:	80 91 c0 00 	lds	r24, 0x00C0
 b0c:	85 ff       	sbrs	r24, 5
 b0e:	fc cf       	rjmp	.-8      	; 0xb08 <UART_Transmit_Number+0x8>
  UDR0=val;
 b10:	8d e2       	ldi	r24, 0x2D	; 45
 b12:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 b16:	50 95       	com	r21
 b18:	40 95       	com	r20
 b1a:	30 95       	com	r19
 b1c:	21 95       	neg	r18
 b1e:	3f 4f       	sbci	r19, 0xFF	; 255
 b20:	4f 4f       	sbci	r20, 0xFF	; 255
 b22:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 b24:	ca 01       	movw	r24, r20
 b26:	b9 01       	movw	r22, r18
 b28:	0e 94 2c 05 	call	0xa58	; 0xa58 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
 b2c:	0e 94 6b 05 	call	0xad6	; 0xad6 <UART_Transmit_Number_Digits>
}
 b30:	08 95       	ret

00000b32 <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
 b32:	fc 01       	movw	r30, r24
 b34:	e8 5d       	subi	r30, 0xD8	; 216
 b36:	fe 4f       	sbci	r31, 0xFE	; 254
 b38:	83 85       	ldd	r24, Z+11	; 0x0b
}
 b3a:	08 95       	ret

00000b3c <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
 b3c:	20 91 55 01 	lds	r18, 0x0155
 b40:	30 91 56 01 	lds	r19, 0x0156
}
 b44:	c9 01       	movw	r24, r18
 b46:	08 95       	ret

00000b48 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
 b48:	10 92 28 01 	sts	0x0128, r1
 b4c:	20 e0       	ldi	r18, 0x00	; 0
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	06 c0       	rjmp	.+12     	; 0xb5e <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
 b52:	f9 01       	movw	r30, r18
 b54:	e8 5d       	subi	r30, 0xD8	; 216
 b56:	fe 4f       	sbci	r31, 0xFE	; 254
 b58:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
 b5a:	2f 5f       	subi	r18, 0xFF	; 255
 b5c:	3f 4f       	sbci	r19, 0xFF	; 255
 b5e:	80 91 53 01 	lds	r24, 0x0153
 b62:	90 91 54 01 	lds	r25, 0x0154
 b66:	28 17       	cp	r18, r24
 b68:	39 07       	cpc	r19, r25
 b6a:	98 f3       	brcs	.-26     	; 0xb52 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
 b6c:	10 92 56 01 	sts	0x0156, r1
 b70:	10 92 55 01 	sts	0x0155, r1
  #endif
}
 b74:	08 95       	ret

00000b76 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
 b76:	df 93       	push	r29
 b78:	cf 93       	push	r28
 b7a:	0f 92       	push	r0
 b7c:	cd b7       	in	r28, 0x3d	; 61
 b7e:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
 b80:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
 b82:	0e 94 2e 04 	call	0x85c	; 0x85c <UART_Receive_Byte>
 b86:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
 b88:	80 91 28 01 	lds	r24, 0x0128
 b8c:	88 23       	and	r24, r24
 b8e:	19 f5       	brne	.+70     	; 0xbd6 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
 b90:	89 81       	ldd	r24, Y+1	; 0x01
 b92:	80 93 32 01 	sts	0x0132, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
 b96:	e0 91 55 01 	lds	r30, 0x0155
 b9a:	f0 91 56 01 	lds	r31, 0x0156
 b9e:	89 81       	ldd	r24, Y+1	; 0x01
 ba0:	e8 5d       	subi	r30, 0xD8	; 216
 ba2:	fe 4f       	sbci	r31, 0xFE	; 254
 ba4:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
 ba6:	80 91 55 01 	lds	r24, 0x0155
 baa:	90 91 56 01 	lds	r25, 0x0156
 bae:	01 96       	adiw	r24, 0x01	; 1
 bb0:	90 93 56 01 	sts	0x0156, r25
 bb4:	80 93 55 01 	sts	0x0155, r24

    if(UART.BufferIndex>=UART.BufferSize){
 bb8:	20 91 55 01 	lds	r18, 0x0155
 bbc:	30 91 56 01 	lds	r19, 0x0156
 bc0:	80 91 53 01 	lds	r24, 0x0153
 bc4:	90 91 54 01 	lds	r25, 0x0154
 bc8:	28 17       	cp	r18, r24
 bca:	39 07       	cpc	r19, r25
 bcc:	20 f0       	brcs	.+8      	; 0xbd6 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
 bce:	10 92 56 01 	sts	0x0156, r1
 bd2:	10 92 55 01 	sts	0x0155, r1
    }
  }
}
 bd6:	0f 90       	pop	r0
 bd8:	cf 91       	pop	r28
 bda:	df 91       	pop	r29
 bdc:	08 95       	ret

00000bde <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
 bde:	1f 92       	push	r1
 be0:	0f 92       	push	r0
 be2:	0f b6       	in	r0, 0x3f	; 63
 be4:	0f 92       	push	r0
 be6:	11 24       	eor	r1, r1
 be8:	2f 93       	push	r18
 bea:	3f 93       	push	r19
 bec:	4f 93       	push	r20
 bee:	5f 93       	push	r21
 bf0:	6f 93       	push	r22
 bf2:	7f 93       	push	r23
 bf4:	8f 93       	push	r24
 bf6:	9f 93       	push	r25
 bf8:	af 93       	push	r26
 bfa:	bf 93       	push	r27
 bfc:	ef 93       	push	r30
 bfe:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
 c00:	0e 94 bb 05 	call	0xb76	; 0xb76 <UART_Interrupt_Service_Routine>
}
 c04:	ff 91       	pop	r31
 c06:	ef 91       	pop	r30
 c08:	bf 91       	pop	r27
 c0a:	af 91       	pop	r26
 c0c:	9f 91       	pop	r25
 c0e:	8f 91       	pop	r24
 c10:	7f 91       	pop	r23
 c12:	6f 91       	pop	r22
 c14:	5f 91       	pop	r21
 c16:	4f 91       	pop	r20
 c18:	3f 91       	pop	r19
 c1a:	2f 91       	pop	r18
 c1c:	0f 90       	pop	r0
 c1e:	0f be       	out	0x3f, r0	; 63
 c20:	0f 90       	pop	r0
 c22:	1f 90       	pop	r1
 c24:	18 95       	reti

00000c26 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
 c26:	ef 92       	push	r14
 c28:	ff 92       	push	r15
 c2a:	0f 93       	push	r16
 c2c:	1f 93       	push	r17
 c2e:	7b 01       	movw	r14, r22
 c30:	8c 01       	movw	r16, r24
  UART_Struct_Init();
 c32:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
 c36:	c8 01       	movw	r24, r16
 c38:	b7 01       	movw	r22, r14
 c3a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 c3e:	e1 ec       	ldi	r30, 0xC1	; 193
 c40:	f0 e0       	ldi	r31, 0x00	; 0
 c42:	80 81       	ld	r24, Z
 c44:	88 60       	ori	r24, 0x08	; 8
 c46:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 c48:	a2 ec       	ldi	r26, 0xC2	; 194
 c4a:	b0 e0       	ldi	r27, 0x00	; 0
 c4c:	96 e0       	ldi	r25, 0x06	; 6
 c4e:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 c50:	80 81       	ld	r24, Z
 c52:	80 61       	ori	r24, 0x10	; 16
 c54:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 c56:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 c58:	80 81       	ld	r24, Z
 c5a:	80 68       	ori	r24, 0x80	; 128
 c5c:	80 83       	st	Z, r24
  sei();
 c5e:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
 c60:	0e 94 a4 05 	call	0xb48	; 0xb48 <UART_Flush_Buffer>
}
 c64:	1f 91       	pop	r17
 c66:	0f 91       	pop	r16
 c68:	ff 90       	pop	r15
 c6a:	ef 90       	pop	r14
 c6c:	08 95       	ret

00000c6e <__udivmodsi4>:
 c6e:	a1 e2       	ldi	r26, 0x21	; 33
 c70:	1a 2e       	mov	r1, r26
 c72:	aa 1b       	sub	r26, r26
 c74:	bb 1b       	sub	r27, r27
 c76:	fd 01       	movw	r30, r26
 c78:	0d c0       	rjmp	.+26     	; 0xc94 <__udivmodsi4_ep>

00000c7a <__udivmodsi4_loop>:
 c7a:	aa 1f       	adc	r26, r26
 c7c:	bb 1f       	adc	r27, r27
 c7e:	ee 1f       	adc	r30, r30
 c80:	ff 1f       	adc	r31, r31
 c82:	a2 17       	cp	r26, r18
 c84:	b3 07       	cpc	r27, r19
 c86:	e4 07       	cpc	r30, r20
 c88:	f5 07       	cpc	r31, r21
 c8a:	20 f0       	brcs	.+8      	; 0xc94 <__udivmodsi4_ep>
 c8c:	a2 1b       	sub	r26, r18
 c8e:	b3 0b       	sbc	r27, r19
 c90:	e4 0b       	sbc	r30, r20
 c92:	f5 0b       	sbc	r31, r21

00000c94 <__udivmodsi4_ep>:
 c94:	66 1f       	adc	r22, r22
 c96:	77 1f       	adc	r23, r23
 c98:	88 1f       	adc	r24, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	1a 94       	dec	r1
 c9e:	69 f7       	brne	.-38     	; 0xc7a <__udivmodsi4_loop>
 ca0:	60 95       	com	r22
 ca2:	70 95       	com	r23
 ca4:	80 95       	com	r24
 ca6:	90 95       	com	r25
 ca8:	9b 01       	movw	r18, r22
 caa:	ac 01       	movw	r20, r24
 cac:	bd 01       	movw	r22, r26
 cae:	cf 01       	movw	r24, r30
 cb0:	08 95       	ret

00000cb2 <_exit>:
 cb2:	f8 94       	cli

00000cb4 <__stop_program>:
 cb4:	ff cf       	rjmp	.-2      	; 0xcb4 <__stop_program>
