
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000c82  00000d16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  00800106  00800106  00000d1c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000073d  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001fd5  00000000  00000000  000014b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068f  00000000  00000000  0000348e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000131d  00000000  00000000  00003b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000450  00000000  00000000  00004e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f7  00000000  00000000  0000528c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000958  00000000  00000000  00005a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000330  00000000  00000000  000063db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3d       	cpi	r26, 0xD8	; 216
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "uart.h"

#define  TX_MODE
//#define  RX_MODE

int main(void){
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  
  #ifdef TX_MODE
  OneWire_Init_Master();
  b2:	0e 94 9e 03 	call	0x73c	; 0x73c <OneWire_Init_Master>
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	2c e2       	ldi	r18, 0x2C	; 44
  bc:	31 e0       	ldi	r19, 0x01	; 1
  be:	f9 01       	movw	r30, r18
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <main+0x18>
  c8:	88 eb       	ldi	r24, 0xB8	; 184
  ca:	e8 2e       	mov	r14, r24
  cc:	8b e0       	ldi	r24, 0x0B	; 11
  ce:	f8 2e       	mov	r15, r24
  
  while(1){
      
	  
	  #ifdef TX_MODE
	  if(OneWire_Tx_Reset_Cmd() == 1){
  d0:	cc e2       	ldi	r28, 0x2C	; 44
  d2:	d1 e0       	ldi	r29, 0x01	; 1
  d4:	08 e5       	ldi	r16, 0x58	; 88
  d6:	12 e0       	ldi	r17, 0x02	; 2
  d8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <OneWire_Tx_Reset_Cmd>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	09 f0       	breq	.+2      	; 0xe2 <main+0x3c>
  e0:	54 c0       	rjmp	.+168    	; 0x18a <main+0xe4>
  e2:	c7 01       	movw	r24, r14
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x3e>
	    _delay_us(1000);
	    OneWire_TRX_Frame( (ONEWIRE_CMD_START<<9) | (ONEWIRE_OWN_AADR<<1) | 1 );
  e8:	81 ed       	ldi	r24, 0xD1	; 209
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
  f0:	ce 01       	movw	r24, r28
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x4c>
		_delay_us(100);
		OneWire_TRX_Frame( (ONEWIRE_CMD_READ <<9) | (0x01<<1) | 1 );
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
  fe:	ce 01       	movw	r24, r28
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x5a>
		_delay_us(100);
		OneWire_TRX_Frame( (ONEWIRE_CMD_WRITE<<9) | (0x02<<1) | 1 );
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
 10c:	ce 01       	movw	r24, r28
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x68>
		_delay_us(100);
		OneWire_TRX_Frame( (ONEWIRE_CMD_CONT <<9) | (0x03<<1) | 1 );
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
 11a:	ce 01       	movw	r24, r28
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x76>
		_delay_us(100);
		OneWire_TRX_Frame( (ONEWIRE_CMD_STOP <<9) | (0x04<<1) | 1 );
 120:	89 e0       	ldi	r24, 0x09	; 9
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
 128:	ce 01       	movw	r24, r28
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x84>
		_delay_us(100);
		OneWire_TRX_Frame( (ONEWIRE_CMD_RSVD <<9) | (0x05<<1) | 1 );
 12e:	8b e0       	ldi	r24, 0x0B	; 11
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
 136:	c8 01       	movw	r24, r16
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x92>
		_delay_us(200);
		
		OneWire_TRX_Frame( (ONEWIRE_CMD_START<<9) | ((ONEWIRE_OWN_AADR+1)<<1) | 1 );
 13c:	83 ed       	ldi	r24, 0xD3	; 211
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
 144:	ce 01       	movw	r24, r28
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0xa0>
		_delay_us(100);
		OneWire_TRX_Frame( (ONEWIRE_CMD_READ <<9) | (0x01<<1) | 1 );
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
 152:	ce 01       	movw	r24, r28
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0xae>
		_delay_us(100);
		OneWire_TRX_Frame( (ONEWIRE_CMD_WRITE<<9) | (0x02<<1) | 1 );
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
 160:	ce 01       	movw	r24, r28
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0xbc>
		_delay_us(100);
		OneWire_TRX_Frame( (ONEWIRE_CMD_CONT <<9) | (0x03<<1) | 1 );
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
 16e:	ce 01       	movw	r24, r28
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0xca>
		_delay_us(100);
		OneWire_TRX_Frame( (ONEWIRE_CMD_STOP <<9) | (0x04<<1) | 1 );
 174:	89 e0       	ldi	r24, 0x09	; 9
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
 17c:	ce 01       	movw	r24, r28
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0xd8>
		_delay_us(100);
		OneWire_TRX_Frame( (ONEWIRE_CMD_RSVD <<9) | (0x05<<1) | 1 );
 182:	8b e0       	ldi	r24, 0x0B	; 11
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 a3 01 	call	0x346	; 0x346 <OneWire_TRX_Frame>
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	97 e2       	ldi	r25, 0x27	; 39
 18e:	fe 01       	movw	r30, r28
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 194:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 196:	09 f4       	brne	.+2      	; 0x19a <main+0xf4>
 198:	9f cf       	rjmp	.-194    	; 0xd8 <main+0x32>
 19a:	f9 cf       	rjmp	.-14     	; 0x18e <main+0xe8>

0000019c <OneWire_Struct_Init>:
}onewire_t;

onewire_t OneWire;

void OneWire_Struct_Init(void){
  OneWire.BitFrame = 0;
 19c:	10 92 36 01 	sts	0x0136, r1
 1a0:	10 92 35 01 	sts	0x0135, r1
  OneWire.RawBitFrame = 0;
 1a4:	10 92 38 01 	sts	0x0138, r1
 1a8:	10 92 37 01 	sts	0x0137, r1
  OneWire.BitCounter = 0;
 1ac:	10 92 39 01 	sts	0x0139, r1
  OneWire.AddrMatch = 0;
 1b0:	10 92 3a 01 	sts	0x013A, r1
  OneWire.DataByte = 0;
 1b4:	10 92 3c 01 	sts	0x013C, r1
  OneWire.CMD = 0;
 1b8:	10 92 3e 01 	sts	0x013E, r1
 1bc:	10 92 3d 01 	sts	0x013D, r1
  OneWire.ACK = 0;
 1c0:	10 92 3f 01 	sts	0x013F, r1
  OneWire.NewDataAvailable = 0;
 1c4:	10 92 40 01 	sts	0x0140, r1
}
 1c8:	08 95       	ret

000001ca <OneWire_Flush_Bit_Frame>:

void OneWire_Flush_Bit_Frame(void){
  OneWire.BitFrame = 0;
 1ca:	10 92 36 01 	sts	0x0136, r1
 1ce:	10 92 35 01 	sts	0x0135, r1
  OneWire.RawBitFrame = 0;
 1d2:	10 92 38 01 	sts	0x0138, r1
 1d6:	10 92 37 01 	sts	0x0137, r1
  OneWire.BitCounter = 0;
 1da:	10 92 39 01 	sts	0x0139, r1
}
 1de:	08 95       	ret

000001e0 <OneWire_Flush_Cmd_Reg>:

void OneWire_Flush_Cmd_Reg(void){
  OneWire.DataByte = 0;
 1e0:	10 92 3c 01 	sts	0x013C, r1
  OneWire.CMD = 0;
 1e4:	10 92 3e 01 	sts	0x013E, r1
 1e8:	10 92 3d 01 	sts	0x013D, r1
  OneWire.ACK = 0;
 1ec:	10 92 3f 01 	sts	0x013F, r1
  OneWire.NewDataAvailable = 0;
 1f0:	10 92 40 01 	sts	0x0140, r1
}
 1f4:	08 95       	ret

000001f6 <OneWire_Flush_Data_Buf>:

void OneWire_Flush_Data_Buf(void){
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
    OneWire.DataBuf[i] = 0;
 1fa:	fc 01       	movw	r30, r24
 1fc:	eb 5c       	subi	r30, 0xCB	; 203
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	14 86       	std	Z+12, r1	; 0x0c
 202:	01 96       	adiw	r24, 0x01	; 1
  OneWire.ACK = 0;
  OneWire.NewDataAvailable = 0;
}

void OneWire_Flush_Data_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
 204:	86 39       	cpi	r24, 0x96	; 150
 206:	91 05       	cpc	r25, r1
 208:	c1 f7       	brne	.-16     	; 0x1fa <OneWire_Flush_Data_Buf+0x4>
    OneWire.DataBuf[i] = 0;
  }
  OneWire.DataBufCounter = 0;
 20a:	10 92 d7 01 	sts	0x01D7, r1
}
 20e:	08 95       	ret

00000210 <OneWire_TRX_Set_DDR>:




void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
 210:	88 23       	and	r24, r24
 212:	11 f4       	brne	.+4      	; 0x218 <OneWire_TRX_Set_DDR+0x8>
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 214:	56 98       	cbi	0x0a, 6	; 10
 216:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 218:	56 9a       	sbi	0x0a, 6	; 10
 21a:	08 95       	ret

0000021c <OneWire_TRX_Set_Port>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
 21c:	88 23       	and	r24, r24
 21e:	11 f4       	brne	.+4      	; 0x224 <OneWire_TRX_Set_Port+0x8>
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 220:	5e 98       	cbi	0x0b, 6	; 11
 222:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
 224:	5e 9a       	sbi	0x0b, 6	; 11
 226:	08 95       	ret

00000228 <OneWire_TRX_Get_Input_State>:
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 228:	89 b1       	in	r24, 0x09	; 9
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	26 e0       	ldi	r18, 0x06	; 6
 22e:	96 95       	lsr	r25
 230:	87 95       	ror	r24
 232:	2a 95       	dec	r18
 234:	e1 f7       	brne	.-8      	; 0x22e <OneWire_TRX_Get_Input_State+0x6>
    return 1;
  }
  else{
    return 0;
  }
}
 236:	81 70       	andi	r24, 0x01	; 1
 238:	08 95       	ret

0000023a <OneWire_TRX_Set_Logic>:

void OneWire_TRX_Set_Logic(uint8_t state){
  if(state == 0){
 23a:	88 23       	and	r24, r24
 23c:	11 f4       	brne	.+4      	; 0x242 <OneWire_TRX_Set_Logic+0x8>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 23e:	56 9a       	sbi	0x0a, 6	; 10
 240:	08 95       	ret



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 242:	56 98       	cbi	0x0a, 6	; 10
 244:	08 95       	ret

00000246 <OneWire_TRX_GPIO_Init>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 246:	5e 98       	cbi	0x0b, 6	; 11



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 248:	56 98       	cbi	0x0a, 6	; 10
  ONEWIRE_DBGTX_DDR  |= (1<<ONEWIRE_DBGTX_BP);
  ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
  #endif
  
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_DDR  |= (1<<ONEWIRE_DBGRX_BP);
 24a:	56 98       	cbi	0x0a, 6	; 10
 24c:	54 9a       	sbi	0x0a, 4	; 10
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 24e:	5c 98       	cbi	0x0b, 4	; 11
  #endif
}
 250:	08 95       	ret

00000252 <OneWire_TRX_Interrupt_Init>:
  #define ONEWIRE_TRX_PCMSK      PCMSK2
  #define ONEWIRE_TRX_PCIF       PCIF2
  #define ONEWIRE_TRX_PCINT_VECT PCINT2_vect
  #endif
  
  PCICR             |= (1<<ONEWIRE_TRX_PCIE);
 252:	e8 e6       	ldi	r30, 0x68	; 104
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	84 60       	ori	r24, 0x04	; 4
 25a:	80 83       	st	Z, r24
  PCIFR             |= (1<<ONEWIRE_TRX_PCIF);
 25c:	da 9a       	sbi	0x1b, 2	; 27
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 25e:	ed e6       	ldi	r30, 0x6D	; 109
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	8f 7b       	andi	r24, 0xBF	; 191
 266:	80 83       	st	Z, r24
  
  sei();
 268:	78 94       	sei
}
 26a:	08 95       	ret

0000026c <OneWire_TRX_Interrupt_Enable>:



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 26c:	ed e6       	ldi	r30, 0x6D	; 109
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 64       	ori	r24, 0x40	; 64
 274:	80 83       	st	Z, r24
}
 276:	08 95       	ret

00000278 <OneWire_TRX_Interrupt_Disable>:

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 278:	ed e6       	ldi	r30, 0x6D	; 109
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	8f 7b       	andi	r24, 0xBF	; 191
 280:	80 83       	st	Z, r24
}
 282:	08 95       	ret

00000284 <OneWire_TRX_Interrupt_Status>:

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 284:	80 91 6d 00 	lds	r24, 0x006D
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	36 e0       	ldi	r19, 0x06	; 6
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	3a 95       	dec	r19
 292:	e1 f7       	brne	.-8      	; 0x28c <OneWire_TRX_Interrupt_Status+0x8>
    return 1;
  }
  else{
    return 0;
  }
}
 294:	81 70       	andi	r24, 0x01	; 1
 296:	08 95       	ret

00000298 <OneWire_TRX_Falling_Edge_Interrupt>:
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 298:	89 b1       	in	r24, 0x09	; 9
 29a:	82 95       	swap	r24
 29c:	86 95       	lsr	r24
 29e:	86 95       	lsr	r24
 2a0:	83 70       	andi	r24, 0x03	; 3
 2a2:	80 95       	com	r24
    return 1;
  }
  else{
    return 0;
  }
}
 2a4:	81 70       	andi	r24, 0x01	; 1
 2a6:	08 95       	ret

000002a8 <OneWire_Debug_Tx_Pulse>:
  #ifdef ONEWIRE_DBGTX_ENABLE
  ONEWIRE_DBGTX_PORT |= (1<<ONEWIRE_DBGTX_BP);
  _delay_us(1);
  ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
  #endif
}
 2a8:	08 95       	ret

000002aa <OneWire_Debug_Rx_Pulse>:

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 2aa:	5c 9a       	sbi	0x0b, 4	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2ac:	84 e0       	ldi	r24, 0x04	; 4
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <OneWire_Debug_Rx_Pulse+0x4>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 2b2:	5c 98       	cbi	0x0b, 4	; 11
  #endif
}
 2b4:	08 95       	ret

000002b6 <OneWire_Delay_Clock_Low_Time>:
 2b6:	80 e5       	ldi	r24, 0x50	; 80
 2b8:	8a 95       	dec	r24
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <OneWire_Delay_Clock_Low_Time+0x2>



void OneWire_Delay_Clock_Low_Time(void){
  _delay_us(ONEWIRE_CLK_LOW);
}
 2bc:	08 95       	ret

000002be <OneWire_Delay_Clock_High_Time>:
 2be:	80 e5       	ldi	r24, 0x50	; 80
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <OneWire_Delay_Clock_High_Time+0x2>

void OneWire_Delay_Clock_High_Time(void){
  _delay_us(ONEWIRE_CLK_HIGH);
}
 2c4:	08 95       	ret

000002c6 <OneWire_Delay_Half_Bit_Time>:
 2c6:	80 ea       	ldi	r24, 0xA0	; 160
 2c8:	8a 95       	dec	r24
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <OneWire_Delay_Half_Bit_Time+0x2>

void OneWire_Delay_Half_Bit_Time(void){
  _delay_us(ONEWIRE_CLK_HBIT);
}
 2cc:	08 95       	ret

000002ce <OneWire_Delay_Byte_Gap>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ce:	8c e2       	ldi	r24, 0x2C	; 44
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <OneWire_Delay_Byte_Gap+0x4>

void OneWire_Delay_Byte_Gap(void){
  _delay_us(ONEWIRE_BYTE_GAP);
}
 2d6:	08 95       	ret

000002d8 <OneWire_Delay_Rx_Int>:
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 2d8:	ed e6       	ldi	r30, 0x6D	; 109
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	8f 7b       	andi	r24, 0xBF	; 191
 2e0:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2e2:	80 e5       	ldi	r24, 0x50	; 80
 2e4:	8a 95       	dec	r24
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <OneWire_Delay_Rx_Int+0xc>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 2e8:	80 ea       	ldi	r24, 0xA0	; 160
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <OneWire_Delay_Rx_Int+0x12>
 2ee:	80 81       	ld	r24, Z
 2f0:	80 64       	ori	r24, 0x40	; 64
 2f2:	80 83       	st	Z, r24
void OneWire_Delay_Rx_Int(void){
  OneWire_TRX_Interrupt_Disable();
  OneWire_Delay_Clock_Low_Time();
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Interrupt_Enable();
}
 2f4:	08 95       	ret

000002f6 <OneWire_Tx_Reset_Cmd>:
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 2f6:	80 91 6d 00 	lds	r24, 0x006D
 2fa:	8f 7b       	andi	r24, 0xBF	; 191
 2fc:	80 93 6d 00 	sts	0x006D, r24
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	40 e5       	ldi	r20, 0x50	; 80
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 304:	30 ea       	ldi	r19, 0xA0	; 160
 306:	56 9a       	sbi	0x0a, 6	; 10
 308:	84 2f       	mov	r24, r20
 30a:	8a 95       	dec	r24
 30c:	f1 f7       	brne	.-4      	; 0x30a <OneWire_Tx_Reset_Cmd+0x14>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 30e:	56 98       	cbi	0x0a, 6	; 10
 310:	83 2f       	mov	r24, r19
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <OneWire_Tx_Reset_Cmd+0x1c>
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 316:	89 b1       	in	r24, 0x09	; 9
 318:	93 2f       	mov	r25, r19
 31a:	9a 95       	dec	r25
 31c:	f1 f7       	brne	.-4      	; 0x31a <OneWire_Tx_Reset_Cmd+0x24>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 31e:	56 98       	cbi	0x0a, 6	; 10
 320:	94 2f       	mov	r25, r20
 322:	9a 95       	dec	r25
 324:	f1 f7       	brne	.-4      	; 0x322 <OneWire_Tx_Reset_Cmd+0x2c>
	OneWire_Debug_Tx_Pulse();
	ack_sts = OneWire_TRX_Get_Input_State();
	OneWire_Delay_Half_Bit_Time();
	OneWire_TRX_Set_Logic(1);
	OneWire_Delay_Clock_High_Time();
	if(ack_sts == 0){
 326:	86 ff       	sbrs	r24, 6
 328:	03 c0       	rjmp	.+6      	; 0x330 <OneWire_Tx_Reset_Cmd+0x3a>


uint8_t OneWire_Tx_Reset_Cmd(void){
  uint8_t ack_sts=0;
  OneWire_TRX_Interrupt_Disable();
  for(uint8_t i=0;i<(ONEWIRE_FRAME_LEN*2);i++){
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	28 31       	cpi	r18, 0x18	; 24
 32e:	59 f7       	brne	.-42     	; 0x306 <OneWire_Tx_Reset_Cmd+0x10>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 330:	80 91 6d 00 	lds	r24, 0x006D
 334:	80 64       	ori	r24, 0x40	; 64
 336:	80 93 6d 00 	sts	0x006D, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33a:	8c e2       	ldi	r24, 0x2C	; 44
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <OneWire_Tx_Reset_Cmd+0x48>
	}
  }
  OneWire_TRX_Interrupt_Enable();
  OneWire_Delay_Byte_Gap();
  return ack_sts;
}
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	08 95       	ret

00000346 <OneWire_TRX_Frame>:


uint16_t OneWire_TRX_Frame(uint16_t val){
 346:	ac 01       	movw	r20, r24
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 348:	80 91 6d 00 	lds	r24, 0x006D
 34c:	8f 7b       	andi	r24, 0xBF	; 191
 34e:	80 93 6d 00 	sts	0x006D, r24
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 358:	e0 e5       	ldi	r30, 0x50	; 80
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 35a:	70 ea       	ldi	r23, 0xA0	; 160
 35c:	56 9a       	sbi	0x0a, 6	; 10
 35e:	8e 2f       	mov	r24, r30
 360:	8a 95       	dec	r24
 362:	f1 f7       	brne	.-4      	; 0x360 <OneWire_TRX_Frame+0x1a>
  for(uint8_t i=0;i<ONEWIRE_FRAME_LEN;i++){
	//Initial Logic Low
	OneWire_TRX_Set_Logic(0);
    OneWire_Delay_Clock_Low_Time();
	//Data Controlled By Master
	if(i < (ONEWIRE_FRAME_LEN-1)){
 364:	6b 30       	cpi	r22, 0x0B	; 11
 366:	21 f0       	breq	.+8      	; 0x370 <OneWire_TRX_Frame+0x2a>
      if(val & 0x800){
 368:	53 fd       	sbrc	r21, 3
 36a:	02 c0       	rjmp	.+4      	; 0x370 <OneWire_TRX_Frame+0x2a>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 36c:	56 9a       	sbi	0x0a, 6	; 10
 36e:	01 c0       	rjmp	.+2      	; 0x372 <OneWire_TRX_Frame+0x2c>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 370:	56 98       	cbi	0x0a, 6	; 10
 372:	87 2f       	mov	r24, r23
 374:	8a 95       	dec	r24
 376:	f1 f7       	brne	.-4      	; 0x374 <OneWire_TRX_Frame+0x2e>
	  OneWire_TRX_Set_Logic(1);
	}
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse();
	rx_val <<= 1;
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 37c:	89 b1       	in	r24, 0x09	; 9
	}
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse();
	rx_val <<= 1;
	rx_val |= OneWire_TRX_Get_Input_State();
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	a6 e0       	ldi	r26, 0x06	; 6
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	aa 95       	dec	r26
 388:	e1 f7       	brne	.-8      	; 0x382 <OneWire_TRX_Frame+0x3c>
 38a:	81 70       	andi	r24, 0x01	; 1
 38c:	90 70       	andi	r25, 0x00	; 0
 38e:	28 2b       	or	r18, r24
 390:	39 2b       	or	r19, r25
 392:	87 2f       	mov	r24, r23
 394:	8a 95       	dec	r24
 396:	f1 f7       	brne	.-4      	; 0x394 <OneWire_TRX_Frame+0x4e>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 398:	56 98       	cbi	0x0a, 6	; 10
 39a:	8e 2f       	mov	r24, r30
 39c:	8a 95       	dec	r24
 39e:	f1 f7       	brne	.-4      	; 0x39c <OneWire_TRX_Frame+0x56>


uint16_t OneWire_TRX_Frame(uint16_t val){
  uint16_t rx_val=0;
  OneWire_TRX_Interrupt_Disable();
  for(uint8_t i=0;i<ONEWIRE_FRAME_LEN;i++){
 3a0:	6f 5f       	subi	r22, 0xFF	; 255
 3a2:	6c 30       	cpi	r22, 0x0C	; 12
 3a4:	19 f0       	breq	.+6      	; 0x3ac <OneWire_TRX_Frame+0x66>
	}
	//Leave For Ack
	else{
	  OneWire_TRX_Set_Logic(1);
	}
	val <<= 1;
 3a6:	44 0f       	add	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	d8 cf       	rjmp	.-80     	; 0x35c <OneWire_TRX_Frame+0x16>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 3ac:	80 91 6d 00 	lds	r24, 0x006D
 3b0:	80 64       	ori	r24, 0x40	; 64
 3b2:	80 93 6d 00 	sts	0x006D, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3b6:	8c e2       	ldi	r24, 0x2C	; 44
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <OneWire_TRX_Frame+0x74>
	OneWire_Delay_Clock_High_Time();
  }
  OneWire_TRX_Interrupt_Enable();
  OneWire_Delay_Byte_Gap();
  return rx_val;
}
 3be:	c9 01       	movw	r24, r18
 3c0:	08 95       	ret

000003c2 <OneWire_Bit_Frame_Sample>:


void OneWire_Bit_Frame_Sample(void){
  uint16_t data, cmd;
  //Last bit of the frame -> ACK bit
  if(OneWire.BitCounter == (ONEWIRE_FRAME_LEN-1)){
 3c2:	80 91 39 01 	lds	r24, 0x0139
 3c6:	8b 30       	cpi	r24, 0x0B	; 11
 3c8:	89 f5       	brne	.+98     	; 0x42c <OneWire_Bit_Frame_Sample+0x6a>
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 3ca:	5c 9a       	sbi	0x0b, 4	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3cc:	84 e0       	ldi	r24, 0x04	; 4
 3ce:	8a 95       	dec	r24
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <OneWire_Bit_Frame_Sample+0xc>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 3d2:	5c 98       	cbi	0x0b, 4	; 11
  uint16_t data, cmd;
  //Last bit of the frame -> ACK bit
  if(OneWire.BitCounter == (ONEWIRE_FRAME_LEN-1)){
    //maybe need to disable interrupt
	OneWire_Debug_Rx_Pulse();
	if(OneWire.ACK == 1){
 3d4:	80 91 3f 01 	lds	r24, 0x013F
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	19 f4       	brne	.+6      	; 0x3e2 <OneWire_Bit_Frame_Sample+0x20>
	  OneWire.ACK = 0;
 3dc:	10 92 3f 01 	sts	0x013F, r1
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 3e0:	56 9a       	sbi	0x0a, 6	; 10
 3e2:	40 ea       	ldi	r20, 0xA0	; 160
 3e4:	84 2f       	mov	r24, r20
 3e6:	8a 95       	dec	r24
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <OneWire_Bit_Frame_Sample+0x24>
	if(OneWire.ACK == 1){
	  OneWire.ACK = 0;
      OneWire_TRX_Set_Logic(0);
	}
	OneWire_Delay_Half_Bit_Time();
	OneWire.BitFrame <<= 1;
 3ea:	80 91 35 01 	lds	r24, 0x0135
 3ee:	90 91 36 01 	lds	r25, 0x0136
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	90 93 36 01 	sts	0x0136, r25
 3fa:	80 93 35 01 	sts	0x0135, r24
	OneWire.BitFrame |= OneWire_TRX_Get_Input_State();
 3fe:	20 91 35 01 	lds	r18, 0x0135
 402:	30 91 36 01 	lds	r19, 0x0136
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 406:	89 b1       	in	r24, 0x09	; 9
	  OneWire.ACK = 0;
      OneWire_TRX_Set_Logic(0);
	}
	OneWire_Delay_Half_Bit_Time();
	OneWire.BitFrame <<= 1;
	OneWire.BitFrame |= OneWire_TRX_Get_Input_State();
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	66 e0       	ldi	r22, 0x06	; 6
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	6a 95       	dec	r22
 412:	e1 f7       	brne	.-8      	; 0x40c <OneWire_Bit_Frame_Sample+0x4a>
 414:	81 70       	andi	r24, 0x01	; 1
 416:	90 70       	andi	r25, 0x00	; 0
 418:	82 2b       	or	r24, r18
 41a:	93 2b       	or	r25, r19
 41c:	90 93 36 01 	sts	0x0136, r25
 420:	80 93 35 01 	sts	0x0135, r24
 424:	4a 95       	dec	r20
 426:	f1 f7       	brne	.-4      	; 0x424 <OneWire_Bit_Frame_Sample+0x62>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 428:	56 98       	cbi	0x0a, 6	; 10
 42a:	a3 c0       	rjmp	.+326    	; 0x572 <OneWire_Bit_Frame_Sample+0x1b0>
	OneWire_Debug_Rx_Pulse();
	//maybe need to enable interrupt
  }
  //Regular bits to sample
  else{
    OneWire_Delay_Rx_Int();
 42c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <OneWire_Delay_Rx_Int>
    OneWire.BitFrame <<= 1;
 430:	80 91 35 01 	lds	r24, 0x0135
 434:	90 91 36 01 	lds	r25, 0x0136
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	90 93 36 01 	sts	0x0136, r25
 440:	80 93 35 01 	sts	0x0135, r24
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 444:	5c 9a       	sbi	0x0b, 4	; 11
 446:	64 e0       	ldi	r22, 0x04	; 4
 448:	86 2f       	mov	r24, r22
 44a:	8a 95       	dec	r24
 44c:	f1 f7       	brne	.-4      	; 0x44a <OneWire_Bit_Frame_Sample+0x88>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 44e:	5c 98       	cbi	0x0b, 4	; 11
  //Regular bits to sample
  else{
    OneWire_Delay_Rx_Int();
    OneWire.BitFrame <<= 1;
    OneWire_Debug_Rx_Pulse();
    OneWire.BitFrame |= OneWire_TRX_Get_Input_State();
 450:	20 91 35 01 	lds	r18, 0x0135
 454:	30 91 36 01 	lds	r19, 0x0136
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 458:	89 b1       	in	r24, 0x09	; 9
  //Regular bits to sample
  else{
    OneWire_Delay_Rx_Int();
    OneWire.BitFrame <<= 1;
    OneWire_Debug_Rx_Pulse();
    OneWire.BitFrame |= OneWire_TRX_Get_Input_State();
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	46 e0       	ldi	r20, 0x06	; 6
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	4a 95       	dec	r20
 464:	e1 f7       	brne	.-8      	; 0x45e <OneWire_Bit_Frame_Sample+0x9c>
 466:	81 70       	andi	r24, 0x01	; 1
 468:	90 70       	andi	r25, 0x00	; 0
 46a:	82 2b       	or	r24, r18
 46c:	93 2b       	or	r25, r19
 46e:	90 93 36 01 	sts	0x0136, r25
 472:	80 93 35 01 	sts	0x0135, r24
	
	if(OneWire.BitCounter == (ONEWIRE_FRAME_LEN-2)){
 476:	80 91 39 01 	lds	r24, 0x0139
 47a:	8a 30       	cpi	r24, 0x0A	; 10
 47c:	09 f0       	breq	.+2      	; 0x480 <OneWire_Bit_Frame_Sample+0xbe>
 47e:	7e c0       	rjmp	.+252    	; 0x57c <OneWire_Bit_Frame_Sample+0x1ba>
	  data = OneWire.BitFrame & ONEWIRE_DATA_MASK;
 480:	20 91 35 01 	lds	r18, 0x0135
 484:	30 91 36 01 	lds	r19, 0x0136
	  cmd  = OneWire.BitFrame & ONEWIRE_CMD_MASK;
 488:	40 91 35 01 	lds	r20, 0x0135
 48c:	50 91 36 01 	lds	r21, 0x0136
	 
	  //reset request -> Send ack
	  if(OneWire.BitFrame == ONEWIRE_CMD_RESET){
 490:	80 91 35 01 	lds	r24, 0x0135
 494:	90 91 36 01 	lds	r25, 0x0136
 498:	8f 5f       	subi	r24, 0xFF	; 255
 49a:	97 40       	sbci	r25, 0x07	; 7
 49c:	59 f5       	brne	.+86     	; 0x4f4 <OneWire_Bit_Frame_Sample+0x132>
	    OneWire.AddrMatch = 0;
 49e:	10 92 3a 01 	sts	0x013A, r1
	    OneWire.ACK = 1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 3f 01 	sts	0x013F, r24
		OneWire.BitFrame = 0;
 4a8:	10 92 36 01 	sts	0x0136, r1
 4ac:	10 92 35 01 	sts	0x0135, r1
        //OneWire.RawBitFrame = 0;
        OneWire.BitCounter = 0xFF;
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	80 93 39 01 	sts	0x0139, r24
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 4b6:	5c 9a       	sbi	0x0b, 4	; 11
 4b8:	86 2f       	mov	r24, r22
 4ba:	8a 95       	dec	r24
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <OneWire_Bit_Frame_Sample+0xf8>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 4be:	5c 98       	cbi	0x0b, 4	; 11
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 4c0:	5c 9a       	sbi	0x0b, 4	; 11
 4c2:	86 2f       	mov	r24, r22
 4c4:	8a 95       	dec	r24
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <OneWire_Bit_Frame_Sample+0x102>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 4c8:	5c 98       	cbi	0x0b, 4	; 11
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 4ca:	5c 9a       	sbi	0x0b, 4	; 11
 4cc:	86 2f       	mov	r24, r22
 4ce:	8a 95       	dec	r24
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <OneWire_Bit_Frame_Sample+0x10c>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 4d2:	5c 98       	cbi	0x0b, 4	; 11
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 4d4:	5c 9a       	sbi	0x0b, 4	; 11
 4d6:	86 2f       	mov	r24, r22
 4d8:	8a 95       	dec	r24
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <OneWire_Bit_Frame_Sample+0x116>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 4dc:	5c 98       	cbi	0x0b, 4	; 11
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 4de:	5c 9a       	sbi	0x0b, 4	; 11
 4e0:	86 2f       	mov	r24, r22
 4e2:	8a 95       	dec	r24
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <OneWire_Bit_Frame_Sample+0x120>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 4e6:	5c 98       	cbi	0x0b, 4	; 11
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 4e8:	5c 9a       	sbi	0x0b, 4	; 11
 4ea:	86 2f       	mov	r24, r22
 4ec:	8a 95       	dec	r24
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <OneWire_Bit_Frame_Sample+0x12a>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 4f0:	5c 98       	cbi	0x0b, 4	; 11
 4f2:	44 c0       	rjmp	.+136    	; 0x57c <OneWire_Bit_Frame_Sample+0x1ba>
    OneWire.BitFrame <<= 1;
    OneWire_Debug_Rx_Pulse();
    OneWire.BitFrame |= OneWire_TRX_Get_Input_State();
	
	if(OneWire.BitCounter == (ONEWIRE_FRAME_LEN-2)){
	  data = OneWire.BitFrame & ONEWIRE_DATA_MASK;
 4f4:	30 70       	andi	r19, 0x00	; 0
	  cmd  = OneWire.BitFrame & ONEWIRE_CMD_MASK;
 4f6:	ca 01       	movw	r24, r20
 4f8:	80 70       	andi	r24, 0x00	; 0
 4fa:	97 70       	andi	r25, 0x07	; 7
		OneWire_Debug_Rx_Pulse();
		OneWire_Debug_Rx_Pulse();
	  }
	 
	  //Address matched -> Send ack
	  else if((cmd == ONEWIRE_CMD_START) && (data == ONEWIRE_OWN_AADR)){
 4fc:	46 e0       	ldi	r20, 0x06	; 6
 4fe:	80 30       	cpi	r24, 0x00	; 0
 500:	94 07       	cpc	r25, r20
 502:	49 f4       	brne	.+18     	; 0x516 <OneWire_Bit_Frame_Sample+0x154>
 504:	28 36       	cpi	r18, 0x68	; 104
 506:	31 05       	cpc	r19, r1
 508:	49 f5       	brne	.+82     	; 0x55c <OneWire_Bit_Frame_Sample+0x19a>
	    OneWire.AddrMatch = 1;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 3a 01 	sts	0x013A, r24
	    OneWire.ACK = 1;
 510:	80 93 3f 01 	sts	0x013F, r24
 514:	d5 cf       	rjmp	.-86     	; 0x4c0 <OneWire_Bit_Frame_Sample+0xfe>
		OneWire_Debug_Rx_Pulse();
		OneWire_Debug_Rx_Pulse();
	  }
	 
	  //Read cmd -> Send ack
	  else if((cmd == ONEWIRE_CMD_READ) && (OneWire.AddrMatch == 1)){
 516:	74 e0       	ldi	r23, 0x04	; 4
 518:	80 30       	cpi	r24, 0x00	; 0
 51a:	97 07       	cpc	r25, r23
 51c:	49 f4       	brne	.+18     	; 0x530 <OneWire_Bit_Frame_Sample+0x16e>
 51e:	80 91 3a 01 	lds	r24, 0x013A
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	49 f5       	brne	.+82     	; 0x578 <OneWire_Bit_Frame_Sample+0x1b6>
	    OneWire.RegAddr = data;
 526:	20 93 3b 01 	sts	0x013B, r18
	    OneWire.ACK = 1;
 52a:	80 93 3f 01 	sts	0x013F, r24
 52e:	cd cf       	rjmp	.-102    	; 0x4ca <OneWire_Bit_Frame_Sample+0x108>
		OneWire_Debug_Rx_Pulse();
		OneWire_Debug_Rx_Pulse();
	  }
	  
	  //Write cmd -> Send ack
	  else if((cmd == ONEWIRE_CMD_WRITE) && (OneWire.AddrMatch == 1)){
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	80 30       	cpi	r24, 0x00	; 0
 534:	94 07       	cpc	r25, r20
 536:	49 f4       	brne	.+18     	; 0x54a <OneWire_Bit_Frame_Sample+0x188>
 538:	80 91 3a 01 	lds	r24, 0x013A
 53c:	81 30       	cpi	r24, 0x01	; 1
 53e:	e1 f4       	brne	.+56     	; 0x578 <OneWire_Bit_Frame_Sample+0x1b6>
	    OneWire.RegAddr = data;
 540:	20 93 3b 01 	sts	0x013B, r18
	    OneWire.ACK = 1;
 544:	80 93 3f 01 	sts	0x013F, r24
 548:	c5 cf       	rjmp	.-118    	; 0x4d4 <OneWire_Bit_Frame_Sample+0x112>
		OneWire_Debug_Rx_Pulse();
		OneWire_Debug_Rx_Pulse();
	  }
	  
	  //Continue cmd -> Send ack
	  else if((cmd == ONEWIRE_CMD_CONT) && (OneWire.AddrMatch == 1)){
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	39 f4       	brne	.+14     	; 0x55c <OneWire_Bit_Frame_Sample+0x19a>
 54e:	80 91 3a 01 	lds	r24, 0x013A
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	89 f4       	brne	.+34     	; 0x578 <OneWire_Bit_Frame_Sample+0x1b6>
	    OneWire.ACK = 1;
 556:	80 93 3f 01 	sts	0x013F, r24
 55a:	c1 cf       	rjmp	.-126    	; 0x4de <OneWire_Bit_Frame_Sample+0x11c>
		OneWire_Debug_Rx_Pulse();
		OneWire_Debug_Rx_Pulse();
	  }
	  
	  //Stop cmd -> Send ack
	  else if((cmd == ONEWIRE_CMD_STOP) && (OneWire.AddrMatch == 1)){
 55c:	80 50       	subi	r24, 0x00	; 0
 55e:	93 40       	sbci	r25, 0x03	; 3
 560:	59 f4       	brne	.+22     	; 0x578 <OneWire_Bit_Frame_Sample+0x1b6>
 562:	80 91 3a 01 	lds	r24, 0x013A
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	39 f4       	brne	.+14     	; 0x578 <OneWire_Bit_Frame_Sample+0x1b6>
	    OneWire.AddrMatch = 0;
 56a:	10 92 3a 01 	sts	0x013A, r1
	    OneWire.ACK = 1;
 56e:	80 93 3f 01 	sts	0x013F, r24
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 572:	5c 9a       	sbi	0x0b, 4	; 11
 574:	84 e0       	ldi	r24, 0x04	; 4
 576:	ba cf       	rjmp	.-140    	; 0x4ec <OneWire_Bit_Frame_Sample+0x12a>
		OneWire_Debug_Rx_Pulse();
	  }
	  
	  //Nothing Matched, Send nack
	  else{
	    OneWire.ACK = 0;
 578:	10 92 3f 01 	sts	0x013F, r1
	  }
	}
  }
  OneWire.BitCounter++;
 57c:	80 91 39 01 	lds	r24, 0x0139
 580:	8f 5f       	subi	r24, 0xFF	; 255
 582:	80 93 39 01 	sts	0x0139, r24
}
 586:	08 95       	ret

00000588 <OneWire_Bit_Counter_Overflow>:


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 588:	80 91 39 01 	lds	r24, 0x0139
 58c:	8c 30       	cpi	r24, 0x0C	; 12
 58e:	10 f4       	brcc	.+4      	; 0x594 <OneWire_Bit_Counter_Overflow+0xc>
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	08 95       	ret
    OneWire.BitCounter = 0;
 594:	10 92 39 01 	sts	0x0139, r1
 598:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
  }
  else{
    return 0;
  }
}
 59a:	08 95       	ret

0000059c <OneWire_Build_Bit_Frame>:


uint16_t OneWire_Build_Bit_Frame(void){
  uint16_t temp = 0xFFFF;
  OneWire_Bit_Frame_Sample();
 59c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <OneWire_Bit_Frame_Sample>
  OneWire.BitCounter++;
}


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 5a0:	80 91 39 01 	lds	r24, 0x0139
 5a4:	8c 30       	cpi	r24, 0x0C	; 12
 5a6:	18 f4       	brcc	.+6      	; 0x5ae <OneWire_Build_Bit_Frame+0x12>
 5a8:	2f ef       	ldi	r18, 0xFF	; 255
 5aa:	3f ef       	ldi	r19, 0xFF	; 255
 5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <OneWire_Build_Bit_Frame+0x26>
    OneWire.BitCounter = 0;
 5ae:	10 92 39 01 	sts	0x0139, r1

uint16_t OneWire_Build_Bit_Frame(void){
  uint16_t temp = 0xFFFF;
  OneWire_Bit_Frame_Sample();
  if(OneWire_Bit_Counter_Overflow() == 1){
    temp = OneWire.BitFrame;
 5b2:	20 91 35 01 	lds	r18, 0x0135
 5b6:	30 91 36 01 	lds	r19, 0x0136
	OneWire.BitFrame = 0;
 5ba:	10 92 36 01 	sts	0x0136, r1
 5be:	10 92 35 01 	sts	0x0135, r1
  }
  return temp;
}
 5c2:	c9 01       	movw	r24, r18
 5c4:	08 95       	ret

000005c6 <OneWire_Extract_Cmd_Data>:

void OneWire_Extract_Cmd_Data(void){
  uint16_t temp = OneWire_Build_Bit_Frame();
 5c6:	0e 94 ce 02 	call	0x59c	; 0x59c <OneWire_Build_Bit_Frame>
 5ca:	9c 01       	movw	r18, r24
  if(temp != 0xFFFF){
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	2f 3f       	cpi	r18, 0xFF	; 255
 5d0:	38 07       	cpc	r19, r24
 5d2:	b9 f0       	breq	.+46     	; 0x602 <OneWire_Extract_Cmd_Data+0x3c>
    OneWire.RawBitFrame = temp;
 5d4:	30 93 38 01 	sts	0x0138, r19
 5d8:	20 93 37 01 	sts	0x0137, r18
	OneWire.CMD = temp & ONEWIRE_CMD_MASK;
 5dc:	c9 01       	movw	r24, r18
 5de:	80 70       	andi	r24, 0x00	; 0
 5e0:	97 70       	andi	r25, 0x07	; 7
 5e2:	90 93 3e 01 	sts	0x013E, r25
 5e6:	80 93 3d 01 	sts	0x013D, r24
	OneWire.ACK = temp & ONEWIRE_ACK_MASK;
 5ea:	82 2f       	mov	r24, r18
 5ec:	81 70       	andi	r24, 0x01	; 1
 5ee:	80 93 3f 01 	sts	0x013F, r24
	temp >>= 1;
 5f2:	36 95       	lsr	r19
 5f4:	27 95       	ror	r18
	temp &= 0xFF;
	OneWire.DataByte = temp;
 5f6:	30 70       	andi	r19, 0x00	; 0
 5f8:	20 93 3c 01 	sts	0x013C, r18
	OneWire.NewDataAvailable = 1;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	80 93 40 01 	sts	0x0140, r24
 602:	08 95       	ret

00000604 <OneWire_Handle_Data>:
  }
}

void OneWire_Handle_Data(void){
  OneWire_Extract_Cmd_Data();
 604:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <OneWire_Extract_Cmd_Data>
  if(OneWire.NewDataAvailable == 1){
 608:	80 91 40 01 	lds	r24, 0x0140
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	09 f0       	breq	.+2      	; 0x612 <OneWire_Handle_Data+0xe>
 610:	50 c0       	rjmp	.+160    	; 0x6b2 <OneWire_Handle_Data+0xae>
    if( (OneWire.RawBitFrame & 0xFFE)==0xFFE ){
 612:	80 91 37 01 	lds	r24, 0x0137
 616:	90 91 38 01 	lds	r25, 0x0138
 61a:	8e 7f       	andi	r24, 0xFE	; 254
 61c:	9f 70       	andi	r25, 0x0F	; 15
 61e:	8e 5f       	subi	r24, 0xFE	; 254
 620:	9f 40       	sbci	r25, 0x0F	; 15
 622:	e1 f4       	brne	.+56     	; 0x65c <OneWire_Handle_Data+0x58>
  OneWire.ACK = 0;
  OneWire.NewDataAvailable = 0;
}

void OneWire_Flush_Bit_Frame(void){
  OneWire.BitFrame = 0;
 624:	10 92 36 01 	sts	0x0136, r1
 628:	10 92 35 01 	sts	0x0135, r1
  OneWire.RawBitFrame = 0;
 62c:	10 92 38 01 	sts	0x0138, r1
 630:	10 92 37 01 	sts	0x0137, r1
  OneWire.BitCounter = 0;
 634:	10 92 39 01 	sts	0x0139, r1
}

void OneWire_Flush_Cmd_Reg(void){
  OneWire.DataByte = 0;
 638:	10 92 3c 01 	sts	0x013C, r1
  OneWire.CMD = 0;
 63c:	10 92 3e 01 	sts	0x013E, r1
 640:	10 92 3d 01 	sts	0x013D, r1
  OneWire.ACK = 0;
 644:	10 92 3f 01 	sts	0x013F, r1
  OneWire.NewDataAvailable = 0;
 648:	10 92 40 01 	sts	0x0140, r1
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 64c:	5c 9a       	sbi	0x0b, 4	; 11
 64e:	84 e0       	ldi	r24, 0x04	; 4
 650:	98 2f       	mov	r25, r24
 652:	9a 95       	dec	r25
 654:	f1 f7       	brne	.-4      	; 0x652 <OneWire_Handle_Data+0x4e>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 656:	5c 98       	cbi	0x0b, 4	; 11
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 658:	5c 9a       	sbi	0x0b, 4	; 11
 65a:	09 c0       	rjmp	.+18     	; 0x66e <OneWire_Handle_Data+0x6a>
	  OneWire_Debug_Rx_Pulse();
	  OneWire_Debug_Rx_Pulse();
	  OneWire_Debug_Rx_Pulse();
	  OneWire_Debug_Rx_Pulse();
    }
    else if(OneWire.CMD == ONEWIRE_CMD_START){
 65c:	80 91 3d 01 	lds	r24, 0x013D
 660:	90 91 3e 01 	lds	r25, 0x013E
 664:	80 50       	subi	r24, 0x00	; 0
 666:	96 40       	sbci	r25, 0x06	; 6
 668:	41 f4       	brne	.+16     	; 0x67a <OneWire_Handle_Data+0x76>
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 66a:	5c 9a       	sbi	0x0b, 4	; 11
 66c:	84 e0       	ldi	r24, 0x04	; 4
 66e:	98 2f       	mov	r25, r24
 670:	9a 95       	dec	r25
 672:	f1 f7       	brne	.-4      	; 0x670 <OneWire_Handle_Data+0x6c>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 674:	5c 98       	cbi	0x0b, 4	; 11
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 676:	5c 9a       	sbi	0x0b, 4	; 11
 678:	08 c0       	rjmp	.+16     	; 0x68a <OneWire_Handle_Data+0x86>
      //renew buf
	  OneWire_Debug_Rx_Pulse();
	  OneWire_Debug_Rx_Pulse();
	  OneWire_Debug_Rx_Pulse();
    }
    else if(OneWire.CMD == ONEWIRE_CMD_CONT){
 67a:	80 91 3d 01 	lds	r24, 0x013D
 67e:	90 91 3e 01 	lds	r25, 0x013E
 682:	89 2b       	or	r24, r25
 684:	41 f4       	brne	.+16     	; 0x696 <OneWire_Handle_Data+0x92>
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 686:	5c 9a       	sbi	0x0b, 4	; 11
 688:	84 e0       	ldi	r24, 0x04	; 4
 68a:	98 2f       	mov	r25, r24
 68c:	9a 95       	dec	r25
 68e:	f1 f7       	brne	.-4      	; 0x68c <OneWire_Handle_Data+0x88>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 690:	5c 98       	cbi	0x0b, 4	; 11
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 692:	5c 9a       	sbi	0x0b, 4	; 11
 694:	09 c0       	rjmp	.+18     	; 0x6a8 <OneWire_Handle_Data+0xa4>
    else if(OneWire.CMD == ONEWIRE_CMD_CONT){
      //renew buf
	  OneWire_Debug_Rx_Pulse();
	  OneWire_Debug_Rx_Pulse();
    }
    else if(OneWire.CMD == ONEWIRE_CMD_STOP){
 696:	80 91 3d 01 	lds	r24, 0x013D
 69a:	90 91 3e 01 	lds	r25, 0x013E
 69e:	80 50       	subi	r24, 0x00	; 0
 6a0:	93 40       	sbci	r25, 0x03	; 3
 6a2:	29 f4       	brne	.+10     	; 0x6ae <OneWire_Handle_Data+0xaa>
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 6a4:	5c 9a       	sbi	0x0b, 4	; 11
 6a6:	84 e0       	ldi	r24, 0x04	; 4
 6a8:	8a 95       	dec	r24
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <OneWire_Handle_Data+0xa4>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 6ac:	5c 98       	cbi	0x0b, 4	; 11
    }
    else if(OneWire.CMD == ONEWIRE_CMD_STOP){
      //renew buf
	  OneWire_Debug_Rx_Pulse();
    }
	OneWire.NewDataAvailable = 0;
 6ae:	10 92 40 01 	sts	0x0140, r1
 6b2:	08 95       	ret

000006b4 <OneWire_Buf_Sample_And_Update>:

void OneWire_Buf_Sample_And_Update(void){
/*  OneWire.FrameBuf[OneWire.FrameBufIndex] = OneWire.FrameVal;
  OneWire.FrameVal = 0;
  OneWire.FrameBufIndex++;*/
}
 6b4:	08 95       	ret

000006b6 <OneWire_Buf_Counter_Overflow>:
  }
  else{
    OneWire.FrameCounter++;
	return 0;
  }*/
}
 6b6:	08 95       	ret

000006b8 <OneWire_Fill_Buf>:
	OneWire.CmdVal = OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_RW_MASK;
	OneWire.CmdValReg = (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_REG_MASK)>>1;
	OneWire_Flush_Frame_Buf();
	OneWire_Debug_Rx_Pulse();
  }*/
}
 6b8:	08 95       	ret

000006ba <OneWire_Fill_Buf_Copy_Data>:
	OneWire.CmdValReg = 0;
	OneWire.FeedbackDataLoaded = 0;
	OneWire.FeedbackCounter = 0;
	OneWire_Debug_Rx_Pulse();
  }*/
}
 6ba:	08 95       	ret

000006bc <OneWire_Read_Mode_Feedback>:
  OneWire.FeedbackData <<= 1;
  OneWire_Delay_Half_Bit_Time();
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Set_Logic(1);
  OneWire_TRX_Interrupt_Enable();*/
}
 6bc:	08 95       	ret

000006be <OneWire_Master_Send_Data>:
	  temp = DataByte | (data[i]<<1);
	}
	OneWire_TRX_Byte(temp);
  }
  _delay_us(200);*/
}
 6be:	08 95       	ret

000006c0 <OneWire_Master_Receive_Data>:
  _delay_ms(1);
  temp = OneWire_TRX_Byte(EndByte | (0xFF<<1));
  temp >>= 1;
  temp &= 0xFF;
  return (uint8_t)temp;*/
}
 6c0:	08 95       	ret

000006c2 <__vector_5>:





ISR(ONEWIRE_TRX_PCINT_VECT){
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	2f 93       	push	r18
 6ce:	3f 93       	push	r19
 6d0:	4f 93       	push	r20
 6d2:	5f 93       	push	r21
 6d4:	6f 93       	push	r22
 6d6:	7f 93       	push	r23
 6d8:	8f 93       	push	r24
 6da:	9f 93       	push	r25
 6dc:	af 93       	push	r26
 6de:	bf 93       	push	r27
 6e0:	ef 93       	push	r30
 6e2:	ff 93       	push	r31
void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
}

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 6e4:	80 91 6d 00 	lds	r24, 0x006D
 6e8:	86 ff       	sbrs	r24, 6
 6ea:	0e c0       	rjmp	.+28     	; 0x708 <__vector_5+0x46>
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 6ec:	4e 99       	sbic	0x09, 6	; 9
 6ee:	0c c0       	rjmp	.+24     	; 0x708 <__vector_5+0x46>
  //TRX Interrupt Fired
  if( OneWire_TRX_Interrupt_Status() == 1){        
	//Falling Edge Interrupt
    if(OneWire_TRX_Falling_Edge_Interrupt() == 1){
	  //handle frame bits and ack
	  OneWire_Bit_Frame_Sample();
 6f0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <OneWire_Bit_Frame_Sample>
  OneWire.BitCounter++;
}


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 6f4:	80 91 39 01 	lds	r24, 0x0139
 6f8:	8c 30       	cpi	r24, 0x0C	; 12
 6fa:	10 f0       	brcs	.+4      	; 0x700 <__vector_5+0x3e>
    OneWire.BitCounter = 0;
 6fc:	10 92 39 01 	sts	0x0139, r1
    if(OneWire_TRX_Falling_Edge_Interrupt() == 1){
	  //handle frame bits and ack
	  OneWire_Bit_Frame_Sample();
	  OneWire_Bit_Counter_Overflow();
	  //test
	  OneWire.BitFrame = 0;
 700:	10 92 36 01 	sts	0x0136, r1
 704:	10 92 35 01 	sts	0x0135, r1
	}
  }
}
 708:	ff 91       	pop	r31
 70a:	ef 91       	pop	r30
 70c:	bf 91       	pop	r27
 70e:	af 91       	pop	r26
 710:	9f 91       	pop	r25
 712:	8f 91       	pop	r24
 714:	7f 91       	pop	r23
 716:	6f 91       	pop	r22
 718:	5f 91       	pop	r21
 71a:	4f 91       	pop	r20
 71c:	3f 91       	pop	r19
 71e:	2f 91       	pop	r18
 720:	0f 90       	pop	r0
 722:	0f be       	out	0x3f, r0	; 63
 724:	0f 90       	pop	r0
 726:	1f 90       	pop	r1
 728:	18 95       	reti

0000072a <OneWire_Get_Data_Buf>:




uint8_t OneWire_Get_Data_Buf(uint8_t index){
  return OneWire.DataBuf[index];
 72a:	e5 e3       	ldi	r30, 0x35	; 53
 72c:	f1 e0       	ldi	r31, 0x01	; 1
 72e:	e8 0f       	add	r30, r24
 730:	f1 1d       	adc	r31, r1
 732:	84 85       	ldd	r24, Z+12	; 0x0c
}
 734:	08 95       	ret

00000736 <OneWire_Get_Data_Buf_Index>:

uint8_t OneWire_Get_Data_Buf_Index(void){
  return OneWire.DataBufCounter;
 736:	80 91 d7 01 	lds	r24, 0x01D7
}
 73a:	08 95       	ret

0000073c <OneWire_Init_Master>:




void OneWire_Init_Master(void){
  OneWire_Struct_Init();
 73c:	0e 94 ce 00 	call	0x19c	; 0x19c <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 740:	0e 94 23 01 	call	0x246	; 0x246 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 744:	0e 94 29 01 	call	0x252	; 0x252 <OneWire_TRX_Interrupt_Init>
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 748:	ed e6       	ldi	r30, 0x6D	; 109
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	8f 7b       	andi	r24, 0xBF	; 191
 750:	80 83       	st	Z, r24
void OneWire_Init_Master(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Disable();
}
 752:	08 95       	ret

00000754 <OneWire_Init_Slave>:

void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
 754:	0e 94 ce 00 	call	0x19c	; 0x19c <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 758:	0e 94 23 01 	call	0x246	; 0x246 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 75c:	0e 94 29 01 	call	0x252	; 0x252 <OneWire_TRX_Interrupt_Init>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 760:	ed e6       	ldi	r30, 0x6D	; 109
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	80 64       	ori	r24, 0x40	; 64
 768:	80 83       	st	Z, r24
void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Enable();
 76a:	08 95       	ret

0000076c <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
 76c:	10 92 06 01 	sts	0x0106, r1
 770:	e7 e0       	ldi	r30, 0x07	; 7
 772:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
 774:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	ef 30       	cpi	r30, 0x0F	; 15
 77a:	f8 07       	cpc	r31, r24
 77c:	d9 f7       	brne	.-10     	; 0x774 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
 77e:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
 780:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
 782:	80 e2       	ldi	r24, 0x20	; 32
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	93 a3       	std	Z+35, r25	; 0x23
 788:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
 78a:	15 a2       	std	Z+37, r1	; 0x25
 78c:	14 a2       	std	Z+36, r1	; 0x24
 78e:	20 e0       	ldi	r18, 0x00	; 0
 790:	04 c0       	rjmp	.+8      	; 0x79a <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
 792:	ea 5f       	subi	r30, 0xFA	; 250
 794:	fe 4f       	sbci	r31, 0xFE	; 254
 796:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
 798:	2f 5f       	subi	r18, 0xFF	; 255
 79a:	80 91 31 01 	lds	r24, 0x0131
 79e:	90 91 32 01 	lds	r25, 0x0132
 7a2:	e2 2f       	mov	r30, r18
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	e8 17       	cp	r30, r24
 7a8:	f9 07       	cpc	r31, r25
 7aa:	98 f3       	brcs	.-26     	; 0x792 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
 7ac:	08 95       	ret

000007ae <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
 7ae:	08 95       	ret

000007b0 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
 7b0:	08 95       	ret

000007b2 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
 7b2:	9b 01       	movw	r18, r22
 7b4:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
 7b6:	60 e6       	ldi	r22, 0x60	; 96
 7b8:	73 ee       	ldi	r23, 0xE3	; 227
 7ba:	86 e1       	ldi	r24, 0x16	; 22
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__udivmodsi4>
 7c2:	21 50       	subi	r18, 0x01	; 1
 7c4:	30 40       	sbci	r19, 0x00	; 0
 7c6:	40 40       	sbci	r20, 0x00	; 0
 7c8:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
 7ca:	e0 ec       	ldi	r30, 0xC0	; 192
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	82 60       	ori	r24, 0x02	; 2
 7d2:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
 7d4:	bb 27       	eor	r27, r27
 7d6:	a5 2f       	mov	r26, r21
 7d8:	94 2f       	mov	r25, r20
 7da:	83 2f       	mov	r24, r19
 7dc:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
 7e0:	20 93 c4 00 	sts	0x00C4, r18
}
 7e4:	08 95       	ret

000007e6 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 7e6:	e1 ec       	ldi	r30, 0xC1	; 193
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	88 60       	ori	r24, 0x08	; 8
 7ee:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 7f0:	86 e0       	ldi	r24, 0x06	; 6
 7f2:	80 93 c2 00 	sts	0x00C2, r24
}
 7f6:	08 95       	ret

000007f8 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 7f8:	e1 ec       	ldi	r30, 0xC1	; 193
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	80 81       	ld	r24, Z
 7fe:	80 61       	ori	r24, 0x10	; 16
 800:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 802:	86 e0       	ldi	r24, 0x06	; 6
 804:	80 93 c2 00 	sts	0x00C2, r24
}
 808:	08 95       	ret

0000080a <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 80a:	e1 ec       	ldi	r30, 0xC1	; 193
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	80 68       	ori	r24, 0x80	; 128
 812:	80 83       	st	Z, r24
  sei();
 814:	78 94       	sei
}
 816:	08 95       	ret

00000818 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
 818:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
 81a:	80 91 c0 00 	lds	r24, 0x00C0
 81e:	85 ff       	sbrs	r24, 5
 820:	fc cf       	rjmp	.-8      	; 0x81a <UART_Transmit_Byte+0x2>
  UDR0=val;
 822:	90 93 c6 00 	sts	0x00C6, r25
}
 826:	08 95       	ret

00000828 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
 828:	df 93       	push	r29
 82a:	cf 93       	push	r28
 82c:	0f 92       	push	r0
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
 832:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
 834:	80 91 c0 00 	lds	r24, 0x00C0
 838:	84 ff       	sbrs	r24, 4
 83a:	05 c0       	rjmp	.+10     	; 0x846 <UART_Receive_Byte+0x1e>
    val=UDR0;
 83c:	80 91 c6 00 	lds	r24, 0x00C6
 840:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	08 c0       	rjmp	.+16     	; 0x856 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
 846:	80 91 c0 00 	lds	r24, 0x00C0
 84a:	83 ff       	sbrs	r24, 3
 84c:	07 c0       	rjmp	.+14     	; 0x85c <UART_Receive_Byte+0x34>
    val=UDR0;
 84e:	80 91 c6 00 	lds	r24, 0x00C6
 852:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
 854:	82 e0       	ldi	r24, 0x02	; 2
 856:	80 93 06 01 	sts	0x0106, r24
 85a:	05 c0       	rjmp	.+10     	; 0x866 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
 85c:	80 91 c6 00 	lds	r24, 0x00C6
 860:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
 862:	10 92 06 01 	sts	0x0106, r1
  }
  return val;
 866:	89 81       	ldd	r24, Y+1	; 0x01
}
 868:	0f 90       	pop	r0
 86a:	cf 91       	pop	r28
 86c:	df 91       	pop	r29
 86e:	08 95       	ret

00000870 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
 870:	80 91 10 01 	lds	r24, 0x0110
}
 874:	08 95       	ret

00000876 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
 876:	10 92 10 01 	sts	0x0110, r1
}
 87a:	08 95       	ret

0000087c <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	ab 01       	movw	r20, r22
 884:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 886:	4f 3f       	cpi	r20, 0xFF	; 255
 888:	51 05       	cpc	r21, r1
 88a:	61 05       	cpc	r22, r1
 88c:	71 05       	cpc	r23, r1
 88e:	09 f0       	breq	.+2      	; 0x892 <UART_Transmit_Byte_Hex+0x16>
 890:	28 f4       	brcc	.+10     	; 0x89c <UART_Transmit_Byte_Hex+0x20>
 892:	e8 e0       	ldi	r30, 0x08	; 8
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	c2 e0       	ldi	r28, 0x02	; 2
 898:	d0 e0       	ldi	r29, 0x00	; 0
 89a:	11 c0       	rjmp	.+34     	; 0x8be <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 89c:	40 30       	cpi	r20, 0x00	; 0
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	58 07       	cpc	r21, r24
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	68 07       	cpc	r22, r24
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	78 07       	cpc	r23, r24
 8aa:	28 f0       	brcs	.+10     	; 0x8b6 <UART_Transmit_Byte_Hex+0x3a>
 8ac:	e0 e2       	ldi	r30, 0x20	; 32
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	c8 e0       	ldi	r28, 0x08	; 8
 8b2:	d0 e0       	ldi	r29, 0x00	; 0
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <UART_Transmit_Byte_Hex+0x42>
 8b6:	e0 e1       	ldi	r30, 0x10	; 16
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	c4 e0       	ldi	r28, 0x04	; 4
 8bc:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 8be:	80 91 c0 00 	lds	r24, 0x00C0
 8c2:	85 ff       	sbrs	r24, 5
 8c4:	fc cf       	rjmp	.-8      	; 0x8be <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
 8c6:	80 e3       	ldi	r24, 0x30	; 48
 8c8:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 8cc:	80 91 c0 00 	lds	r24, 0x00C0
 8d0:	85 ff       	sbrs	r24, 5
 8d2:	fc cf       	rjmp	.-8      	; 0x8cc <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
 8d4:	88 e7       	ldi	r24, 0x78	; 120
 8d6:	80 93 c6 00 	sts	0x00C6, r24
 8da:	10 e0       	ldi	r17, 0x00	; 0
 8dc:	1f c0       	rjmp	.+62     	; 0x91c <__stack+0x1d>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 8de:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 8e0:	db 01       	movw	r26, r22
 8e2:	ca 01       	movw	r24, r20
 8e4:	0e 2e       	mov	r0, r30
 8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <UART_Transmit_Byte_Hex+0x74>
 8e8:	b6 95       	lsr	r27
 8ea:	a7 95       	ror	r26
 8ec:	97 95       	ror	r25
 8ee:	87 95       	ror	r24
 8f0:	0a 94       	dec	r0
 8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <UART_Transmit_Byte_Hex+0x6c>
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	8f 70       	andi	r24, 0x0F	; 15
 8f8:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 8fa:	8a 30       	cpi	r24, 0x0A	; 10
 8fc:	91 05       	cpc	r25, r1
 8fe:	20 f0       	brcs	.+8      	; 0x908 <__stack+0x9>
	    hex_digit+=55;
 900:	9c 01       	movw	r18, r24
 902:	29 5c       	subi	r18, 0xC9	; 201
 904:	3f 4f       	sbci	r19, 0xFF	; 255
 906:	03 c0       	rjmp	.+6      	; 0x90e <__stack+0xf>
	  }else {
	    hex_digit+=48;
 908:	9c 01       	movw	r18, r24
 90a:	20 5d       	subi	r18, 0xD0	; 208
 90c:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 90e:	80 91 c0 00 	lds	r24, 0x00C0
 912:	85 ff       	sbrs	r24, 5
 914:	fc cf       	rjmp	.-8      	; 0x90e <__stack+0xf>
  UDR0=val;
 916:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 91a:	1f 5f       	subi	r17, 0xFF	; 255
 91c:	81 2f       	mov	r24, r17
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	8c 17       	cp	r24, r28
 922:	9d 07       	cpc	r25, r29
 924:	e0 f2       	brcs	.-72     	; 0x8de <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	1f 91       	pop	r17
 92c:	08 95       	ret

0000092e <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
 92e:	cf 92       	push	r12
 930:	df 92       	push	r13
 932:	ef 92       	push	r14
 934:	ff 92       	push	r15
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	ab 01       	movw	r20, r22
 940:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 942:	4f 3f       	cpi	r20, 0xFF	; 255
 944:	51 05       	cpc	r21, r1
 946:	61 05       	cpc	r22, r1
 948:	71 05       	cpc	r23, r1
 94a:	09 f0       	breq	.+2      	; 0x94e <UART_Transmit_Byte_Bin+0x20>
 94c:	10 f4       	brcc	.+4      	; 0x952 <UART_Transmit_Byte_Bin+0x24>
 94e:	97 e0       	ldi	r25, 0x07	; 7
 950:	0b c0       	rjmp	.+22     	; 0x968 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 952:	40 30       	cpi	r20, 0x00	; 0
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	58 07       	cpc	r21, r24
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	68 07       	cpc	r22, r24
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	78 07       	cpc	r23, r24
 960:	10 f0       	brcs	.+4      	; 0x966 <UART_Transmit_Byte_Bin+0x38>
 962:	9f e1       	ldi	r25, 0x1F	; 31
 964:	01 c0       	rjmp	.+2      	; 0x968 <UART_Transmit_Byte_Bin+0x3a>
 966:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 968:	80 91 c0 00 	lds	r24, 0x00C0
 96c:	85 ff       	sbrs	r24, 5
 96e:	fc cf       	rjmp	.-8      	; 0x968 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
 970:	80 e3       	ldi	r24, 0x30	; 48
 972:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 976:	80 91 c0 00 	lds	r24, 0x00C0
 97a:	85 ff       	sbrs	r24, 5
 97c:	fc cf       	rjmp	.-8      	; 0x976 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
 97e:	82 e6       	ldi	r24, 0x62	; 98
 980:	80 93 c6 00 	sts	0x00C6, r24
 984:	20 e0       	ldi	r18, 0x00	; 0
 986:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
 988:	e9 2f       	mov	r30, r25
 98a:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 98c:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 98e:	11 e3       	ldi	r17, 0x31	; 49
 990:	ef 01       	movw	r28, r30
 992:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
 994:	cf 01       	movw	r24, r30
 996:	82 1b       	sub	r24, r18
 998:	93 0b       	sbc	r25, r19
 99a:	6a 01       	movw	r12, r20
 99c:	7b 01       	movw	r14, r22
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <UART_Transmit_Byte_Bin+0x7a>
 9a0:	f6 94       	lsr	r15
 9a2:	e7 94       	ror	r14
 9a4:	d7 94       	ror	r13
 9a6:	c7 94       	ror	r12
 9a8:	8a 95       	dec	r24
 9aa:	d2 f7       	brpl	.-12     	; 0x9a0 <UART_Transmit_Byte_Bin+0x72>
 9ac:	d7 01       	movw	r26, r14
 9ae:	c6 01       	movw	r24, r12
 9b0:	81 70       	andi	r24, 0x01	; 1
 9b2:	90 70       	andi	r25, 0x00	; 0
 9b4:	89 2b       	or	r24, r25
 9b6:	39 f0       	breq	.+14     	; 0x9c6 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 9b8:	80 91 c0 00 	lds	r24, 0x00C0
 9bc:	85 ff       	sbrs	r24, 5
 9be:	fc cf       	rjmp	.-8      	; 0x9b8 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
 9c0:	10 93 c6 00 	sts	0x00C6, r17
 9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 9c6:	80 91 c0 00 	lds	r24, 0x00C0
 9ca:	85 ff       	sbrs	r24, 5
 9cc:	fc cf       	rjmp	.-8      	; 0x9c6 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
 9ce:	00 93 c6 00 	sts	0x00C6, r16
 9d2:	2f 5f       	subi	r18, 0xFF	; 255
 9d4:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 9d6:	2c 17       	cp	r18, r28
 9d8:	3d 07       	cpc	r19, r29
 9da:	e1 f6       	brne	.-72     	; 0x994 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	1f 91       	pop	r17
 9e2:	0f 91       	pop	r16
 9e4:	ff 90       	pop	r15
 9e6:	ef 90       	pop	r14
 9e8:	df 90       	pop	r13
 9ea:	cf 90       	pop	r12
 9ec:	08 95       	ret

000009ee <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
 9ee:	ac 01       	movw	r20, r24
 9f0:	20 e0       	ldi	r18, 0x00	; 0
 9f2:	07 c0       	rjmp	.+14     	; 0xa02 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 9f4:	80 91 c0 00 	lds	r24, 0x00C0
 9f8:	85 ff       	sbrs	r24, 5
 9fa:	fc cf       	rjmp	.-8      	; 0x9f4 <UART_Transmit_Text+0x6>
  UDR0=val;
 9fc:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
 a00:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 a02:	fa 01       	movw	r30, r20
 a04:	e2 0f       	add	r30, r18
 a06:	f1 1d       	adc	r31, r1
 a08:	e0 81       	ld	r30, Z
 a0a:	ee 23       	and	r30, r30
 a0c:	99 f7       	brne	.-26     	; 0x9f4 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
 a0e:	08 95       	ret

00000a10 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	91 e0       	ldi	r25, 0x01	; 1
 a14:	0e 94 f7 04 	call	0x9ee	; 0x9ee <UART_Transmit_Text>
}
 a18:	08 95       	ret

00000a1a <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
 a1a:	83 e0       	ldi	r24, 0x03	; 3
 a1c:	91 e0       	ldi	r25, 0x01	; 1
 a1e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <UART_Transmit_Text>
}
 a22:	08 95       	ret

00000a24 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
 a24:	bf 92       	push	r11
 a26:	cf 92       	push	r12
 a28:	df 92       	push	r13
 a2a:	ef 92       	push	r14
 a2c:	ff 92       	push	r15
 a2e:	0f 93       	push	r16
 a30:	1f 93       	push	r17
 a32:	6b 01       	movw	r12, r22
 a34:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 a36:	61 15       	cp	r22, r1
 a38:	71 05       	cpc	r23, r1
 a3a:	81 05       	cpc	r24, r1
 a3c:	91 05       	cpc	r25, r1
 a3e:	31 f4       	brne	.+12     	; 0xa4c <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
 a40:	10 92 07 01 	sts	0x0107, r1
    UART.InputNumberDigits=1;
 a44:	81 e0       	ldi	r24, 0x01	; 1
 a46:	80 93 0f 01 	sts	0x010F, r24
 a4a:	23 c0       	rjmp	.+70     	; 0xa92 <UART_Determine_Digit_Numbers+0x6e>
 a4c:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
 a4e:	0b 2d       	mov	r16, r11
 a50:	10 e0       	ldi	r17, 0x00	; 0
 a52:	0a 5f       	subi	r16, 0xFA	; 250
 a54:	1e 4f       	sbci	r17, 0xFE	; 254
 a56:	c7 01       	movw	r24, r14
 a58:	b6 01       	movw	r22, r12
 a5a:	2a e0       	ldi	r18, 0x0A	; 10
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	40 e0       	ldi	r20, 0x00	; 0
 a60:	50 e0       	ldi	r21, 0x00	; 0
 a62:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__udivmodsi4>
 a66:	f8 01       	movw	r30, r16
 a68:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
 a6a:	c7 01       	movw	r24, r14
 a6c:	b6 01       	movw	r22, r12
 a6e:	2a e0       	ldi	r18, 0x0A	; 10
 a70:	30 e0       	ldi	r19, 0x00	; 0
 a72:	40 e0       	ldi	r20, 0x00	; 0
 a74:	50 e0       	ldi	r21, 0x00	; 0
 a76:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__udivmodsi4>
 a7a:	c9 01       	movw	r24, r18
 a7c:	da 01       	movw	r26, r20
 a7e:	6c 01       	movw	r12, r24
 a80:	7d 01       	movw	r14, r26
      i++;
 a82:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
 a84:	c1 14       	cp	r12, r1
 a86:	d1 04       	cpc	r13, r1
 a88:	e1 04       	cpc	r14, r1
 a8a:	f1 04       	cpc	r15, r1
 a8c:	01 f7       	brne	.-64     	; 0xa4e <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
 a8e:	b0 92 0f 01 	sts	0x010F, r11
  }
}
 a92:	1f 91       	pop	r17
 a94:	0f 91       	pop	r16
 a96:	ff 90       	pop	r15
 a98:	ef 90       	pop	r14
 a9a:	df 90       	pop	r13
 a9c:	cf 90       	pop	r12
 a9e:	bf 90       	pop	r11
 aa0:	08 95       	ret

00000aa2 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 aa2:	e0 91 0f 01 	lds	r30, 0x010F
 aa6:	0f c0       	rjmp	.+30     	; 0xac6 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
 aa8:	2e 2f       	mov	r18, r30
 aaa:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
 aac:	e2 2f       	mov	r30, r18
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	ea 5f       	subi	r30, 0xFA	; 250
 ab2:	fe 4f       	sbci	r31, 0xFE	; 254
 ab4:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 ab6:	80 91 c0 00 	lds	r24, 0x00C0
 aba:	85 ff       	sbrs	r24, 5
 abc:	fc cf       	rjmp	.-8      	; 0xab6 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
 abe:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 ac0:	90 93 c6 00 	sts	0x00C6, r25
 ac4:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 ac6:	ee 23       	and	r30, r30
 ac8:	79 f7       	brne	.-34     	; 0xaa8 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
 aca:	08 95       	ret

00000acc <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
 acc:	9b 01       	movw	r18, r22
 ace:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 ad0:	97 ff       	sbrs	r25, 7
 ad2:	0e c0       	rjmp	.+28     	; 0xaf0 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 ad4:	80 91 c0 00 	lds	r24, 0x00C0
 ad8:	85 ff       	sbrs	r24, 5
 ada:	fc cf       	rjmp	.-8      	; 0xad4 <UART_Transmit_Number+0x8>
  UDR0=val;
 adc:	8d e2       	ldi	r24, 0x2D	; 45
 ade:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 ae2:	50 95       	com	r21
 ae4:	40 95       	com	r20
 ae6:	30 95       	com	r19
 ae8:	21 95       	neg	r18
 aea:	3f 4f       	sbci	r19, 0xFF	; 255
 aec:	4f 4f       	sbci	r20, 0xFF	; 255
 aee:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 af0:	ca 01       	movw	r24, r20
 af2:	b9 01       	movw	r22, r18
 af4:	0e 94 12 05 	call	0xa24	; 0xa24 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
 af8:	0e 94 51 05 	call	0xaa2	; 0xaa2 <UART_Transmit_Number_Digits>
}
 afc:	08 95       	ret

00000afe <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
 afe:	fc 01       	movw	r30, r24
 b00:	ea 5f       	subi	r30, 0xFA	; 250
 b02:	fe 4f       	sbci	r31, 0xFE	; 254
 b04:	83 85       	ldd	r24, Z+11	; 0x0b
}
 b06:	08 95       	ret

00000b08 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
 b08:	20 91 33 01 	lds	r18, 0x0133
 b0c:	30 91 34 01 	lds	r19, 0x0134
}
 b10:	c9 01       	movw	r24, r18
 b12:	08 95       	ret

00000b14 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
 b14:	10 92 06 01 	sts	0x0106, r1
 b18:	20 e0       	ldi	r18, 0x00	; 0
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	06 c0       	rjmp	.+12     	; 0xb2a <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
 b1e:	f9 01       	movw	r30, r18
 b20:	ea 5f       	subi	r30, 0xFA	; 250
 b22:	fe 4f       	sbci	r31, 0xFE	; 254
 b24:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
 b26:	2f 5f       	subi	r18, 0xFF	; 255
 b28:	3f 4f       	sbci	r19, 0xFF	; 255
 b2a:	80 91 31 01 	lds	r24, 0x0131
 b2e:	90 91 32 01 	lds	r25, 0x0132
 b32:	28 17       	cp	r18, r24
 b34:	39 07       	cpc	r19, r25
 b36:	98 f3       	brcs	.-26     	; 0xb1e <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
 b38:	10 92 34 01 	sts	0x0134, r1
 b3c:	10 92 33 01 	sts	0x0133, r1
  #endif
}
 b40:	08 95       	ret

00000b42 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
 b42:	df 93       	push	r29
 b44:	cf 93       	push	r28
 b46:	0f 92       	push	r0
 b48:	cd b7       	in	r28, 0x3d	; 61
 b4a:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
 b4c:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
 b4e:	0e 94 14 04 	call	0x828	; 0x828 <UART_Receive_Byte>
 b52:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
 b54:	80 91 06 01 	lds	r24, 0x0106
 b58:	88 23       	and	r24, r24
 b5a:	19 f5       	brne	.+70     	; 0xba2 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
 b5c:	89 81       	ldd	r24, Y+1	; 0x01
 b5e:	80 93 10 01 	sts	0x0110, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
 b62:	e0 91 33 01 	lds	r30, 0x0133
 b66:	f0 91 34 01 	lds	r31, 0x0134
 b6a:	89 81       	ldd	r24, Y+1	; 0x01
 b6c:	ea 5f       	subi	r30, 0xFA	; 250
 b6e:	fe 4f       	sbci	r31, 0xFE	; 254
 b70:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
 b72:	80 91 33 01 	lds	r24, 0x0133
 b76:	90 91 34 01 	lds	r25, 0x0134
 b7a:	01 96       	adiw	r24, 0x01	; 1
 b7c:	90 93 34 01 	sts	0x0134, r25
 b80:	80 93 33 01 	sts	0x0133, r24

    if(UART.BufferIndex>=UART.BufferSize){
 b84:	20 91 33 01 	lds	r18, 0x0133
 b88:	30 91 34 01 	lds	r19, 0x0134
 b8c:	80 91 31 01 	lds	r24, 0x0131
 b90:	90 91 32 01 	lds	r25, 0x0132
 b94:	28 17       	cp	r18, r24
 b96:	39 07       	cpc	r19, r25
 b98:	20 f0       	brcs	.+8      	; 0xba2 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
 b9a:	10 92 34 01 	sts	0x0134, r1
 b9e:	10 92 33 01 	sts	0x0133, r1
    }
  }
}
 ba2:	0f 90       	pop	r0
 ba4:	cf 91       	pop	r28
 ba6:	df 91       	pop	r29
 ba8:	08 95       	ret

00000baa <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
 baa:	1f 92       	push	r1
 bac:	0f 92       	push	r0
 bae:	0f b6       	in	r0, 0x3f	; 63
 bb0:	0f 92       	push	r0
 bb2:	11 24       	eor	r1, r1
 bb4:	2f 93       	push	r18
 bb6:	3f 93       	push	r19
 bb8:	4f 93       	push	r20
 bba:	5f 93       	push	r21
 bbc:	6f 93       	push	r22
 bbe:	7f 93       	push	r23
 bc0:	8f 93       	push	r24
 bc2:	9f 93       	push	r25
 bc4:	af 93       	push	r26
 bc6:	bf 93       	push	r27
 bc8:	ef 93       	push	r30
 bca:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
 bcc:	0e 94 a1 05 	call	0xb42	; 0xb42 <UART_Interrupt_Service_Routine>
}
 bd0:	ff 91       	pop	r31
 bd2:	ef 91       	pop	r30
 bd4:	bf 91       	pop	r27
 bd6:	af 91       	pop	r26
 bd8:	9f 91       	pop	r25
 bda:	8f 91       	pop	r24
 bdc:	7f 91       	pop	r23
 bde:	6f 91       	pop	r22
 be0:	5f 91       	pop	r21
 be2:	4f 91       	pop	r20
 be4:	3f 91       	pop	r19
 be6:	2f 91       	pop	r18
 be8:	0f 90       	pop	r0
 bea:	0f be       	out	0x3f, r0	; 63
 bec:	0f 90       	pop	r0
 bee:	1f 90       	pop	r1
 bf0:	18 95       	reti

00000bf2 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
 bf2:	ef 92       	push	r14
 bf4:	ff 92       	push	r15
 bf6:	0f 93       	push	r16
 bf8:	1f 93       	push	r17
 bfa:	7b 01       	movw	r14, r22
 bfc:	8c 01       	movw	r16, r24
  UART_Struct_Init();
 bfe:	0e 94 b6 03 	call	0x76c	; 0x76c <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
 c02:	c8 01       	movw	r24, r16
 c04:	b7 01       	movw	r22, r14
 c06:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 c0a:	e1 ec       	ldi	r30, 0xC1	; 193
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	80 81       	ld	r24, Z
 c10:	88 60       	ori	r24, 0x08	; 8
 c12:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 c14:	a2 ec       	ldi	r26, 0xC2	; 194
 c16:	b0 e0       	ldi	r27, 0x00	; 0
 c18:	96 e0       	ldi	r25, 0x06	; 6
 c1a:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 c1c:	80 81       	ld	r24, Z
 c1e:	80 61       	ori	r24, 0x10	; 16
 c20:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 c22:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 c24:	80 81       	ld	r24, Z
 c26:	80 68       	ori	r24, 0x80	; 128
 c28:	80 83       	st	Z, r24
  sei();
 c2a:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
 c2c:	0e 94 8a 05 	call	0xb14	; 0xb14 <UART_Flush_Buffer>
}
 c30:	1f 91       	pop	r17
 c32:	0f 91       	pop	r16
 c34:	ff 90       	pop	r15
 c36:	ef 90       	pop	r14
 c38:	08 95       	ret

00000c3a <__udivmodsi4>:
 c3a:	a1 e2       	ldi	r26, 0x21	; 33
 c3c:	1a 2e       	mov	r1, r26
 c3e:	aa 1b       	sub	r26, r26
 c40:	bb 1b       	sub	r27, r27
 c42:	fd 01       	movw	r30, r26
 c44:	0d c0       	rjmp	.+26     	; 0xc60 <__udivmodsi4_ep>

00000c46 <__udivmodsi4_loop>:
 c46:	aa 1f       	adc	r26, r26
 c48:	bb 1f       	adc	r27, r27
 c4a:	ee 1f       	adc	r30, r30
 c4c:	ff 1f       	adc	r31, r31
 c4e:	a2 17       	cp	r26, r18
 c50:	b3 07       	cpc	r27, r19
 c52:	e4 07       	cpc	r30, r20
 c54:	f5 07       	cpc	r31, r21
 c56:	20 f0       	brcs	.+8      	; 0xc60 <__udivmodsi4_ep>
 c58:	a2 1b       	sub	r26, r18
 c5a:	b3 0b       	sbc	r27, r19
 c5c:	e4 0b       	sbc	r30, r20
 c5e:	f5 0b       	sbc	r31, r21

00000c60 <__udivmodsi4_ep>:
 c60:	66 1f       	adc	r22, r22
 c62:	77 1f       	adc	r23, r23
 c64:	88 1f       	adc	r24, r24
 c66:	99 1f       	adc	r25, r25
 c68:	1a 94       	dec	r1
 c6a:	69 f7       	brne	.-38     	; 0xc46 <__udivmodsi4_loop>
 c6c:	60 95       	com	r22
 c6e:	70 95       	com	r23
 c70:	80 95       	com	r24
 c72:	90 95       	com	r25
 c74:	9b 01       	movw	r18, r22
 c76:	ac 01       	movw	r20, r24
 c78:	bd 01       	movw	r22, r26
 c7a:	cf 01       	movw	r24, r30
 c7c:	08 95       	ret

00000c7e <_exit>:
 c7e:	f8 94       	cli

00000c80 <__stop_program>:
 c80:	ff cf       	rjmp	.-2      	; 0xc80 <__stop_program>
