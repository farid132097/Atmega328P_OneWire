
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000dce  00000e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000da  00800106  00800106  00000e68  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007e9  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019ed  00000000  00000000  000016b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  0000309e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001278  00000000  00000000  000036e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  0000495c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ec  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e9  00000000  00000000  000056f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  00005de1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3e       	cpi	r26, 0xE0	; 224
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 e5 06 	jmp	0xdca	; 0xdca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "uart.h"

//#define  TX_MODE
#define  RX_MODE

int main(void){
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  UART_Init(38400);
  _delay_ms(1000);
  #endif
  
  #ifdef RX_MODE
  OneWire_Init_Slave();
  ac:	0e 94 50 04 	call	0x8a0	; 0x8a0 <OneWire_Init_Slave>
  UART_Init(38400);
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	76 e9       	ldi	r23, 0x96	; 150
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <UART_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	c0 ed       	ldi	r28, 0xD0	; 208
  be:	d7 e0       	ldi	r29, 0x07	; 7
	  _delay_ms(1000);
	  #endif
	  
	  
	  #ifdef RX_MODE
	  if(OneWire_Get_Data_Ready() == 1){
  c0:	0e 94 2b 04 	call	0x856	; 0x856 <OneWire_Get_Data_Ready>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	b9 f4       	brne	.+46     	; 0xf6 <main+0x50>
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	0d c0       	rjmp	.+26     	; 0xe6 <main+0x40>
	    for(uint8_t i=0; i<OneWire_Get_Data_Buf_Index(); i++){
		  UART_Transmit_Byte_Hex(OneWire_Get_Data_Buf(i));
  cc:	81 2f       	mov	r24, r17
  ce:	0e 94 3b 04 	call	0x876	; 0x876 <OneWire_Get_Data_Buf>
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <UART_Transmit_Byte_Hex>
		  UART_Transmit_Space();
  e0:	0e 94 b3 05 	call	0xb66	; 0xb66 <UART_Transmit_Space>
	  #endif
	  
	  
	  #ifdef RX_MODE
	  if(OneWire_Get_Data_Ready() == 1){
	    for(uint8_t i=0; i<OneWire_Get_Data_Buf_Index(); i++){
  e4:	1f 5f       	subi	r17, 0xFF	; 255
  e6:	0e 94 41 04 	call	0x882	; 0x882 <OneWire_Get_Data_Buf_Index>
  ea:	18 17       	cp	r17, r24
  ec:	78 f3       	brcs	.-34     	; 0xcc <main+0x26>
		  UART_Transmit_Byte_Hex(OneWire_Get_Data_Buf(i));
		  UART_Transmit_Space();
		}
		UART_Transmit_New_Line();
  ee:	0e 94 ae 05 	call	0xb5c	; 0xb5c <UART_Transmit_New_Line>
		OneWire_Flush_Data_Buf();
  f2:	0e 94 bb 00 	call	0x176	; 0x176 <OneWire_Flush_Data_Buf>
  f6:	ce 01       	movw	r24, r28
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x52>
  fc:	e1 cf       	rjmp	.-62     	; 0xc0 <main+0x1a>

000000fe <OneWire_Struct_Init>:
}onewire_t;

onewire_t OneWire;

void OneWire_Struct_Init(void){
  OneWire.BitFrame = 0;
  fe:	10 92 36 01 	sts	0x0136, r1
 102:	10 92 35 01 	sts	0x0135, r1
  OneWire.BitCounter = 0;
 106:	10 92 37 01 	sts	0x0137, r1
  
  OneWire.BusRstEvent = 0;
 10a:	10 92 38 01 	sts	0x0138, r1
  OneWire.AddrMatch = 0;
 10e:	10 92 39 01 	sts	0x0139, r1
  
  OneWire.FrameCMD = 0;
 112:	10 92 3b 01 	sts	0x013B, r1
 116:	10 92 3a 01 	sts	0x013A, r1
  OneWire.FrameData = 0;
 11a:	10 92 3d 01 	sts	0x013D, r1
 11e:	10 92 3c 01 	sts	0x013C, r1
  OneWire.ACK = 0;
 122:	10 92 46 01 	sts	0x0146, r1
  
  OneWire.TempMode = 0;
 126:	10 92 3f 01 	sts	0x013F, r1
 12a:	10 92 3e 01 	sts	0x013E, r1
  OneWire.SelectedMode = 0;
 12e:	10 92 41 01 	sts	0x0141, r1
 132:	10 92 40 01 	sts	0x0140, r1
  
  OneWire.AddrReg = 0;
 136:	10 92 43 01 	sts	0x0143, r1
 13a:	10 92 42 01 	sts	0x0142, r1
  OneWire.DataReg = 0;
 13e:	10 92 45 01 	sts	0x0145, r1
 142:	10 92 44 01 	sts	0x0144, r1
  
  
  OneWire.DataReady = 0;
 146:	10 92 47 01 	sts	0x0147, r1
  OneWire.SessionEnd = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 48 01 	sts	0x0148, r24
}
 150:	08 95       	ret

00000152 <OneWire_Flush_Bit_Frame>:

void OneWire_Flush_Bit_Frame(void){
  OneWire.BitFrame = 0;
 152:	10 92 36 01 	sts	0x0136, r1
 156:	10 92 35 01 	sts	0x0135, r1
  OneWire.BitCounter = 0;
 15a:	10 92 37 01 	sts	0x0137, r1
}
 15e:	08 95       	ret

00000160 <OneWire_Flush_Frame>:

void OneWire_Flush_Frame(void){
  OneWire.FrameCMD = 0;
 160:	10 92 3b 01 	sts	0x013B, r1
 164:	10 92 3a 01 	sts	0x013A, r1
  OneWire.FrameData = 0;
 168:	10 92 3d 01 	sts	0x013D, r1
 16c:	10 92 3c 01 	sts	0x013C, r1
  OneWire.ACK = 0;
 170:	10 92 46 01 	sts	0x0146, r1
}
 174:	08 95       	ret

00000176 <OneWire_Flush_Data_Buf>:

void OneWire_Flush_Data_Buf(void){
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
    OneWire.DataBuf[i] = 0;
 17a:	fc 01       	movw	r30, r24
 17c:	eb 5c       	subi	r30, 0xCB	; 203
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	14 8a       	std	Z+20, r1	; 0x14
 182:	01 96       	adiw	r24, 0x01	; 1
  OneWire.FrameData = 0;
  OneWire.ACK = 0;
}

void OneWire_Flush_Data_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_DATA_BUF; i++){
 184:	86 39       	cpi	r24, 0x96	; 150
 186:	91 05       	cpc	r25, r1
 188:	c1 f7       	brne	.-16     	; 0x17a <OneWire_Flush_Data_Buf+0x4>
    OneWire.DataBuf[i] = 0;
  }
  OneWire.DataBufCounter = 0;
 18a:	10 92 df 01 	sts	0x01DF, r1
}
 18e:	08 95       	ret

00000190 <OneWire_TRX_Set_DDR>:




void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
 190:	88 23       	and	r24, r24
 192:	11 f4       	brne	.+4      	; 0x198 <OneWire_TRX_Set_DDR+0x8>
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 194:	3d 98       	cbi	0x07, 5	; 7
 196:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 198:	3d 9a       	sbi	0x07, 5	; 7
 19a:	08 95       	ret

0000019c <OneWire_TRX_Set_Port>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
 19c:	88 23       	and	r24, r24
 19e:	11 f4       	brne	.+4      	; 0x1a4 <OneWire_TRX_Set_Port+0x8>
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 1a0:	45 98       	cbi	0x08, 5	; 8
 1a2:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
 1a4:	45 9a       	sbi	0x08, 5	; 8
 1a6:	08 95       	ret

000001a8 <OneWire_TRX_Get_Input_State>:
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 1a8:	86 b1       	in	r24, 0x06	; 6
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	25 e0       	ldi	r18, 0x05	; 5
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	2a 95       	dec	r18
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <OneWire_TRX_Get_Input_State+0x6>
    return 1;
  }
  else{
    return 0;
  }
}
 1b6:	81 70       	andi	r24, 0x01	; 1
 1b8:	08 95       	ret

000001ba <OneWire_TRX_Set_Logic>:

void OneWire_TRX_Set_Logic(uint8_t state){
  if(state == 0){
 1ba:	88 23       	and	r24, r24
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <OneWire_TRX_Set_Logic+0x8>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 1be:	3d 9a       	sbi	0x07, 5	; 7
 1c0:	08 95       	ret



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 1c2:	3d 98       	cbi	0x07, 5	; 7
 1c4:	08 95       	ret

000001c6 <OneWire_TRX_GPIO_Init>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 1c6:	45 98       	cbi	0x08, 5	; 8



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 1c8:	3d 98       	cbi	0x07, 5	; 7
  ONEWIRE_DBGTX_DDR  |= (1<<ONEWIRE_DBGTX_BP);
  ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
  #endif
  
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_DDR  |= (1<<ONEWIRE_DBGRX_BP);
 1ca:	3d 98       	cbi	0x07, 5	; 7
 1cc:	3c 9a       	sbi	0x07, 4	; 7
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 1ce:	44 98       	cbi	0x08, 4	; 8
  #endif
}
 1d0:	08 95       	ret

000001d2 <OneWire_TRX_Interrupt_Init>:
  #define ONEWIRE_TRX_PCMSK      PCMSK2
  #define ONEWIRE_TRX_PCIF       PCIF2
  #define ONEWIRE_TRX_PCINT_VECT PCINT2_vect
  #endif
  
  PCICR             |= (1<<ONEWIRE_TRX_PCIE);
 1d2:	e8 e6       	ldi	r30, 0x68	; 104
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	80 83       	st	Z, r24
  PCIFR             |= (1<<ONEWIRE_TRX_PCIF);
 1dc:	d9 9a       	sbi	0x1b, 1	; 27
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 1de:	ec e6       	ldi	r30, 0x6C	; 108
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8f 7d       	andi	r24, 0xDF	; 223
 1e6:	80 83       	st	Z, r24
  
  sei();
 1e8:	78 94       	sei
}
 1ea:	08 95       	ret

000001ec <OneWire_TRX_Interrupt_Enable>:



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 1ec:	ec e6       	ldi	r30, 0x6C	; 108
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 62       	ori	r24, 0x20	; 32
 1f4:	80 83       	st	Z, r24
}
 1f6:	08 95       	ret

000001f8 <OneWire_TRX_Interrupt_Disable>:

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 1f8:	ec e6       	ldi	r30, 0x6C	; 108
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	8f 7d       	andi	r24, 0xDF	; 223
 200:	80 83       	st	Z, r24
}
 202:	08 95       	ret

00000204 <OneWire_TRX_Interrupt_Status>:

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 204:	80 91 6c 00 	lds	r24, 0x006C
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	35 e0       	ldi	r19, 0x05	; 5
 20c:	96 95       	lsr	r25
 20e:	87 95       	ror	r24
 210:	3a 95       	dec	r19
 212:	e1 f7       	brne	.-8      	; 0x20c <OneWire_TRX_Interrupt_Status+0x8>
    return 1;
  }
  else{
    return 0;
  }
}
 214:	81 70       	andi	r24, 0x01	; 1
 216:	08 95       	ret

00000218 <OneWire_TRX_Falling_Edge_Interrupt>:
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 218:	86 b1       	in	r24, 0x06	; 6
 21a:	82 95       	swap	r24
 21c:	86 95       	lsr	r24
 21e:	87 70       	andi	r24, 0x07	; 7
 220:	80 95       	com	r24
    return 1;
  }
  else{
    return 0;
  }
}
 222:	81 70       	andi	r24, 0x01	; 1
 224:	08 95       	ret

00000226 <OneWire_Debug_Tx_Pulse>:
    ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
    asm("nop");
	asm("nop");
  }
  #endif
}
 226:	08 95       	ret

00000228 <OneWire_Debug_Rx_Pulse>:

void OneWire_Debug_Rx_Pulse(uint8_t repeat){
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	07 c0       	rjmp	.+14     	; 0x23a <OneWire_Debug_Rx_Pulse+0x12>
  #ifdef ONEWIRE_DBGRX_ENABLE
  for(uint8_t i=0; i<repeat; i++){
    ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 22c:	44 9a       	sbi	0x08, 4	; 8
    asm("nop");
 22e:	00 00       	nop
	asm("nop");
 230:	00 00       	nop
    ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 232:	44 98       	cbi	0x08, 4	; 8
	asm("nop");
 234:	00 00       	nop
	asm("nop");
 236:	00 00       	nop
  #endif
}

void OneWire_Debug_Rx_Pulse(uint8_t repeat){
  #ifdef ONEWIRE_DBGRX_ENABLE
  for(uint8_t i=0; i<repeat; i++){
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	98 17       	cp	r25, r24
 23c:	b8 f3       	brcs	.-18     	; 0x22c <OneWire_Debug_Rx_Pulse+0x4>
    ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
	asm("nop");
	asm("nop");
  }
  #endif
}
 23e:	08 95       	ret

00000240 <OneWire_Delay_Clock_Low_Time>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 240:	85 e3       	ldi	r24, 0x35	; 53
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <OneWire_Delay_Clock_Low_Time+0x2>



void OneWire_Delay_Clock_Low_Time(void){
  _delay_us(ONEWIRE_CLK_LOW);
}
 246:	08 95       	ret

00000248 <OneWire_Delay_Clock_High_Time>:
 248:	85 e3       	ldi	r24, 0x35	; 53
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <OneWire_Delay_Clock_High_Time+0x2>

void OneWire_Delay_Clock_High_Time(void){
  _delay_us(ONEWIRE_CLK_HIGH);
}
 24e:	08 95       	ret

00000250 <OneWire_Delay_Half_Bit_Time>:
 250:	8a e6       	ldi	r24, 0x6A	; 106
 252:	8a 95       	dec	r24
 254:	f1 f7       	brne	.-4      	; 0x252 <OneWire_Delay_Half_Bit_Time+0x2>

void OneWire_Delay_Half_Bit_Time(void){
  _delay_us(ONEWIRE_CLK_HBIT);
}
 256:	08 95       	ret

00000258 <OneWire_Delay_Byte_Gap>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 258:	80 e9       	ldi	r24, 0x90	; 144
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <OneWire_Delay_Byte_Gap+0x4>

void OneWire_Delay_Byte_Gap(void){
  _delay_us(ONEWIRE_BYTE_GAP);
}
 260:	08 95       	ret

00000262 <OneWire_Delay_Rx_Int>:
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 262:	ec e6       	ldi	r30, 0x6C	; 108
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	8f 7d       	andi	r24, 0xDF	; 223
 26a:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 26c:	85 e3       	ldi	r24, 0x35	; 53
 26e:	8a 95       	dec	r24
 270:	f1 f7       	brne	.-4      	; 0x26e <OneWire_Delay_Rx_Int+0xc>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 272:	8a e6       	ldi	r24, 0x6A	; 106
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <OneWire_Delay_Rx_Int+0x12>
 278:	80 81       	ld	r24, Z
 27a:	80 62       	ori	r24, 0x20	; 32
 27c:	80 83       	st	Z, r24
void OneWire_Delay_Rx_Int(void){
  OneWire_TRX_Interrupt_Disable();
  OneWire_Delay_Clock_Low_Time();
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Interrupt_Enable();
}
 27e:	08 95       	ret

00000280 <OneWire_Tx_Reset_Cmd>:
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 280:	80 91 6c 00 	lds	r24, 0x006C
 284:	8f 7d       	andi	r24, 0xDF	; 223
 286:	80 93 6c 00 	sts	0x006C, r24
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	45 e3       	ldi	r20, 0x35	; 53
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 28e:	3a e6       	ldi	r19, 0x6A	; 106
 290:	3d 9a       	sbi	0x07, 5	; 7
 292:	84 2f       	mov	r24, r20
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <OneWire_Tx_Reset_Cmd+0x14>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 298:	3d 98       	cbi	0x07, 5	; 7
 29a:	83 2f       	mov	r24, r19
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <OneWire_Tx_Reset_Cmd+0x1c>
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 2a0:	86 b1       	in	r24, 0x06	; 6
 2a2:	93 2f       	mov	r25, r19
 2a4:	9a 95       	dec	r25
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <OneWire_Tx_Reset_Cmd+0x24>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 2a8:	3d 98       	cbi	0x07, 5	; 7
 2aa:	94 2f       	mov	r25, r20
 2ac:	9a 95       	dec	r25
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <OneWire_Tx_Reset_Cmd+0x2c>
	OneWire_Debug_Tx_Pulse(1);
	ack_sts = OneWire_TRX_Get_Input_State();
	OneWire_Delay_Half_Bit_Time();
	OneWire_TRX_Set_Logic(1);
	OneWire_Delay_Clock_High_Time();
	if(ack_sts == 0){
 2b0:	85 ff       	sbrs	r24, 5
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <OneWire_Tx_Reset_Cmd+0x3a>


uint8_t OneWire_Tx_Reset_Cmd(void){
  uint8_t ack_sts=0;
  OneWire_TRX_Interrupt_Disable();
  for(uint8_t i=0;i<(ONEWIRE_FRAME_LEN*2);i++){
 2b4:	2f 5f       	subi	r18, 0xFF	; 255
 2b6:	28 31       	cpi	r18, 0x18	; 24
 2b8:	59 f7       	brne	.-42     	; 0x290 <OneWire_Tx_Reset_Cmd+0x10>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 2ba:	80 91 6c 00 	lds	r24, 0x006C
 2be:	80 62       	ori	r24, 0x20	; 32
 2c0:	80 93 6c 00 	sts	0x006C, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c4:	80 e9       	ldi	r24, 0x90	; 144
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <OneWire_Tx_Reset_Cmd+0x48>
	}
  }
  OneWire_TRX_Interrupt_Enable();
  OneWire_Delay_Byte_Gap();
  return ack_sts;
}
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	08 95       	ret

000002d0 <OneWire_TRX_Frame>:


uint16_t OneWire_TRX_Frame(uint16_t val){
 2d0:	ac 01       	movw	r20, r24
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 2d2:	80 91 6c 00 	lds	r24, 0x006C
 2d6:	8f 7d       	andi	r24, 0xDF	; 223
 2d8:	80 93 6c 00 	sts	0x006C, r24
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2e2:	e5 e3       	ldi	r30, 0x35	; 53
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 2e4:	7a e6       	ldi	r23, 0x6A	; 106
 2e6:	3d 9a       	sbi	0x07, 5	; 7
 2e8:	8e 2f       	mov	r24, r30
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <OneWire_TRX_Frame+0x1a>
  for(uint8_t i=0;i<ONEWIRE_FRAME_LEN;i++){
	//Initial Logic Low
	OneWire_TRX_Set_Logic(0);
    OneWire_Delay_Clock_Low_Time();
	//Data Controlled By Master
	if(i < (ONEWIRE_FRAME_LEN-1)){
 2ee:	6b 30       	cpi	r22, 0x0B	; 11
 2f0:	21 f0       	breq	.+8      	; 0x2fa <OneWire_TRX_Frame+0x2a>
      if(val & 0x800){
 2f2:	53 fd       	sbrc	r21, 3
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <OneWire_TRX_Frame+0x2a>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 2f6:	3d 9a       	sbi	0x07, 5	; 7
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <OneWire_TRX_Frame+0x2c>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 2fa:	3d 98       	cbi	0x07, 5	; 7
 2fc:	87 2f       	mov	r24, r23
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <OneWire_TRX_Frame+0x2e>
	  OneWire_TRX_Set_Logic(1);
	}
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse(1);
	rx_val <<= 1;
 302:	22 0f       	add	r18, r18
 304:	33 1f       	adc	r19, r19
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 306:	86 b1       	in	r24, 0x06	; 6
	}
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse(1);
	rx_val <<= 1;
	rx_val |= OneWire_TRX_Get_Input_State();
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	a5 e0       	ldi	r26, 0x05	; 5
 30c:	96 95       	lsr	r25
 30e:	87 95       	ror	r24
 310:	aa 95       	dec	r26
 312:	e1 f7       	brne	.-8      	; 0x30c <OneWire_TRX_Frame+0x3c>
 314:	81 70       	andi	r24, 0x01	; 1
 316:	90 70       	andi	r25, 0x00	; 0
 318:	28 2b       	or	r18, r24
 31a:	39 2b       	or	r19, r25
 31c:	87 2f       	mov	r24, r23
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <OneWire_TRX_Frame+0x4e>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 322:	3d 98       	cbi	0x07, 5	; 7
 324:	8e 2f       	mov	r24, r30
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <OneWire_TRX_Frame+0x56>


uint16_t OneWire_TRX_Frame(uint16_t val){
  uint16_t rx_val=0;
  OneWire_TRX_Interrupt_Disable();
  for(uint8_t i=0;i<ONEWIRE_FRAME_LEN;i++){
 32a:	6f 5f       	subi	r22, 0xFF	; 255
 32c:	6c 30       	cpi	r22, 0x0C	; 12
 32e:	19 f0       	breq	.+6      	; 0x336 <OneWire_TRX_Frame+0x66>
	}
	//Leave For Ack
	else{
	  OneWire_TRX_Set_Logic(1);
	}
	val <<= 1;
 330:	44 0f       	add	r20, r20
 332:	55 1f       	adc	r21, r21
 334:	d8 cf       	rjmp	.-80     	; 0x2e6 <OneWire_TRX_Frame+0x16>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 336:	80 91 6c 00 	lds	r24, 0x006C
 33a:	80 62       	ori	r24, 0x20	; 32
 33c:	80 93 6c 00 	sts	0x006C, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 340:	80 e9       	ldi	r24, 0x90	; 144
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <OneWire_TRX_Frame+0x74>
	OneWire_Delay_Clock_High_Time();
  }
  OneWire_TRX_Interrupt_Enable();
  OneWire_Delay_Byte_Gap();
  return rx_val;
}
 348:	c9 01       	movw	r24, r18
 34a:	08 95       	ret

0000034c <OneWire_TRX_Cmd_Data>:


uint16_t OneWire_TRX_Cmd_Data(uint16_t cmd, uint16_t data){
  uint16_t temp = cmd;
  temp  |= data;
 34c:	68 2b       	or	r22, r24
 34e:	79 2b       	or	r23, r25
  temp <<= 1;
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
  temp  |= 1;
  temp   = OneWire_TRX_Frame(temp);
 354:	cb 01       	movw	r24, r22
 356:	81 60       	ori	r24, 0x01	; 1
 358:	0e 94 68 01 	call	0x2d0	; 0x2d0 <OneWire_TRX_Frame>
  return temp;
}
 35c:	08 95       	ret

0000035e <OneWire_Handle_Reset_Event>:




void OneWire_Handle_Reset_Event(void){
  OneWire.AddrMatch = 0;
 35e:	10 92 39 01 	sts	0x0139, r1
  OneWire.BusRstEvent = 1;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 38 01 	sts	0x0138, r24
  OneWire.TempMode = 0;
 368:	10 92 3f 01 	sts	0x013F, r1
 36c:	10 92 3e 01 	sts	0x013E, r1
  OneWire.SelectedMode = 0;
 370:	10 92 41 01 	sts	0x0141, r1
 374:	10 92 40 01 	sts	0x0140, r1
  OneWire.ACK = 1;
 378:	80 93 46 01 	sts	0x0146, r24
  OneWire_Debug_Rx_Pulse(6);
 37c:	86 e0       	ldi	r24, 0x06	; 6
 37e:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
}
 382:	08 95       	ret

00000384 <OneWire_Handle_Start_Event>:


void OneWire_Handle_Start_Event(void){
  OneWire.BusRstEvent = 0;
 384:	10 92 38 01 	sts	0x0138, r1
  OneWire.AddrMatch = 1;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 39 01 	sts	0x0139, r24
  OneWire.SessionEnd = 0;
 38e:	10 92 48 01 	sts	0x0148, r1
  OneWire.ACK = 1;
 392:	80 93 46 01 	sts	0x0146, r24
  OneWire_Debug_Rx_Pulse(5);
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
}
 39c:	08 95       	ret

0000039e <OneWire_Handle_Read_Event>:


void OneWire_Handle_Read_Event(void){
  OneWire.AddrReg = OneWire.FrameData;
 39e:	80 91 3c 01 	lds	r24, 0x013C
 3a2:	90 91 3d 01 	lds	r25, 0x013D
 3a6:	90 93 43 01 	sts	0x0143, r25
 3aa:	80 93 42 01 	sts	0x0142, r24
  OneWire.TempMode = ONEWIRE_CMD_READ;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	94 e0       	ldi	r25, 0x04	; 4
 3b2:	90 93 3f 01 	sts	0x013F, r25
 3b6:	80 93 3e 01 	sts	0x013E, r24
  OneWire.ACK = 1;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 46 01 	sts	0x0146, r24
  OneWire_Debug_Rx_Pulse(4);
 3c0:	84 e0       	ldi	r24, 0x04	; 4
 3c2:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
}
 3c6:	08 95       	ret

000003c8 <OneWire_Handle_Write_Event>:

void OneWire_Handle_Write_Event(void){
  OneWire.AddrReg = OneWire.FrameData;
 3c8:	80 91 3c 01 	lds	r24, 0x013C
 3cc:	90 91 3d 01 	lds	r25, 0x013D
 3d0:	90 93 43 01 	sts	0x0143, r25
 3d4:	80 93 42 01 	sts	0x0142, r24
  OneWire.TempMode = ONEWIRE_CMD_WRITE;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	90 93 3f 01 	sts	0x013F, r25
 3e0:	80 93 3e 01 	sts	0x013E, r24
  OneWire.ACK = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 46 01 	sts	0x0146, r24
  OneWire_Debug_Rx_Pulse(3);
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
}
 3f0:	08 95       	ret

000003f2 <OneWire_Handle_Cont_Event>:

void OneWire_Handle_Cont_Event(void){
  OneWire.ACK = 1;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 46 01 	sts	0x0146, r24
  if(OneWire.TempMode == ONEWIRE_CMD_WRITE){
 3f8:	80 91 3e 01 	lds	r24, 0x013E
 3fc:	90 91 3f 01 	lds	r25, 0x013F
 400:	80 50       	subi	r24, 0x00	; 0
 402:	91 40       	sbci	r25, 0x01	; 1
 404:	a9 f4       	brne	.+42     	; 0x430 <OneWire_Handle_Cont_Event+0x3e>
	OneWire.DataBuf[OneWire.DataBufCounter] = OneWire.FrameData;
 406:	e0 91 df 01 	lds	r30, 0x01DF
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 91 3c 01 	lds	r24, 0x013C
 410:	90 91 3d 01 	lds	r25, 0x013D
 414:	eb 5c       	subi	r30, 0xCB	; 203
 416:	fe 4f       	sbci	r31, 0xFE	; 254
 418:	84 8b       	std	Z+20, r24	; 0x14
	OneWire.DataBufCounter++;
 41a:	80 91 df 01 	lds	r24, 0x01DF
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 df 01 	sts	0x01DF, r24
	if(OneWire.DataBufCounter>=ONEWIRE_DATA_BUF){
 424:	80 91 df 01 	lds	r24, 0x01DF
 428:	86 39       	cpi	r24, 0x96	; 150
 42a:	10 f0       	brcs	.+4      	; 0x430 <OneWire_Handle_Cont_Event+0x3e>
	  OneWire.DataBufCounter = 0;
 42c:	10 92 df 01 	sts	0x01DF, r1
	}
  }
  OneWire_Debug_Rx_Pulse(2);
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
}
 436:	08 95       	ret

00000438 <OneWire_Handle_Stop_Event>:

void OneWire_Handle_Stop_Event(void){
  OneWire.AddrMatch = 0;
 438:	10 92 39 01 	sts	0x0139, r1
  OneWire.BusRstEvent = 0;
 43c:	10 92 38 01 	sts	0x0138, r1
  OneWire.SessionEnd = 1;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	80 93 48 01 	sts	0x0148, r24
  OneWire.ACK = 1;
 446:	80 93 46 01 	sts	0x0146, r24
  OneWire_Debug_Rx_Pulse(1);
 44a:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
}
 44e:	08 95       	ret

00000450 <OneWire_Handle_Cmd_Data>:



void OneWire_Handle_Cmd_Data(void){
  //reset request -> Send ack
  if(OneWire.BitFrame == ONEWIRE_CMD_RESET){
 450:	80 91 35 01 	lds	r24, 0x0135
 454:	90 91 36 01 	lds	r25, 0x0136
 458:	8f 5f       	subi	r24, 0xFF	; 255
 45a:	97 40       	sbci	r25, 0x07	; 7
 45c:	19 f4       	brne	.+6      	; 0x464 <OneWire_Handle_Cmd_Data+0x14>
	OneWire_Handle_Reset_Event();
 45e:	0e 94 af 01 	call	0x35e	; 0x35e <OneWire_Handle_Reset_Event>
 462:	08 95       	ret
  }
  //Address matched -> Send ack
  else if((OneWire.FrameCMD == ONEWIRE_CMD_START) && (OneWire.FrameData == ONEWIRE_OWN_AADR)){
 464:	80 91 3a 01 	lds	r24, 0x013A
 468:	90 91 3b 01 	lds	r25, 0x013B
 46c:	80 50       	subi	r24, 0x00	; 0
 46e:	96 40       	sbci	r25, 0x06	; 6
 470:	79 f4       	brne	.+30     	; 0x490 <OneWire_Handle_Cmd_Data+0x40>
 472:	80 91 3c 01 	lds	r24, 0x013C
 476:	90 91 3d 01 	lds	r25, 0x013D
 47a:	88 36       	cpi	r24, 0x68	; 104
 47c:	91 05       	cpc	r25, r1
 47e:	41 f4       	brne	.+16     	; 0x490 <OneWire_Handle_Cmd_Data+0x40>
	if(OneWire.BusRstEvent == 1){
 480:	80 91 38 01 	lds	r24, 0x0138
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	09 f0       	breq	.+2      	; 0x48a <OneWire_Handle_Cmd_Data+0x3a>
 488:	40 c0       	rjmp	.+128    	; 0x50a <OneWire_Handle_Cmd_Data+0xba>
	  OneWire_Handle_Start_Event();
 48a:	0e 94 c2 01 	call	0x384	; 0x384 <OneWire_Handle_Start_Event>
 48e:	08 95       	ret
	}
  }
  //Read cmd -> Send ack
  else if((OneWire.FrameCMD == ONEWIRE_CMD_READ) && (OneWire.AddrMatch == 1)){
 490:	80 91 3a 01 	lds	r24, 0x013A
 494:	90 91 3b 01 	lds	r25, 0x013B
 498:	80 50       	subi	r24, 0x00	; 0
 49a:	94 40       	sbci	r25, 0x04	; 4
 49c:	39 f4       	brne	.+14     	; 0x4ac <OneWire_Handle_Cmd_Data+0x5c>
 49e:	80 91 39 01 	lds	r24, 0x0139
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	19 f4       	brne	.+6      	; 0x4ac <OneWire_Handle_Cmd_Data+0x5c>
	OneWire_Handle_Read_Event();
 4a6:	0e 94 cf 01 	call	0x39e	; 0x39e <OneWire_Handle_Read_Event>
 4aa:	08 95       	ret
  }
  //Write cmd -> Send ack
  else if((OneWire.FrameCMD == ONEWIRE_CMD_WRITE) && (OneWire.AddrMatch == 1)){
 4ac:	80 91 3a 01 	lds	r24, 0x013A
 4b0:	90 91 3b 01 	lds	r25, 0x013B
 4b4:	80 50       	subi	r24, 0x00	; 0
 4b6:	91 40       	sbci	r25, 0x01	; 1
 4b8:	39 f4       	brne	.+14     	; 0x4c8 <OneWire_Handle_Cmd_Data+0x78>
 4ba:	80 91 39 01 	lds	r24, 0x0139
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	19 f4       	brne	.+6      	; 0x4c8 <OneWire_Handle_Cmd_Data+0x78>
	OneWire_Handle_Write_Event();
 4c2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OneWire_Handle_Write_Event>
 4c6:	08 95       	ret
  }
  //Continue cmd -> Send ack
  else if((OneWire.FrameCMD == ONEWIRE_CMD_CONT) && (OneWire.AddrMatch == 1)){
 4c8:	80 91 3a 01 	lds	r24, 0x013A
 4cc:	90 91 3b 01 	lds	r25, 0x013B
 4d0:	89 2b       	or	r24, r25
 4d2:	39 f4       	brne	.+14     	; 0x4e2 <OneWire_Handle_Cmd_Data+0x92>
 4d4:	80 91 39 01 	lds	r24, 0x0139
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	19 f4       	brne	.+6      	; 0x4e2 <OneWire_Handle_Cmd_Data+0x92>
	OneWire_Handle_Cont_Event();
 4dc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <OneWire_Handle_Cont_Event>
 4e0:	08 95       	ret
  }
  //Stop cmd -> Send ack
  else if((OneWire.FrameCMD == ONEWIRE_CMD_STOP) && (OneWire.AddrMatch == 1)){
 4e2:	80 91 3a 01 	lds	r24, 0x013A
 4e6:	90 91 3b 01 	lds	r25, 0x013B
 4ea:	80 50       	subi	r24, 0x00	; 0
 4ec:	93 40       	sbci	r25, 0x03	; 3
 4ee:	39 f4       	brne	.+14     	; 0x4fe <OneWire_Handle_Cmd_Data+0xae>
 4f0:	80 91 39 01 	lds	r24, 0x0139
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	19 f4       	brne	.+6      	; 0x4fe <OneWire_Handle_Cmd_Data+0xae>
	OneWire_Handle_Stop_Event();
 4f8:	0e 94 1c 02 	call	0x438	; 0x438 <OneWire_Handle_Stop_Event>
 4fc:	08 95       	ret
  }
  //Nothing Matched, Send nack
  else{
	OneWire.ACK = 0;
 4fe:	10 92 46 01 	sts	0x0146, r1
    OneWire.AddrMatch = 0;
 502:	10 92 39 01 	sts	0x0139, r1
	OneWire.BusRstEvent = 0;
 506:	10 92 38 01 	sts	0x0138, r1
 50a:	08 95       	ret

0000050c <OneWire_Select_Mode>:
  }
}

void OneWire_Select_Mode(void){
  if(OneWire.TempMode == ONEWIRE_CMD_WRITE){
 50c:	80 91 3e 01 	lds	r24, 0x013E
 510:	90 91 3f 01 	lds	r25, 0x013F
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	80 30       	cpi	r24, 0x00	; 0
 518:	92 07       	cpc	r25, r18
 51a:	29 f4       	brne	.+10     	; 0x526 <OneWire_Select_Mode+0x1a>
	OneWire.SelectedMode = ONEWIRE_CMD_WRITE;
 51c:	90 93 41 01 	sts	0x0141, r25
 520:	80 93 40 01 	sts	0x0140, r24
 524:	08 95       	ret
  }
  else if(OneWire.TempMode == ONEWIRE_CMD_READ){
 526:	80 91 3e 01 	lds	r24, 0x013E
 52a:	90 91 3f 01 	lds	r25, 0x013F
 52e:	24 e0       	ldi	r18, 0x04	; 4
 530:	80 30       	cpi	r24, 0x00	; 0
 532:	92 07       	cpc	r25, r18
 534:	49 f5       	brne	.+82     	; 0x588 <OneWire_Select_Mode+0x7c>
	OneWire.SelectedMode = ONEWIRE_CMD_READ;
 536:	90 93 41 01 	sts	0x0141, r25
 53a:	80 93 40 01 	sts	0x0140, r24
	if(OneWire.DataReady == 0){
 53e:	80 91 47 01 	lds	r24, 0x0147
 542:	88 23       	and	r24, r24
 544:	29 f5       	brne	.+74     	; 0x590 <OneWire_Select_Mode+0x84>
	  OneWire_Debug_Rx_Pulse(7);
 546:	87 e0       	ldi	r24, 0x07	; 7
 548:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
  }
}


void OneWire_Set_Data_Reg(uint8_t val){
  OneWire.DataReg = val;
 54c:	8c e9       	ldi	r24, 0x9C	; 156
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	90 93 45 01 	sts	0x0145, r25
 554:	80 93 44 01 	sts	0x0144, r24
  OneWire.DataReg <<=1;
 558:	80 91 44 01 	lds	r24, 0x0144
 55c:	90 91 45 01 	lds	r25, 0x0145
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	90 93 45 01 	sts	0x0145, r25
 568:	80 93 44 01 	sts	0x0144, r24
  OneWire.DataReg  |= (ONEWIRE_CMD_READ<<1) | 1;
 56c:	80 91 44 01 	lds	r24, 0x0144
 570:	90 91 45 01 	lds	r25, 0x0145
 574:	81 60       	ori	r24, 0x01	; 1
 576:	98 60       	ori	r25, 0x08	; 8
 578:	90 93 45 01 	sts	0x0145, r25
 57c:	80 93 44 01 	sts	0x0144, r24
  else if(OneWire.TempMode == ONEWIRE_CMD_READ){
	OneWire.SelectedMode = ONEWIRE_CMD_READ;
	if(OneWire.DataReady == 0){
	  OneWire_Debug_Rx_Pulse(7);
	  OneWire_Set_Data_Reg(0x9C);
	  OneWire.DataReady = 1;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	80 93 47 01 	sts	0x0147, r24
 586:	08 95       	ret
	}
  }
  else{
	OneWire.SelectedMode = 0;
 588:	10 92 41 01 	sts	0x0141, r1
 58c:	10 92 40 01 	sts	0x0140, r1
 590:	08 95       	ret

00000592 <OneWire_Master_Process_Cmd_Data>:
  }
}


void OneWire_Master_Process_Cmd_Data(void){
  OneWire_Delay_Rx_Int();
 592:	0e 94 31 01 	call	0x262	; 0x262 <OneWire_Delay_Rx_Int>
  OneWire.BitFrame <<= 1;
 596:	80 91 35 01 	lds	r24, 0x0135
 59a:	90 91 36 01 	lds	r25, 0x0136
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	90 93 36 01 	sts	0x0136, r25
 5a6:	80 93 35 01 	sts	0x0135, r24
  OneWire_Debug_Rx_Pulse(1);
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
  OneWire.BitFrame |= OneWire_TRX_Get_Input_State();
 5b0:	20 91 35 01 	lds	r18, 0x0135
 5b4:	30 91 36 01 	lds	r19, 0x0136
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 5b8:	86 b1       	in	r24, 0x06	; 6

void OneWire_Master_Process_Cmd_Data(void){
  OneWire_Delay_Rx_Int();
  OneWire.BitFrame <<= 1;
  OneWire_Debug_Rx_Pulse(1);
  OneWire.BitFrame |= OneWire_TRX_Get_Input_State();
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	45 e0       	ldi	r20, 0x05	; 5
 5be:	96 95       	lsr	r25
 5c0:	87 95       	ror	r24
 5c2:	4a 95       	dec	r20
 5c4:	e1 f7       	brne	.-8      	; 0x5be <OneWire_Master_Process_Cmd_Data+0x2c>
 5c6:	81 70       	andi	r24, 0x01	; 1
 5c8:	90 70       	andi	r25, 0x00	; 0
 5ca:	82 2b       	or	r24, r18
 5cc:	93 2b       	or	r25, r19
 5ce:	90 93 36 01 	sts	0x0136, r25
 5d2:	80 93 35 01 	sts	0x0135, r24
  if(OneWire.BitCounter == (ONEWIRE_FRAME_LEN-2)){
 5d6:	80 91 37 01 	lds	r24, 0x0137
 5da:	8a 30       	cpi	r24, 0x0A	; 10
 5dc:	a9 f4       	brne	.+42     	; 0x608 <OneWire_Master_Process_Cmd_Data+0x76>
	OneWire.FrameCMD  = OneWire.BitFrame & ONEWIRE_CMD_MASK;
 5de:	80 91 35 01 	lds	r24, 0x0135
 5e2:	90 91 36 01 	lds	r25, 0x0136
 5e6:	80 70       	andi	r24, 0x00	; 0
 5e8:	97 70       	andi	r25, 0x07	; 7
 5ea:	90 93 3b 01 	sts	0x013B, r25
 5ee:	80 93 3a 01 	sts	0x013A, r24
	OneWire.FrameData = OneWire.BitFrame & ONEWIRE_DATA_MASK;
 5f2:	80 91 35 01 	lds	r24, 0x0135
 5f6:	90 91 36 01 	lds	r25, 0x0136
 5fa:	90 70       	andi	r25, 0x00	; 0
 5fc:	90 93 3d 01 	sts	0x013D, r25
 600:	80 93 3c 01 	sts	0x013C, r24
	OneWire_Handle_Cmd_Data();
 604:	0e 94 28 02 	call	0x450	; 0x450 <OneWire_Handle_Cmd_Data>
 608:	08 95       	ret

0000060a <OneWire_Master_Process_Ack>:
  }
}

void OneWire_Master_Process_Ack(void){
  //maybe need to disable interrupt
  OneWire_Debug_Rx_Pulse(1);
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
  if(OneWire.ACK == 1){
 610:	80 91 46 01 	lds	r24, 0x0146
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	19 f4       	brne	.+6      	; 0x61e <OneWire_Master_Process_Ack+0x14>
	OneWire.ACK = 0;
 618:	10 92 46 01 	sts	0x0146, r1
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 61c:	3d 9a       	sbi	0x07, 5	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 61e:	8a e6       	ldi	r24, 0x6A	; 106
 620:	98 2f       	mov	r25, r24
 622:	9a 95       	dec	r25
 624:	f1 f7       	brne	.-4      	; 0x622 <OneWire_Master_Process_Ack+0x18>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 626:	8a 95       	dec	r24
 628:	f1 f7       	brne	.-4      	; 0x626 <OneWire_Master_Process_Ack+0x1c>
 62a:	3d 98       	cbi	0x07, 5	; 7
    OneWire_TRX_Set_Logic(0);
  }
  OneWire_Delay_Half_Bit_Time();
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Set_Logic(1);
  OneWire_Debug_Rx_Pulse(1);
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
  //maybe need to enable interrupt
}
 632:	08 95       	ret

00000634 <OneWire_Read_Mode_Feedback>:
	OneWire_Select_Mode();
  }
}


void OneWire_Read_Mode_Feedback(void){
 634:	1f 93       	push	r17
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 636:	80 91 6c 00 	lds	r24, 0x006C
 63a:	8f 7d       	andi	r24, 0xDF	; 223
 63c:	80 93 6c 00 	sts	0x006C, r24
}


void OneWire_Read_Mode_Feedback(void){
  OneWire_TRX_Interrupt_Disable();
  if(OneWire.DataReg & 0x800){
 640:	80 91 44 01 	lds	r24, 0x0144
 644:	90 91 45 01 	lds	r25, 0x0145
 648:	93 ff       	sbrs	r25, 3
 64a:	02 c0       	rjmp	.+4      	; 0x650 <OneWire_Read_Mode_Feedback+0x1c>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 64c:	3d 98       	cbi	0x07, 5	; 7
 64e:	01 c0       	rjmp	.+2      	; 0x652 <OneWire_Read_Mode_Feedback+0x1e>
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 650:	3d 9a       	sbi	0x07, 5	; 7
  if(OneWire.DataReg & 0x800){
	OneWire_TRX_Set_Logic(1);
  }else{
	OneWire_TRX_Set_Logic(0);
  }
  OneWire.DataReg <<= 1;
 652:	80 91 44 01 	lds	r24, 0x0144
 656:	90 91 45 01 	lds	r25, 0x0145
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	90 93 45 01 	sts	0x0145, r25
 662:	80 93 44 01 	sts	0x0144, r24
 666:	1a e6       	ldi	r17, 0x6A	; 106
 668:	81 2f       	mov	r24, r17
 66a:	8a 95       	dec	r24
 66c:	f1 f7       	brne	.-4      	; 0x66a <OneWire_Read_Mode_Feedback+0x36>
  OneWire_Delay_Half_Bit_Time();
  OneWire_Debug_Rx_Pulse(1);
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
 674:	1a 95       	dec	r17
 676:	f1 f7       	brne	.-4      	; 0x674 <OneWire_Read_Mode_Feedback+0x40>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 678:	3d 98       	cbi	0x07, 5	; 7
  OneWire.DataReg <<= 1;
  OneWire_Delay_Half_Bit_Time();
  OneWire_Debug_Rx_Pulse(1);
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Set_Logic(1);
  if(OneWire.BitCounter == (ONEWIRE_FRAME_LEN-1)){
 67a:	80 91 37 01 	lds	r24, 0x0137
 67e:	8b 30       	cpi	r24, 0x0B	; 11
 680:	69 f4       	brne	.+26     	; 0x69c <OneWire_Read_Mode_Feedback+0x68>
    OneWire.TempMode = 0;
 682:	10 92 3f 01 	sts	0x013F, r1
 686:	10 92 3e 01 	sts	0x013E, r1
    OneWire.SelectedMode = 0;
 68a:	10 92 41 01 	sts	0x0141, r1
 68e:	10 92 40 01 	sts	0x0140, r1
	OneWire.DataReady = 0;
 692:	10 92 47 01 	sts	0x0147, r1
	OneWire_Debug_Rx_Pulse(2);
 696:	82 e0       	ldi	r24, 0x02	; 2
 698:	0e 94 14 01 	call	0x228	; 0x228 <OneWire_Debug_Rx_Pulse>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 69c:	80 91 6c 00 	lds	r24, 0x006C
 6a0:	80 62       	ori	r24, 0x20	; 32
 6a2:	80 93 6c 00 	sts	0x006C, r24
    OneWire.SelectedMode = 0;
	OneWire.DataReady = 0;
	OneWire_Debug_Rx_Pulse(2);
  }
  OneWire_TRX_Interrupt_Enable();
}
 6a6:	1f 91       	pop	r17
 6a8:	08 95       	ret

000006aa <OneWire_Bit_Frame_Sample>:



void OneWire_Bit_Frame_Sample(void){

  if( (OneWire.SelectedMode == ONEWIRE_CMD_WRITE) || (OneWire.SelectedMode == 0) ){
 6aa:	80 91 40 01 	lds	r24, 0x0140
 6ae:	90 91 41 01 	lds	r25, 0x0141
 6b2:	80 50       	subi	r24, 0x00	; 0
 6b4:	91 40       	sbci	r25, 0x01	; 1
 6b6:	31 f0       	breq	.+12     	; 0x6c4 <OneWire_Bit_Frame_Sample+0x1a>
 6b8:	80 91 40 01 	lds	r24, 0x0140
 6bc:	90 91 41 01 	lds	r25, 0x0141
 6c0:	89 2b       	or	r24, r25
 6c2:	71 f4       	brne	.+28     	; 0x6e0 <OneWire_Bit_Frame_Sample+0x36>
  
    if(OneWire.BitCounter <= (ONEWIRE_FRAME_LEN-2)){
 6c4:	80 91 37 01 	lds	r24, 0x0137
 6c8:	8b 30       	cpi	r24, 0x0B	; 11
 6ca:	18 f4       	brcc	.+6      	; 0x6d2 <OneWire_Bit_Frame_Sample+0x28>
	  OneWire_Master_Process_Cmd_Data();
 6cc:	0e 94 c9 02 	call	0x592	; 0x592 <OneWire_Master_Process_Cmd_Data>
 6d0:	10 c0       	rjmp	.+32     	; 0x6f2 <OneWire_Bit_Frame_Sample+0x48>
	}
	
	else if(OneWire.BitCounter == (ONEWIRE_FRAME_LEN-1)){
 6d2:	80 91 37 01 	lds	r24, 0x0137
 6d6:	8b 30       	cpi	r24, 0x0B	; 11
 6d8:	61 f4       	brne	.+24     	; 0x6f2 <OneWire_Bit_Frame_Sample+0x48>
	  OneWire_Master_Process_Ack();
 6da:	0e 94 05 03 	call	0x60a	; 0x60a <OneWire_Master_Process_Ack>
 6de:	09 c0       	rjmp	.+18     	; 0x6f2 <OneWire_Bit_Frame_Sample+0x48>
	}
  }
  else if(OneWire.SelectedMode == ONEWIRE_CMD_READ){
 6e0:	80 91 40 01 	lds	r24, 0x0140
 6e4:	90 91 41 01 	lds	r25, 0x0141
 6e8:	80 50       	subi	r24, 0x00	; 0
 6ea:	94 40       	sbci	r25, 0x04	; 4
 6ec:	11 f4       	brne	.+4      	; 0x6f2 <OneWire_Bit_Frame_Sample+0x48>
    OneWire_Read_Mode_Feedback();
 6ee:	0e 94 1a 03 	call	0x634	; 0x634 <OneWire_Read_Mode_Feedback>
  }
  
  
  OneWire.BitCounter++;
 6f2:	80 91 37 01 	lds	r24, 0x0137
 6f6:	8f 5f       	subi	r24, 0xFF	; 255
 6f8:	80 93 37 01 	sts	0x0137, r24
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 6fc:	80 91 37 01 	lds	r24, 0x0137
 700:	8c 30       	cpi	r24, 0x0C	; 12
 702:	40 f0       	brcs	.+16     	; 0x714 <OneWire_Bit_Frame_Sample+0x6a>
  OneWire.DataReady = 0;
  OneWire.SessionEnd = 1;
}

void OneWire_Flush_Bit_Frame(void){
  OneWire.BitFrame = 0;
 704:	10 92 36 01 	sts	0x0136, r1
 708:	10 92 35 01 	sts	0x0135, r1
  OneWire.BitCounter = 0;
 70c:	10 92 37 01 	sts	0x0137, r1
  
  
  OneWire.BitCounter++;
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
    OneWire_Flush_Bit_Frame();
	OneWire_Select_Mode();
 710:	0e 94 86 02 	call	0x50c	; 0x50c <OneWire_Select_Mode>
 714:	08 95       	ret

00000716 <OneWire_Master_Send_Data>:
  }
  OneWire_TRX_Interrupt_Enable();
}


void OneWire_Master_Send_Data(uint8_t *data, uint8_t len){
 716:	ff 92       	push	r15
 718:	0f 93       	push	r16
 71a:	1f 93       	push	r17
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	18 2f       	mov	r17, r24
 722:	09 2f       	mov	r16, r25
 724:	f6 2e       	mov	r15, r22
  OneWire_TRX_Cmd_Data(ONEWIRE_CMD_START, ONEWIRE_OWN_AADR);
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	96 e0       	ldi	r25, 0x06	; 6
 72a:	68 e6       	ldi	r22, 0x68	; 104
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	0e 94 a6 01 	call	0x34c	; 0x34c <OneWire_TRX_Cmd_Data>
  OneWire_TRX_Cmd_Data(ONEWIRE_CMD_WRITE, 0x00);
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	0e 94 a6 01 	call	0x34c	; 0x34c <OneWire_TRX_Cmd_Data>
 73e:	21 2f       	mov	r18, r17
 740:	30 2f       	mov	r19, r16
 742:	c9 01       	movw	r24, r18
 744:	ec 01       	movw	r28, r24
 746:	10 e0       	ldi	r17, 0x00	; 0
 748:	07 c0       	rjmp	.+14     	; 0x758 <OneWire_Master_Send_Data+0x42>
  for(uint8_t i=0;i<len;i++){
    OneWire_TRX_Cmd_Data(ONEWIRE_CMD_CONT,  data[i]);
 74a:	69 91       	ld	r22, Y+
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	0e 94 a6 01 	call	0x34c	; 0x34c <OneWire_TRX_Cmd_Data>


void OneWire_Master_Send_Data(uint8_t *data, uint8_t len){
  OneWire_TRX_Cmd_Data(ONEWIRE_CMD_START, ONEWIRE_OWN_AADR);
  OneWire_TRX_Cmd_Data(ONEWIRE_CMD_WRITE, 0x00);
  for(uint8_t i=0;i<len;i++){
 756:	1f 5f       	subi	r17, 0xFF	; 255
 758:	1f 15       	cp	r17, r15
 75a:	b8 f3       	brcs	.-18     	; 0x74a <OneWire_Master_Send_Data+0x34>
    OneWire_TRX_Cmd_Data(ONEWIRE_CMD_CONT,  data[i]);
  }
  OneWire_TRX_Cmd_Data(ONEWIRE_CMD_STOP , 0x00);
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	93 e0       	ldi	r25, 0x03	; 3
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	0e 94 a6 01 	call	0x34c	; 0x34c <OneWire_TRX_Cmd_Data>
}
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	ff 90       	pop	r15
 772:	08 95       	ret

00000774 <OneWire_Master_Receive_Data>:

uint8_t OneWire_Master_Receive_Data(uint8_t addr){
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	18 2f       	mov	r17, r24
  OneWire_TRX_Cmd_Data(ONEWIRE_CMD_START, ONEWIRE_OWN_AADR);
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	96 e0       	ldi	r25, 0x06	; 6
 780:	68 e6       	ldi	r22, 0x68	; 104
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	0e 94 a6 01 	call	0x34c	; 0x34c <OneWire_TRX_Cmd_Data>
  OneWire_TRX_Cmd_Data(ONEWIRE_CMD_READ , addr);
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	94 e0       	ldi	r25, 0x04	; 4
 78c:	61 2f       	mov	r22, r17
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	0e 94 a6 01 	call	0x34c	; 0x34c <OneWire_TRX_Cmd_Data>
  uint16_t temp0 = OneWire_TRX_Cmd_Data(ONEWIRE_CMD_CONT , 0xFF);
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	6f ef       	ldi	r22, 0xFF	; 255
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	0e 94 a6 01 	call	0x34c	; 0x34c <OneWire_TRX_Cmd_Data>
 7a0:	ec 01       	movw	r28, r24
  uint16_t temp1 = OneWire_TRX_Cmd_Data(ONEWIRE_CMD_STOP , 0x00);
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	93 e0       	ldi	r25, 0x03	; 3
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	0e 94 a6 01 	call	0x34c	; 0x34c <OneWire_TRX_Cmd_Data>
  temp0 >>= 1;
  temp0 &= 0xFF;
  if((temp1 & 0x01) == 1){
 7ae:	80 ff       	sbrs	r24, 0
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <OneWire_Master_Receive_Data+0x44>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <OneWire_Master_Receive_Data+0x4c>
uint8_t OneWire_Master_Receive_Data(uint8_t addr){
  OneWire_TRX_Cmd_Data(ONEWIRE_CMD_START, ONEWIRE_OWN_AADR);
  OneWire_TRX_Cmd_Data(ONEWIRE_CMD_READ , addr);
  uint16_t temp0 = OneWire_TRX_Cmd_Data(ONEWIRE_CMD_CONT , 0xFF);
  uint16_t temp1 = OneWire_TRX_Cmd_Data(ONEWIRE_CMD_STOP , 0x00);
  temp0 >>= 1;
 7b8:	ce 01       	movw	r24, r28
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
  temp0 &= 0xFF;
 7be:	90 70       	andi	r25, 0x00	; 0
  if((temp1 & 0x01) == 1){
    temp0 = 0;
  }
  return temp0;
}
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	08 95       	ret

000007c8 <__vector_4>:





ISR(ONEWIRE_TRX_PCINT_VECT){
 7c8:	1f 92       	push	r1
 7ca:	0f 92       	push	r0
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	0f 92       	push	r0
 7d0:	11 24       	eor	r1, r1
 7d2:	2f 93       	push	r18
 7d4:	3f 93       	push	r19
 7d6:	4f 93       	push	r20
 7d8:	5f 93       	push	r21
 7da:	6f 93       	push	r22
 7dc:	7f 93       	push	r23
 7de:	8f 93       	push	r24
 7e0:	9f 93       	push	r25
 7e2:	af 93       	push	r26
 7e4:	bf 93       	push	r27
 7e6:	ef 93       	push	r30
 7e8:	ff 93       	push	r31
void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
}

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 7ea:	80 91 6c 00 	lds	r24, 0x006C
 7ee:	85 ff       	sbrs	r24, 5
 7f0:	04 c0       	rjmp	.+8      	; 0x7fa <__vector_4+0x32>
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 7f2:	35 99       	sbic	0x06, 5	; 6
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <__vector_4+0x32>
  //TRX Interrupt Fired
  if( OneWire_TRX_Interrupt_Status() == 1){        
	//Falling Edge Interrupt
    if(OneWire_TRX_Falling_Edge_Interrupt() == 1){
	  //handle frame bits and ack
	  OneWire_Bit_Frame_Sample();
 7f6:	0e 94 55 03 	call	0x6aa	; 0x6aa <OneWire_Bit_Frame_Sample>
	}
  }
}
 7fa:	ff 91       	pop	r31
 7fc:	ef 91       	pop	r30
 7fe:	bf 91       	pop	r27
 800:	af 91       	pop	r26
 802:	9f 91       	pop	r25
 804:	8f 91       	pop	r24
 806:	7f 91       	pop	r23
 808:	6f 91       	pop	r22
 80a:	5f 91       	pop	r21
 80c:	4f 91       	pop	r20
 80e:	3f 91       	pop	r19
 810:	2f 91       	pop	r18
 812:	0f 90       	pop	r0
 814:	0f be       	out	0x3f, r0	; 63
 816:	0f 90       	pop	r0
 818:	1f 90       	pop	r1
 81a:	18 95       	reti

0000081c <OneWire_Set_Data_Reg>:


void OneWire_Set_Data_Reg(uint8_t val){
  OneWire.DataReg = val;
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	90 93 45 01 	sts	0x0145, r25
 822:	80 93 44 01 	sts	0x0144, r24
  OneWire.DataReg <<=1;
 826:	80 91 44 01 	lds	r24, 0x0144
 82a:	90 91 45 01 	lds	r25, 0x0145
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	90 93 45 01 	sts	0x0145, r25
 836:	80 93 44 01 	sts	0x0144, r24
  OneWire.DataReg  |= (ONEWIRE_CMD_READ<<1) | 1;
 83a:	80 91 44 01 	lds	r24, 0x0144
 83e:	90 91 45 01 	lds	r25, 0x0145
 842:	81 60       	ori	r24, 0x01	; 1
 844:	98 60       	ori	r25, 0x08	; 8
 846:	90 93 45 01 	sts	0x0145, r25
 84a:	80 93 44 01 	sts	0x0144, r24
}
 84e:	08 95       	ret

00000850 <OneWire_Get_Session_End>:

uint8_t OneWire_Get_Session_End(void){
  return OneWire.SessionEnd;
 850:	80 91 48 01 	lds	r24, 0x0148
}
 854:	08 95       	ret

00000856 <OneWire_Get_Data_Ready>:
  OneWire.DataReg <<=1;
  OneWire.DataReg  |= (ONEWIRE_CMD_READ<<1) | 1;
}

uint8_t OneWire_Get_Session_End(void){
  return OneWire.SessionEnd;
 856:	80 91 48 01 	lds	r24, 0x0148
}

uint8_t OneWire_Get_Data_Ready(void){
  if((OneWire_Get_Session_End() == 1) && (OneWire_Get_Data_Buf_Index() !=0) ){
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	11 f0       	breq	.+4      	; 0x862 <OneWire_Get_Data_Ready+0xc>
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	08 c0       	rjmp	.+16     	; 0x872 <OneWire_Get_Data_Ready+0x1c>
uint8_t OneWire_Get_Data_Buf(uint8_t index){
  return OneWire.DataBuf[index];
}

uint8_t OneWire_Get_Data_Buf_Index(void){
  return OneWire.DataBufCounter;
 862:	80 91 df 01 	lds	r24, 0x01DF
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	88 23       	and	r24, r24
 86a:	09 f4       	brne	.+2      	; 0x86e <OneWire_Get_Data_Ready+0x18>
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	98 27       	eor	r25, r24
    return 1;
  }
  else{
    return 0;
  }
}
 872:	89 2f       	mov	r24, r25
 874:	08 95       	ret

00000876 <OneWire_Get_Data_Buf>:

uint8_t OneWire_Get_Data_Buf(uint8_t index){
  return OneWire.DataBuf[index];
 876:	e5 e3       	ldi	r30, 0x35	; 53
 878:	f1 e0       	ldi	r31, 0x01	; 1
 87a:	e8 0f       	add	r30, r24
 87c:	f1 1d       	adc	r31, r1
 87e:	84 89       	ldd	r24, Z+20	; 0x14
}
 880:	08 95       	ret

00000882 <OneWire_Get_Data_Buf_Index>:

uint8_t OneWire_Get_Data_Buf_Index(void){
  return OneWire.DataBufCounter;
 882:	80 91 df 01 	lds	r24, 0x01DF
}
 886:	08 95       	ret

00000888 <OneWire_Init_Master>:




void OneWire_Init_Master(void){
  OneWire_Struct_Init();
 888:	0e 94 7f 00 	call	0xfe	; 0xfe <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 88c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 890:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <OneWire_TRX_Interrupt_Init>
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 894:	ec e6       	ldi	r30, 0x6C	; 108
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	8f 7d       	andi	r24, 0xDF	; 223
 89c:	80 83       	st	Z, r24
void OneWire_Init_Master(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Disable();
}
 89e:	08 95       	ret

000008a0 <OneWire_Init_Slave>:

void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
 8a0:	0e 94 7f 00 	call	0xfe	; 0xfe <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 8a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 8a8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <OneWire_TRX_Interrupt_Init>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 8ac:	ec e6       	ldi	r30, 0x6C	; 108
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	80 62       	ori	r24, 0x20	; 32
 8b4:	80 83       	st	Z, r24
void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Enable();
 8b6:	08 95       	ret

000008b8 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
 8b8:	10 92 06 01 	sts	0x0106, r1
 8bc:	e7 e0       	ldi	r30, 0x07	; 7
 8be:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
 8c0:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	ef 30       	cpi	r30, 0x0F	; 15
 8c6:	f8 07       	cpc	r31, r24
 8c8:	d9 f7       	brne	.-10     	; 0x8c0 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
 8ca:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
 8cc:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	93 a3       	std	Z+35, r25	; 0x23
 8d4:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
 8d6:	15 a2       	std	Z+37, r1	; 0x25
 8d8:	14 a2       	std	Z+36, r1	; 0x24
 8da:	20 e0       	ldi	r18, 0x00	; 0
 8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
 8de:	ea 5f       	subi	r30, 0xFA	; 250
 8e0:	fe 4f       	sbci	r31, 0xFE	; 254
 8e2:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
 8e4:	2f 5f       	subi	r18, 0xFF	; 255
 8e6:	80 91 31 01 	lds	r24, 0x0131
 8ea:	90 91 32 01 	lds	r25, 0x0132
 8ee:	e2 2f       	mov	r30, r18
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	e8 17       	cp	r30, r24
 8f4:	f9 07       	cpc	r31, r25
 8f6:	98 f3       	brcs	.-26     	; 0x8de <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
 8f8:	08 95       	ret

000008fa <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
 8fa:	08 95       	ret

000008fc <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
 8fc:	08 95       	ret

000008fe <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
 8fe:	9b 01       	movw	r18, r22
 900:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
 902:	60 e4       	ldi	r22, 0x40	; 64
 904:	72 e4       	ldi	r23, 0x42	; 66
 906:	8f e0       	ldi	r24, 0x0F	; 15
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__udivmodsi4>
 90e:	21 50       	subi	r18, 0x01	; 1
 910:	30 40       	sbci	r19, 0x00	; 0
 912:	40 40       	sbci	r20, 0x00	; 0
 914:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
 916:	e0 ec       	ldi	r30, 0xC0	; 192
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	82 60       	ori	r24, 0x02	; 2
 91e:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
 920:	bb 27       	eor	r27, r27
 922:	a5 2f       	mov	r26, r21
 924:	94 2f       	mov	r25, r20
 926:	83 2f       	mov	r24, r19
 928:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
 92c:	20 93 c4 00 	sts	0x00C4, r18
}
 930:	08 95       	ret

00000932 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 932:	e1 ec       	ldi	r30, 0xC1	; 193
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	80 81       	ld	r24, Z
 938:	88 60       	ori	r24, 0x08	; 8
 93a:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 93c:	86 e0       	ldi	r24, 0x06	; 6
 93e:	80 93 c2 00 	sts	0x00C2, r24
}
 942:	08 95       	ret

00000944 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 944:	e1 ec       	ldi	r30, 0xC1	; 193
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	80 81       	ld	r24, Z
 94a:	80 61       	ori	r24, 0x10	; 16
 94c:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 94e:	86 e0       	ldi	r24, 0x06	; 6
 950:	80 93 c2 00 	sts	0x00C2, r24
}
 954:	08 95       	ret

00000956 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 956:	e1 ec       	ldi	r30, 0xC1	; 193
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	80 68       	ori	r24, 0x80	; 128
 95e:	80 83       	st	Z, r24
  sei();
 960:	78 94       	sei
}
 962:	08 95       	ret

00000964 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
 964:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
 966:	80 91 c0 00 	lds	r24, 0x00C0
 96a:	85 ff       	sbrs	r24, 5
 96c:	fc cf       	rjmp	.-8      	; 0x966 <UART_Transmit_Byte+0x2>
  UDR0=val;
 96e:	90 93 c6 00 	sts	0x00C6, r25
}
 972:	08 95       	ret

00000974 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
 974:	df 93       	push	r29
 976:	cf 93       	push	r28
 978:	0f 92       	push	r0
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
 97e:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
 980:	80 91 c0 00 	lds	r24, 0x00C0
 984:	84 ff       	sbrs	r24, 4
 986:	05 c0       	rjmp	.+10     	; 0x992 <UART_Receive_Byte+0x1e>
    val=UDR0;
 988:	80 91 c6 00 	lds	r24, 0x00C6
 98c:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	08 c0       	rjmp	.+16     	; 0x9a2 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
 992:	80 91 c0 00 	lds	r24, 0x00C0
 996:	83 ff       	sbrs	r24, 3
 998:	07 c0       	rjmp	.+14     	; 0x9a8 <UART_Receive_Byte+0x34>
    val=UDR0;
 99a:	80 91 c6 00 	lds	r24, 0x00C6
 99e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
 9a0:	82 e0       	ldi	r24, 0x02	; 2
 9a2:	80 93 06 01 	sts	0x0106, r24
 9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
 9a8:	80 91 c6 00 	lds	r24, 0x00C6
 9ac:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
 9ae:	10 92 06 01 	sts	0x0106, r1
  }
  return val;
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
}
 9b4:	0f 90       	pop	r0
 9b6:	cf 91       	pop	r28
 9b8:	df 91       	pop	r29
 9ba:	08 95       	ret

000009bc <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
 9bc:	80 91 10 01 	lds	r24, 0x0110
}
 9c0:	08 95       	ret

000009c2 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
 9c2:	10 92 10 01 	sts	0x0110, r1
}
 9c6:	08 95       	ret

000009c8 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
 9c8:	1f 93       	push	r17
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	ab 01       	movw	r20, r22
 9d0:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 9d2:	4f 3f       	cpi	r20, 0xFF	; 255
 9d4:	51 05       	cpc	r21, r1
 9d6:	61 05       	cpc	r22, r1
 9d8:	71 05       	cpc	r23, r1
 9da:	09 f0       	breq	.+2      	; 0x9de <UART_Transmit_Byte_Hex+0x16>
 9dc:	28 f4       	brcc	.+10     	; 0x9e8 <UART_Transmit_Byte_Hex+0x20>
 9de:	e8 e0       	ldi	r30, 0x08	; 8
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	c2 e0       	ldi	r28, 0x02	; 2
 9e4:	d0 e0       	ldi	r29, 0x00	; 0
 9e6:	11 c0       	rjmp	.+34     	; 0xa0a <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 9e8:	40 30       	cpi	r20, 0x00	; 0
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	58 07       	cpc	r21, r24
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	68 07       	cpc	r22, r24
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	78 07       	cpc	r23, r24
 9f6:	28 f0       	brcs	.+10     	; 0xa02 <UART_Transmit_Byte_Hex+0x3a>
 9f8:	e0 e2       	ldi	r30, 0x20	; 32
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	c8 e0       	ldi	r28, 0x08	; 8
 9fe:	d0 e0       	ldi	r29, 0x00	; 0
 a00:	04 c0       	rjmp	.+8      	; 0xa0a <UART_Transmit_Byte_Hex+0x42>
 a02:	e0 e1       	ldi	r30, 0x10	; 16
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	c4 e0       	ldi	r28, 0x04	; 4
 a08:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 a0a:	80 91 c0 00 	lds	r24, 0x00C0
 a0e:	85 ff       	sbrs	r24, 5
 a10:	fc cf       	rjmp	.-8      	; 0xa0a <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
 a12:	80 e3       	ldi	r24, 0x30	; 48
 a14:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 a18:	80 91 c0 00 	lds	r24, 0x00C0
 a1c:	85 ff       	sbrs	r24, 5
 a1e:	fc cf       	rjmp	.-8      	; 0xa18 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
 a20:	88 e7       	ldi	r24, 0x78	; 120
 a22:	80 93 c6 00 	sts	0x00C6, r24
 a26:	10 e0       	ldi	r17, 0x00	; 0
 a28:	1f c0       	rjmp	.+62     	; 0xa68 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 a2a:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 a2c:	db 01       	movw	r26, r22
 a2e:	ca 01       	movw	r24, r20
 a30:	0e 2e       	mov	r0, r30
 a32:	04 c0       	rjmp	.+8      	; 0xa3c <UART_Transmit_Byte_Hex+0x74>
 a34:	b6 95       	lsr	r27
 a36:	a7 95       	ror	r26
 a38:	97 95       	ror	r25
 a3a:	87 95       	ror	r24
 a3c:	0a 94       	dec	r0
 a3e:	d2 f7       	brpl	.-12     	; 0xa34 <UART_Transmit_Byte_Hex+0x6c>
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	8f 70       	andi	r24, 0x0F	; 15
 a44:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 a46:	8a 30       	cpi	r24, 0x0A	; 10
 a48:	91 05       	cpc	r25, r1
 a4a:	20 f0       	brcs	.+8      	; 0xa54 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
 a4c:	9c 01       	movw	r18, r24
 a4e:	29 5c       	subi	r18, 0xC9	; 201
 a50:	3f 4f       	sbci	r19, 0xFF	; 255
 a52:	03 c0       	rjmp	.+6      	; 0xa5a <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
 a54:	9c 01       	movw	r18, r24
 a56:	20 5d       	subi	r18, 0xD0	; 208
 a58:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 a5a:	80 91 c0 00 	lds	r24, 0x00C0
 a5e:	85 ff       	sbrs	r24, 5
 a60:	fc cf       	rjmp	.-8      	; 0xa5a <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
 a62:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 a66:	1f 5f       	subi	r17, 0xFF	; 255
 a68:	81 2f       	mov	r24, r17
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	8c 17       	cp	r24, r28
 a6e:	9d 07       	cpc	r25, r29
 a70:	e0 f2       	brcs	.-72     	; 0xa2a <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	1f 91       	pop	r17
 a78:	08 95       	ret

00000a7a <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
 a7a:	cf 92       	push	r12
 a7c:	df 92       	push	r13
 a7e:	ef 92       	push	r14
 a80:	ff 92       	push	r15
 a82:	0f 93       	push	r16
 a84:	1f 93       	push	r17
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	ab 01       	movw	r20, r22
 a8c:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 a8e:	4f 3f       	cpi	r20, 0xFF	; 255
 a90:	51 05       	cpc	r21, r1
 a92:	61 05       	cpc	r22, r1
 a94:	71 05       	cpc	r23, r1
 a96:	09 f0       	breq	.+2      	; 0xa9a <UART_Transmit_Byte_Bin+0x20>
 a98:	10 f4       	brcc	.+4      	; 0xa9e <UART_Transmit_Byte_Bin+0x24>
 a9a:	97 e0       	ldi	r25, 0x07	; 7
 a9c:	0b c0       	rjmp	.+22     	; 0xab4 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 a9e:	40 30       	cpi	r20, 0x00	; 0
 aa0:	80 e0       	ldi	r24, 0x00	; 0
 aa2:	58 07       	cpc	r21, r24
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	68 07       	cpc	r22, r24
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	78 07       	cpc	r23, r24
 aac:	10 f0       	brcs	.+4      	; 0xab2 <UART_Transmit_Byte_Bin+0x38>
 aae:	9f e1       	ldi	r25, 0x1F	; 31
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <UART_Transmit_Byte_Bin+0x3a>
 ab2:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 ab4:	80 91 c0 00 	lds	r24, 0x00C0
 ab8:	85 ff       	sbrs	r24, 5
 aba:	fc cf       	rjmp	.-8      	; 0xab4 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
 abc:	80 e3       	ldi	r24, 0x30	; 48
 abe:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 ac2:	80 91 c0 00 	lds	r24, 0x00C0
 ac6:	85 ff       	sbrs	r24, 5
 ac8:	fc cf       	rjmp	.-8      	; 0xac2 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
 aca:	82 e6       	ldi	r24, 0x62	; 98
 acc:	80 93 c6 00 	sts	0x00C6, r24
 ad0:	20 e0       	ldi	r18, 0x00	; 0
 ad2:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
 ad4:	e9 2f       	mov	r30, r25
 ad6:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 ad8:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 ada:	11 e3       	ldi	r17, 0x31	; 49
 adc:	ef 01       	movw	r28, r30
 ade:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
 ae0:	cf 01       	movw	r24, r30
 ae2:	82 1b       	sub	r24, r18
 ae4:	93 0b       	sbc	r25, r19
 ae6:	6a 01       	movw	r12, r20
 ae8:	7b 01       	movw	r14, r22
 aea:	04 c0       	rjmp	.+8      	; 0xaf4 <UART_Transmit_Byte_Bin+0x7a>
 aec:	f6 94       	lsr	r15
 aee:	e7 94       	ror	r14
 af0:	d7 94       	ror	r13
 af2:	c7 94       	ror	r12
 af4:	8a 95       	dec	r24
 af6:	d2 f7       	brpl	.-12     	; 0xaec <UART_Transmit_Byte_Bin+0x72>
 af8:	d7 01       	movw	r26, r14
 afa:	c6 01       	movw	r24, r12
 afc:	81 70       	andi	r24, 0x01	; 1
 afe:	90 70       	andi	r25, 0x00	; 0
 b00:	89 2b       	or	r24, r25
 b02:	39 f0       	breq	.+14     	; 0xb12 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 b04:	80 91 c0 00 	lds	r24, 0x00C0
 b08:	85 ff       	sbrs	r24, 5
 b0a:	fc cf       	rjmp	.-8      	; 0xb04 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
 b0c:	10 93 c6 00 	sts	0x00C6, r17
 b10:	06 c0       	rjmp	.+12     	; 0xb1e <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 b12:	80 91 c0 00 	lds	r24, 0x00C0
 b16:	85 ff       	sbrs	r24, 5
 b18:	fc cf       	rjmp	.-8      	; 0xb12 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
 b1a:	00 93 c6 00 	sts	0x00C6, r16
 b1e:	2f 5f       	subi	r18, 0xFF	; 255
 b20:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 b22:	2c 17       	cp	r18, r28
 b24:	3d 07       	cpc	r19, r29
 b26:	e1 f6       	brne	.-72     	; 0xae0 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
 b28:	df 91       	pop	r29
 b2a:	cf 91       	pop	r28
 b2c:	1f 91       	pop	r17
 b2e:	0f 91       	pop	r16
 b30:	ff 90       	pop	r15
 b32:	ef 90       	pop	r14
 b34:	df 90       	pop	r13
 b36:	cf 90       	pop	r12
 b38:	08 95       	ret

00000b3a <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
 b3a:	ac 01       	movw	r20, r24
 b3c:	20 e0       	ldi	r18, 0x00	; 0
 b3e:	07 c0       	rjmp	.+14     	; 0xb4e <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 b40:	80 91 c0 00 	lds	r24, 0x00C0
 b44:	85 ff       	sbrs	r24, 5
 b46:	fc cf       	rjmp	.-8      	; 0xb40 <UART_Transmit_Text+0x6>
  UDR0=val;
 b48:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
 b4c:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 b4e:	fa 01       	movw	r30, r20
 b50:	e2 0f       	add	r30, r18
 b52:	f1 1d       	adc	r31, r1
 b54:	e0 81       	ld	r30, Z
 b56:	ee 23       	and	r30, r30
 b58:	99 f7       	brne	.-26     	; 0xb40 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
 b5a:	08 95       	ret

00000b5c <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	91 e0       	ldi	r25, 0x01	; 1
 b60:	0e 94 9d 05 	call	0xb3a	; 0xb3a <UART_Transmit_Text>
}
 b64:	08 95       	ret

00000b66 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
 b66:	83 e0       	ldi	r24, 0x03	; 3
 b68:	91 e0       	ldi	r25, 0x01	; 1
 b6a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <UART_Transmit_Text>
}
 b6e:	08 95       	ret

00000b70 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
 b70:	bf 92       	push	r11
 b72:	cf 92       	push	r12
 b74:	df 92       	push	r13
 b76:	ef 92       	push	r14
 b78:	ff 92       	push	r15
 b7a:	0f 93       	push	r16
 b7c:	1f 93       	push	r17
 b7e:	6b 01       	movw	r12, r22
 b80:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 b82:	61 15       	cp	r22, r1
 b84:	71 05       	cpc	r23, r1
 b86:	81 05       	cpc	r24, r1
 b88:	91 05       	cpc	r25, r1
 b8a:	31 f4       	brne	.+12     	; 0xb98 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
 b8c:	10 92 07 01 	sts	0x0107, r1
    UART.InputNumberDigits=1;
 b90:	81 e0       	ldi	r24, 0x01	; 1
 b92:	80 93 0f 01 	sts	0x010F, r24
 b96:	23 c0       	rjmp	.+70     	; 0xbde <UART_Determine_Digit_Numbers+0x6e>
 b98:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
 b9a:	0b 2d       	mov	r16, r11
 b9c:	10 e0       	ldi	r17, 0x00	; 0
 b9e:	0a 5f       	subi	r16, 0xFA	; 250
 ba0:	1e 4f       	sbci	r17, 0xFE	; 254
 ba2:	c7 01       	movw	r24, r14
 ba4:	b6 01       	movw	r22, r12
 ba6:	2a e0       	ldi	r18, 0x0A	; 10
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	40 e0       	ldi	r20, 0x00	; 0
 bac:	50 e0       	ldi	r21, 0x00	; 0
 bae:	0e 94 c3 06 	call	0xd86	; 0xd86 <__udivmodsi4>
 bb2:	f8 01       	movw	r30, r16
 bb4:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
 bb6:	c7 01       	movw	r24, r14
 bb8:	b6 01       	movw	r22, r12
 bba:	2a e0       	ldi	r18, 0x0A	; 10
 bbc:	30 e0       	ldi	r19, 0x00	; 0
 bbe:	40 e0       	ldi	r20, 0x00	; 0
 bc0:	50 e0       	ldi	r21, 0x00	; 0
 bc2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__udivmodsi4>
 bc6:	c9 01       	movw	r24, r18
 bc8:	da 01       	movw	r26, r20
 bca:	6c 01       	movw	r12, r24
 bcc:	7d 01       	movw	r14, r26
      i++;
 bce:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
 bd0:	c1 14       	cp	r12, r1
 bd2:	d1 04       	cpc	r13, r1
 bd4:	e1 04       	cpc	r14, r1
 bd6:	f1 04       	cpc	r15, r1
 bd8:	01 f7       	brne	.-64     	; 0xb9a <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
 bda:	b0 92 0f 01 	sts	0x010F, r11
  }
}
 bde:	1f 91       	pop	r17
 be0:	0f 91       	pop	r16
 be2:	ff 90       	pop	r15
 be4:	ef 90       	pop	r14
 be6:	df 90       	pop	r13
 be8:	cf 90       	pop	r12
 bea:	bf 90       	pop	r11
 bec:	08 95       	ret

00000bee <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 bee:	e0 91 0f 01 	lds	r30, 0x010F
 bf2:	0f c0       	rjmp	.+30     	; 0xc12 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
 bf4:	2e 2f       	mov	r18, r30
 bf6:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
 bf8:	e2 2f       	mov	r30, r18
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	ea 5f       	subi	r30, 0xFA	; 250
 bfe:	fe 4f       	sbci	r31, 0xFE	; 254
 c00:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 c02:	80 91 c0 00 	lds	r24, 0x00C0
 c06:	85 ff       	sbrs	r24, 5
 c08:	fc cf       	rjmp	.-8      	; 0xc02 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
 c0a:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 c0c:	90 93 c6 00 	sts	0x00C6, r25
 c10:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 c12:	ee 23       	and	r30, r30
 c14:	79 f7       	brne	.-34     	; 0xbf4 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
 c16:	08 95       	ret

00000c18 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
 c18:	9b 01       	movw	r18, r22
 c1a:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 c1c:	97 ff       	sbrs	r25, 7
 c1e:	0e c0       	rjmp	.+28     	; 0xc3c <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 c20:	80 91 c0 00 	lds	r24, 0x00C0
 c24:	85 ff       	sbrs	r24, 5
 c26:	fc cf       	rjmp	.-8      	; 0xc20 <UART_Transmit_Number+0x8>
  UDR0=val;
 c28:	8d e2       	ldi	r24, 0x2D	; 45
 c2a:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 c2e:	50 95       	com	r21
 c30:	40 95       	com	r20
 c32:	30 95       	com	r19
 c34:	21 95       	neg	r18
 c36:	3f 4f       	sbci	r19, 0xFF	; 255
 c38:	4f 4f       	sbci	r20, 0xFF	; 255
 c3a:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 c3c:	ca 01       	movw	r24, r20
 c3e:	b9 01       	movw	r22, r18
 c40:	0e 94 b8 05 	call	0xb70	; 0xb70 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
 c44:	0e 94 f7 05 	call	0xbee	; 0xbee <UART_Transmit_Number_Digits>
}
 c48:	08 95       	ret

00000c4a <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
 c4a:	fc 01       	movw	r30, r24
 c4c:	ea 5f       	subi	r30, 0xFA	; 250
 c4e:	fe 4f       	sbci	r31, 0xFE	; 254
 c50:	83 85       	ldd	r24, Z+11	; 0x0b
}
 c52:	08 95       	ret

00000c54 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
 c54:	20 91 33 01 	lds	r18, 0x0133
 c58:	30 91 34 01 	lds	r19, 0x0134
}
 c5c:	c9 01       	movw	r24, r18
 c5e:	08 95       	ret

00000c60 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
 c60:	10 92 06 01 	sts	0x0106, r1
 c64:	20 e0       	ldi	r18, 0x00	; 0
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	06 c0       	rjmp	.+12     	; 0xc76 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
 c6a:	f9 01       	movw	r30, r18
 c6c:	ea 5f       	subi	r30, 0xFA	; 250
 c6e:	fe 4f       	sbci	r31, 0xFE	; 254
 c70:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
 c72:	2f 5f       	subi	r18, 0xFF	; 255
 c74:	3f 4f       	sbci	r19, 0xFF	; 255
 c76:	80 91 31 01 	lds	r24, 0x0131
 c7a:	90 91 32 01 	lds	r25, 0x0132
 c7e:	28 17       	cp	r18, r24
 c80:	39 07       	cpc	r19, r25
 c82:	98 f3       	brcs	.-26     	; 0xc6a <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
 c84:	10 92 34 01 	sts	0x0134, r1
 c88:	10 92 33 01 	sts	0x0133, r1
  #endif
}
 c8c:	08 95       	ret

00000c8e <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
 c8e:	df 93       	push	r29
 c90:	cf 93       	push	r28
 c92:	0f 92       	push	r0
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
 c98:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
 c9a:	0e 94 ba 04 	call	0x974	; 0x974 <UART_Receive_Byte>
 c9e:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
 ca0:	80 91 06 01 	lds	r24, 0x0106
 ca4:	88 23       	and	r24, r24
 ca6:	19 f5       	brne	.+70     	; 0xcee <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
 ca8:	89 81       	ldd	r24, Y+1	; 0x01
 caa:	80 93 10 01 	sts	0x0110, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
 cae:	e0 91 33 01 	lds	r30, 0x0133
 cb2:	f0 91 34 01 	lds	r31, 0x0134
 cb6:	89 81       	ldd	r24, Y+1	; 0x01
 cb8:	ea 5f       	subi	r30, 0xFA	; 250
 cba:	fe 4f       	sbci	r31, 0xFE	; 254
 cbc:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
 cbe:	80 91 33 01 	lds	r24, 0x0133
 cc2:	90 91 34 01 	lds	r25, 0x0134
 cc6:	01 96       	adiw	r24, 0x01	; 1
 cc8:	90 93 34 01 	sts	0x0134, r25
 ccc:	80 93 33 01 	sts	0x0133, r24

    if(UART.BufferIndex>=UART.BufferSize){
 cd0:	20 91 33 01 	lds	r18, 0x0133
 cd4:	30 91 34 01 	lds	r19, 0x0134
 cd8:	80 91 31 01 	lds	r24, 0x0131
 cdc:	90 91 32 01 	lds	r25, 0x0132
 ce0:	28 17       	cp	r18, r24
 ce2:	39 07       	cpc	r19, r25
 ce4:	20 f0       	brcs	.+8      	; 0xcee <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
 ce6:	10 92 34 01 	sts	0x0134, r1
 cea:	10 92 33 01 	sts	0x0133, r1
    }
  }
}
 cee:	0f 90       	pop	r0
 cf0:	cf 91       	pop	r28
 cf2:	df 91       	pop	r29
 cf4:	08 95       	ret

00000cf6 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
 cf6:	1f 92       	push	r1
 cf8:	0f 92       	push	r0
 cfa:	0f b6       	in	r0, 0x3f	; 63
 cfc:	0f 92       	push	r0
 cfe:	11 24       	eor	r1, r1
 d00:	2f 93       	push	r18
 d02:	3f 93       	push	r19
 d04:	4f 93       	push	r20
 d06:	5f 93       	push	r21
 d08:	6f 93       	push	r22
 d0a:	7f 93       	push	r23
 d0c:	8f 93       	push	r24
 d0e:	9f 93       	push	r25
 d10:	af 93       	push	r26
 d12:	bf 93       	push	r27
 d14:	ef 93       	push	r30
 d16:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
 d18:	0e 94 47 06 	call	0xc8e	; 0xc8e <UART_Interrupt_Service_Routine>
}
 d1c:	ff 91       	pop	r31
 d1e:	ef 91       	pop	r30
 d20:	bf 91       	pop	r27
 d22:	af 91       	pop	r26
 d24:	9f 91       	pop	r25
 d26:	8f 91       	pop	r24
 d28:	7f 91       	pop	r23
 d2a:	6f 91       	pop	r22
 d2c:	5f 91       	pop	r21
 d2e:	4f 91       	pop	r20
 d30:	3f 91       	pop	r19
 d32:	2f 91       	pop	r18
 d34:	0f 90       	pop	r0
 d36:	0f be       	out	0x3f, r0	; 63
 d38:	0f 90       	pop	r0
 d3a:	1f 90       	pop	r1
 d3c:	18 95       	reti

00000d3e <UART_Init>:
#endif



void UART_Init(uint32_t baud){
 d3e:	ef 92       	push	r14
 d40:	ff 92       	push	r15
 d42:	0f 93       	push	r16
 d44:	1f 93       	push	r17
 d46:	7b 01       	movw	r14, r22
 d48:	8c 01       	movw	r16, r24
  UART_Struct_Init();
 d4a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
 d4e:	c8 01       	movw	r24, r16
 d50:	b7 01       	movw	r22, r14
 d52:	0e 94 7f 04 	call	0x8fe	; 0x8fe <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 d56:	e1 ec       	ldi	r30, 0xC1	; 193
 d58:	f0 e0       	ldi	r31, 0x00	; 0
 d5a:	80 81       	ld	r24, Z
 d5c:	88 60       	ori	r24, 0x08	; 8
 d5e:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 d60:	a2 ec       	ldi	r26, 0xC2	; 194
 d62:	b0 e0       	ldi	r27, 0x00	; 0
 d64:	96 e0       	ldi	r25, 0x06	; 6
 d66:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 d68:	80 81       	ld	r24, Z
 d6a:	80 61       	ori	r24, 0x10	; 16
 d6c:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 d6e:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 d70:	80 81       	ld	r24, Z
 d72:	80 68       	ori	r24, 0x80	; 128
 d74:	80 83       	st	Z, r24
  sei();
 d76:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
 d78:	0e 94 30 06 	call	0xc60	; 0xc60 <UART_Flush_Buffer>
}
 d7c:	1f 91       	pop	r17
 d7e:	0f 91       	pop	r16
 d80:	ff 90       	pop	r15
 d82:	ef 90       	pop	r14
 d84:	08 95       	ret

00000d86 <__udivmodsi4>:
 d86:	a1 e2       	ldi	r26, 0x21	; 33
 d88:	1a 2e       	mov	r1, r26
 d8a:	aa 1b       	sub	r26, r26
 d8c:	bb 1b       	sub	r27, r27
 d8e:	fd 01       	movw	r30, r26
 d90:	0d c0       	rjmp	.+26     	; 0xdac <__udivmodsi4_ep>

00000d92 <__udivmodsi4_loop>:
 d92:	aa 1f       	adc	r26, r26
 d94:	bb 1f       	adc	r27, r27
 d96:	ee 1f       	adc	r30, r30
 d98:	ff 1f       	adc	r31, r31
 d9a:	a2 17       	cp	r26, r18
 d9c:	b3 07       	cpc	r27, r19
 d9e:	e4 07       	cpc	r30, r20
 da0:	f5 07       	cpc	r31, r21
 da2:	20 f0       	brcs	.+8      	; 0xdac <__udivmodsi4_ep>
 da4:	a2 1b       	sub	r26, r18
 da6:	b3 0b       	sbc	r27, r19
 da8:	e4 0b       	sbc	r30, r20
 daa:	f5 0b       	sbc	r31, r21

00000dac <__udivmodsi4_ep>:
 dac:	66 1f       	adc	r22, r22
 dae:	77 1f       	adc	r23, r23
 db0:	88 1f       	adc	r24, r24
 db2:	99 1f       	adc	r25, r25
 db4:	1a 94       	dec	r1
 db6:	69 f7       	brne	.-38     	; 0xd92 <__udivmodsi4_loop>
 db8:	60 95       	com	r22
 dba:	70 95       	com	r23
 dbc:	80 95       	com	r24
 dbe:	90 95       	com	r25
 dc0:	9b 01       	movw	r18, r22
 dc2:	ac 01       	movw	r20, r24
 dc4:	bd 01       	movw	r22, r26
 dc6:	cf 01       	movw	r24, r30
 dc8:	08 95       	ret

00000dca <_exit>:
 dca:	f8 94       	cli

00000dcc <__stop_program>:
 dcc:	ff cf       	rjmp	.-2      	; 0xdcc <__stop_program>
