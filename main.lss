
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000001cd  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000814  00000000  00000000  0000041f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000270  00000000  00000000  00000c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004a9  00000000  00000000  00000ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000120  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000263  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000fa  00000000  00000000  000016cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000168  00000000  00000000  000017c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "onewire.h"


int main(void){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  

  OneWire_Init();
  84:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <OneWire_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  88:	cc e2       	ldi	r28, 0x2C	; 44
  8a:	d1 e0       	ldi	r29, 0x01	; 1
  uint16_t return_val = 0;
  
  while(1){
      
	  
	  OneWire_TRX_Byte( temp );
  8c:	8a ea       	ldi	r24, 0xAA	; 170
  8e:	9a e0       	ldi	r25, 0x0A	; 10
  90:	0e 94 9d 00 	call	0x13a	; 0x13a <OneWire_TRX_Byte>
	  OneWire_TRX_Byte( temp );
  94:	8a ea       	ldi	r24, 0xAA	; 170
  96:	9a e0       	ldi	r25, 0x0A	; 10
  98:	0e 94 9d 00 	call	0x13a	; 0x13a <OneWire_TRX_Byte>
  9c:	88 e8       	ldi	r24, 0x88	; 136
  9e:	93 e1       	ldi	r25, 0x13	; 19
  a0:	fe 01       	movw	r30, r28
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d9 f7       	brne	.-10     	; 0xa0 <main+0x20>
  aa:	f0 cf       	rjmp	.-32     	; 0x8c <main+0xc>

000000ac <OneWire_Struct_Init>:

void OneWire_Struct_Init(void){
  
  
  
}
  ac:	08 95       	ret

000000ae <OneWire_TRX_Set_DDR>:




void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
  ae:	88 23       	and	r24, r24
  b0:	11 f4       	brne	.+4      	; 0xb6 <OneWire_TRX_Set_DDR+0x8>
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  b2:	20 98       	cbi	0x04, 0	; 4
  b4:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
  b6:	20 9a       	sbi	0x04, 0	; 4
  b8:	08 95       	ret

000000ba <OneWire_TRX_Set_Port>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
  ba:	88 23       	and	r24, r24
  bc:	11 f4       	brne	.+4      	; 0xc2 <OneWire_TRX_Set_Port+0x8>
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
  be:	28 98       	cbi	0x05, 0	; 5
  c0:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  c2:	28 9a       	sbi	0x05, 0	; 5
  c4:	08 95       	ret

000000c6 <OneWire_TRX_Get_Input_State>:
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
  c6:	83 b1       	in	r24, 0x03	; 3
    return 1;
  }
  else{
    return 0;
  }
}
  c8:	81 70       	andi	r24, 0x01	; 1
  ca:	08 95       	ret

000000cc <OneWire_TRX_Set_Logic>:

void OneWire_TRX_Set_Logic(uint8_t state){
  if(state == 0){
  cc:	88 23       	and	r24, r24
  ce:	11 f4       	brne	.+4      	; 0xd4 <OneWire_TRX_Set_Logic+0x8>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
  d0:	20 9a       	sbi	0x04, 0	; 4
  d2:	08 95       	ret



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  d4:	20 98       	cbi	0x04, 0	; 4
  d6:	08 95       	ret

000000d8 <OneWire_TRX_GPIO_Init>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
  d8:	28 98       	cbi	0x05, 0	; 5



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  da:	20 98       	cbi	0x04, 0	; 4
  OneWire_TRX_Set_Port(0);
  OneWire_TRX_Set_DDR(0);
  OneWire_TRX_Set_Logic(1);
  
  #ifdef ONEWIRE_DEBUG_ENABLE
  ONEWIRE_DEBUG_DDR  |= (1<<ONEWIRE_DEBUG_BP);
  dc:	20 98       	cbi	0x04, 0	; 4
  de:	3d 9a       	sbi	0x07, 5	; 7
  ONEWIRE_DEBUG_PORT &=~(1<<ONEWIRE_DEBUG_BP);
  e0:	45 98       	cbi	0x08, 5	; 8
  #endif
}
  e2:	08 95       	ret

000000e4 <OneWire_TRX_Interrupt_Init>:
  #define ONEWIRE_TRX_PCMSK      PCMSK2
  #define ONEWIRE_TRX_PCIF       PCIF2
  #define ONEWIRE_TRX_PCINT_VECT PCINT2_vect
  #endif
  
  PCICR             |= (1<<ONEWIRE_TRX_PCIE);
  e4:	e8 e6       	ldi	r30, 0x68	; 104
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24
  PCIFR             |= (1<<ONEWIRE_TRX_PCIF);
  ee:	d8 9a       	sbi	0x1b, 0	; 27
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
  f0:	eb e6       	ldi	r30, 0x6B	; 107
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
  
  sei();
  fa:	78 94       	sei
}
  fc:	08 95       	ret

000000fe <OneWire_TRX_Interrupt_Enable>:



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
  fe:	eb e6       	ldi	r30, 0x6B	; 107
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24
}
 108:	08 95       	ret

0000010a <OneWire_TRX_Interrupt_Disable>:

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 10a:	eb e6       	ldi	r30, 0x6B	; 107
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	80 83       	st	Z, r24
}
 114:	08 95       	ret

00000116 <OneWire_Debug_Pulse>:



void OneWire_Debug_Pulse(void){
  #ifdef ONEWIRE_DEBUG_ENABLE
  ONEWIRE_DEBUG_PORT |= (1<<ONEWIRE_DEBUG_BP);
 116:	45 9a       	sbi	0x08, 5	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <OneWire_Debug_Pulse+0x4>
  _delay_us(1);
  ONEWIRE_DEBUG_PORT &=~(1<<ONEWIRE_DEBUG_BP);
 11e:	45 98       	cbi	0x08, 5	; 8
  #endif
}
 120:	08 95       	ret

00000122 <OneWire_Delay_Clock_Low_Time>:
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <OneWire_Delay_Clock_Low_Time+0x2>



void OneWire_Delay_Clock_Low_Time(void){
  _delay_us(ONEWIRE_CLK_LOW);
}
 128:	08 95       	ret

0000012a <OneWire_Delay_Clock_High_Time>:
 12a:	88 e2       	ldi	r24, 0x28	; 40
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <OneWire_Delay_Clock_High_Time+0x2>

void OneWire_Delay_Clock_High_Time(void){
  _delay_us(ONEWIRE_CLK_HIGH);
}
 130:	08 95       	ret

00000132 <OneWire_Delay_Half_Bit_Time>:
 132:	80 e5       	ldi	r24, 0x50	; 80
 134:	8a 95       	dec	r24
 136:	f1 f7       	brne	.-4      	; 0x134 <OneWire_Delay_Half_Bit_Time+0x2>

void OneWire_Delay_Half_Bit_Time(void){
  _delay_us(ONEWIRE_CLK_HBIT);
}
 138:	08 95       	ret

0000013a <OneWire_TRX_Byte>:




uint16_t OneWire_TRX_Byte(uint16_t val){
 13a:	ac 01       	movw	r20, r24
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 13c:	80 91 6b 00 	lds	r24, 0x006B
 140:	8e 7f       	andi	r24, 0xFE	; 254
 142:	80 93 6b 00 	sts	0x006B, r24
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	e8 e2       	ldi	r30, 0x28	; 40
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 14e:	70 e5       	ldi	r23, 0x50	; 80
 150:	f4 e0       	ldi	r31, 0x04	; 4
 152:	20 9a       	sbi	0x04, 0	; 4
 154:	8e 2f       	mov	r24, r30
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <OneWire_TRX_Byte+0x1c>
	//Initial Logic Low
	OneWire_TRX_Set_Logic(0);
    OneWire_Delay_Clock_Low_Time();
	
	//Data Controlled By Master
	if(i < 11){
 15a:	6b 30       	cpi	r22, 0x0B	; 11
 15c:	21 f0       	breq	.+8      	; 0x166 <OneWire_TRX_Byte+0x2c>
      if(val & 0x800){
 15e:	53 fd       	sbrc	r21, 3
 160:	02 c0       	rjmp	.+4      	; 0x166 <OneWire_TRX_Byte+0x2c>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 162:	20 9a       	sbi	0x04, 0	; 4
 164:	01 c0       	rjmp	.+2      	; 0x168 <OneWire_TRX_Byte+0x2e>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 166:	20 98       	cbi	0x04, 0	; 4
 168:	87 2f       	mov	r24, r23
 16a:	8a 95       	dec	r24
 16c:	f1 f7       	brne	.-4      	; 0x16a <OneWire_TRX_Byte+0x30>



void OneWire_Debug_Pulse(void){
  #ifdef ONEWIRE_DEBUG_ENABLE
  ONEWIRE_DEBUG_PORT |= (1<<ONEWIRE_DEBUG_BP);
 16e:	45 9a       	sbi	0x08, 5	; 8
 170:	8f 2f       	mov	r24, r31
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <OneWire_TRX_Byte+0x38>
  _delay_us(1);
  ONEWIRE_DEBUG_PORT &=~(1<<ONEWIRE_DEBUG_BP);
 176:	45 98       	cbi	0x08, 5	; 8
	}
	
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Pulse();
	rx_val <<= 1;
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 17c:	83 b1       	in	r24, 0x03	; 3
	
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Pulse();
	rx_val <<= 1;
	rx_val |= OneWire_TRX_Get_Input_State();
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	81 70       	andi	r24, 0x01	; 1
 182:	90 70       	andi	r25, 0x00	; 0
 184:	28 2b       	or	r18, r24
 186:	39 2b       	or	r19, r25
 188:	87 2f       	mov	r24, r23
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <OneWire_TRX_Byte+0x50>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 18e:	20 98       	cbi	0x04, 0	; 4
 190:	8e 2f       	mov	r24, r30
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <OneWire_TRX_Byte+0x58>
  
  OneWire_TRX_Interrupt_Disable();
  
  uint16_t rx_val=0;
  
  for(uint8_t i=0;i<12;i++){
 196:	6f 5f       	subi	r22, 0xFF	; 255
 198:	6c 30       	cpi	r22, 0x0C	; 12
 19a:	19 f0       	breq	.+6      	; 0x1a2 <OneWire_TRX_Byte+0x68>
	//Leave For Ack
	else{
	  OneWire_TRX_Set_Logic(1);
	}
	
	val <<= 1;
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	d8 cf       	rjmp	.-80     	; 0x152 <OneWire_TRX_Byte+0x18>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 1a2:	80 91 6b 00 	lds	r24, 0x006B
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	80 93 6b 00 	sts	0x006B, r24
  }
  
  OneWire_TRX_Interrupt_Enable();
  
  return rx_val;
}
 1ac:	c9 01       	movw	r24, r18
 1ae:	08 95       	ret

000001b0 <OneWire_Init>:



void OneWire_Init(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
 1b0:	0e 94 6c 00 	call	0xd8	; 0xd8 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 1b4:	0e 94 72 00 	call	0xe4	; 0xe4 <OneWire_TRX_Interrupt_Init>
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
