
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000ff  00800100  00800100  00000612  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000038e  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e0e  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002f3  00000000  00000000  000017ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000849  00000000  00000000  00001ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000210  00000000  00000000  0000232c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000474  00000000  00000000  0000253c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000012c  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	af 3f       	cpi	r26, 0xFF	; 255
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 cd 02 	jmp	0x59a	; 0x59a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
  uint16_t Act_Data   = ONEWIRE_STOP_CMD  | ONEWIRE_READ_CMD | 1;
  uint8_t  addr_inc   = 0;
  #endif
  
  #ifdef RX_MODE
  OneWire_Init_Slave();
  90:	0e 94 c1 02 	call	0x582	; 0x582 <OneWire_Init_Slave>
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0x4>

00000096 <OneWire_Struct_Init>:
}onewire_t;

onewire_t OneWire;

void OneWire_Struct_Init(void){
  OneWire.BitCounter = 0;
  96:	10 92 00 01 	sts	0x0100, r1
  OneWire.FrameVal = 0;
  9a:	10 92 02 01 	sts	0x0102, r1
  9e:	10 92 01 01 	sts	0x0101, r1
  OneWire.FrameCounter = 0;
  a2:	10 92 04 01 	sts	0x0104, r1
  a6:	10 92 03 01 	sts	0x0103, r1
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
    OneWire.FrameBuf[i] = 0;
  ae:	fc 01       	movw	r30, r24
  b0:	ee 0f       	add	r30, r30
  b2:	ff 1f       	adc	r31, r31
  b4:	e0 50       	subi	r30, 0x00	; 0
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	16 82       	std	Z+6, r1	; 0x06
  ba:	15 82       	std	Z+5, r1	; 0x05
  bc:	01 96       	adiw	r24, 0x01	; 1

void OneWire_Struct_Init(void){
  OneWire.BitCounter = 0;
  OneWire.FrameVal = 0;
  OneWire.FrameCounter = 0;
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
  be:	88 37       	cpi	r24, 0x78	; 120
  c0:	91 05       	cpc	r25, r1
  c2:	a9 f7       	brne	.-22     	; 0xae <OneWire_Struct_Init+0x18>
    OneWire.FrameBuf[i] = 0;
  }
  OneWire.FrameBufIndex = 0;
  c4:	10 92 f5 01 	sts	0x01F5, r1
  OneWire.CmdReceived = 0;
  c8:	10 92 f6 01 	sts	0x01F6, r1
  OneWire.CmdVal = 0;
  cc:	10 92 f8 01 	sts	0x01F8, r1
  d0:	10 92 f7 01 	sts	0x01F7, r1
  OneWire.CmdValReg = 0;
  d4:	10 92 fa 01 	sts	0x01FA, r1
  d8:	10 92 f9 01 	sts	0x01F9, r1
  OneWire.FeedbackData = 0;
  dc:	10 92 fc 01 	sts	0x01FC, r1
  e0:	10 92 fb 01 	sts	0x01FB, r1
  OneWire.FeedbackDataLoaded = 0;
  e4:	10 92 fd 01 	sts	0x01FD, r1
  OneWire.FeedbackCounter = 0;
  e8:	10 92 fe 01 	sts	0x01FE, r1
}
  ec:	08 95       	ret

000000ee <OneWire_Flush_Frame>:

void OneWire_Flush_Frame(void){
  OneWire.BitCounter = 0;
  ee:	10 92 00 01 	sts	0x0100, r1
  OneWire.FrameVal = 0;
  f2:	10 92 02 01 	sts	0x0102, r1
  f6:	10 92 01 01 	sts	0x0101, r1
}
  fa:	08 95       	ret

000000fc <OneWire_Flush_Frame_Buf>:

void OneWire_Flush_Frame_Buf(void){
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
    OneWire.FrameBuf[i] = 0;
 100:	fc 01       	movw	r30, r24
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e0 50       	subi	r30, 0x00	; 0
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	16 82       	std	Z+6, r1	; 0x06
 10c:	15 82       	std	Z+5, r1	; 0x05
 10e:	01 96       	adiw	r24, 0x01	; 1
  OneWire.BitCounter = 0;
  OneWire.FrameVal = 0;
}

void OneWire_Flush_Frame_Buf(void){
  for(uint8_t i=0; i<ONEWIRE_FRAME_BUF; i++){
 110:	88 37       	cpi	r24, 0x78	; 120
 112:	91 05       	cpc	r25, r1
 114:	a9 f7       	brne	.-22     	; 0x100 <OneWire_Flush_Frame_Buf+0x4>
    OneWire.FrameBuf[i] = 0;
  }
  OneWire.FrameBufIndex = 0;
 116:	10 92 f5 01 	sts	0x01F5, r1
}
 11a:	08 95       	ret

0000011c <OneWire_TRX_Set_DDR>:




void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
 11c:	88 23       	and	r24, r24
 11e:	11 f4       	brne	.+4      	; 0x124 <OneWire_TRX_Set_DDR+0x8>
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 120:	3d 98       	cbi	0x07, 5	; 7
 122:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 124:	3d 9a       	sbi	0x07, 5	; 7
 126:	08 95       	ret

00000128 <OneWire_TRX_Set_Port>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
 128:	88 23       	and	r24, r24
 12a:	11 f4       	brne	.+4      	; 0x130 <OneWire_TRX_Set_Port+0x8>
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 12c:	45 98       	cbi	0x08, 5	; 8
 12e:	08 95       	ret
  }
  else{
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
 130:	45 9a       	sbi	0x08, 5	; 8
 132:	08 95       	ret

00000134 <OneWire_TRX_Get_Input_State>:
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 134:	86 b1       	in	r24, 0x06	; 6
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	45 e0       	ldi	r20, 0x05	; 5
 13a:	96 95       	lsr	r25
 13c:	87 95       	ror	r24
 13e:	4a 95       	dec	r20
 140:	e1 f7       	brne	.-8      	; 0x13a <OneWire_TRX_Get_Input_State+0x6>
    return 1;
  }
  else{
    return 0;
  }
}
 142:	81 70       	andi	r24, 0x01	; 1
 144:	08 95       	ret

00000146 <OneWire_TRX_Set_Logic>:

void OneWire_TRX_Set_Logic(uint8_t state){
  if(state == 0){
 146:	88 23       	and	r24, r24
 148:	11 f4       	brne	.+4      	; 0x14e <OneWire_TRX_Set_Logic+0x8>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 14a:	3d 9a       	sbi	0x07, 5	; 7
 14c:	08 95       	ret



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 14e:	3d 98       	cbi	0x07, 5	; 7
 150:	08 95       	ret

00000152 <OneWire_TRX_GPIO_Init>:
  }
}

void OneWire_TRX_Set_Port(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_PORT &=~ (1<<ONEWIRE_TRX_BP);
 152:	45 98       	cbi	0x08, 5	; 8



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 154:	3d 98       	cbi	0x07, 5	; 7
  ONEWIRE_DBGTX_DDR  |= (1<<ONEWIRE_DBGTX_BP);
  ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
  #endif
  
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_DDR  |= (1<<ONEWIRE_DBGRX_BP);
 156:	3d 98       	cbi	0x07, 5	; 7
 158:	3c 9a       	sbi	0x07, 4	; 7
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 15a:	44 98       	cbi	0x08, 4	; 8
  #endif
}
 15c:	08 95       	ret

0000015e <OneWire_TRX_Interrupt_Init>:
  #define ONEWIRE_TRX_PCMSK      PCMSK2
  #define ONEWIRE_TRX_PCIF       PCIF2
  #define ONEWIRE_TRX_PCINT_VECT PCINT2_vect
  #endif
  
  PCICR             |= (1<<ONEWIRE_TRX_PCIE);
 15e:	e8 e6       	ldi	r30, 0x68	; 104
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	82 60       	ori	r24, 0x02	; 2
 166:	80 83       	st	Z, r24
  PCIFR             |= (1<<ONEWIRE_TRX_PCIF);
 168:	d9 9a       	sbi	0x1b, 1	; 27
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 16a:	ec e6       	ldi	r30, 0x6C	; 108
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	8f 7d       	andi	r24, 0xDF	; 223
 172:	80 83       	st	Z, r24
  
  sei();
 174:	78 94       	sei
}
 176:	08 95       	ret

00000178 <OneWire_TRX_Interrupt_Enable>:



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 178:	ec e6       	ldi	r30, 0x6C	; 108
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 62       	ori	r24, 0x20	; 32
 180:	80 83       	st	Z, r24
}
 182:	08 95       	ret

00000184 <OneWire_TRX_Interrupt_Disable>:

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 184:	ec e6       	ldi	r30, 0x6C	; 108
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	8f 7d       	andi	r24, 0xDF	; 223
 18c:	80 83       	st	Z, r24
}
 18e:	08 95       	ret

00000190 <OneWire_TRX_Interrupt_Status>:

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 190:	80 91 6c 00 	lds	r24, 0x006C
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	55 e0       	ldi	r21, 0x05	; 5
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	5a 95       	dec	r21
 19e:	e1 f7       	brne	.-8      	; 0x198 <OneWire_TRX_Interrupt_Status+0x8>
    return 1;
  }
  else{
    return 0;
  }
}
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	08 95       	ret

000001a4 <OneWire_TRX_Falling_Edge_Interrupt>:
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 1a4:	86 b1       	in	r24, 0x06	; 6
 1a6:	82 95       	swap	r24
 1a8:	86 95       	lsr	r24
 1aa:	87 70       	andi	r24, 0x07	; 7
 1ac:	80 95       	com	r24
    return 1;
  }
  else{
    return 0;
  }
}
 1ae:	81 70       	andi	r24, 0x01	; 1
 1b0:	08 95       	ret

000001b2 <OneWire_Debug_Tx_Pulse>:
  #ifdef ONEWIRE_DBGTX_ENABLE
  ONEWIRE_DBGTX_PORT |= (1<<ONEWIRE_DBGTX_BP);
  _delay_us(1);
  ONEWIRE_DBGTX_PORT &=~(1<<ONEWIRE_DBGTX_BP);
  #endif
}
 1b2:	08 95       	ret

000001b4 <OneWire_Debug_Rx_Pulse>:

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 1b4:	44 9a       	sbi	0x08, 4	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <OneWire_Debug_Rx_Pulse+0x4>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 1bc:	44 98       	cbi	0x08, 4	; 8
  #endif
}
 1be:	08 95       	ret

000001c0 <OneWire_Delay_Clock_Low_Time>:
 1c0:	85 e3       	ldi	r24, 0x35	; 53
 1c2:	8a 95       	dec	r24
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <OneWire_Delay_Clock_Low_Time+0x2>



void OneWire_Delay_Clock_Low_Time(void){
  _delay_us(ONEWIRE_CLK_LOW);
}
 1c6:	08 95       	ret

000001c8 <OneWire_Delay_Clock_High_Time>:
 1c8:	85 e3       	ldi	r24, 0x35	; 53
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <OneWire_Delay_Clock_High_Time+0x2>

void OneWire_Delay_Clock_High_Time(void){
  _delay_us(ONEWIRE_CLK_HIGH);
}
 1ce:	08 95       	ret

000001d0 <OneWire_Delay_Half_Bit_Time>:
 1d0:	8a e6       	ldi	r24, 0x6A	; 106
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <OneWire_Delay_Half_Bit_Time+0x2>

void OneWire_Delay_Half_Bit_Time(void){
  _delay_us(ONEWIRE_CLK_HBIT);
}
 1d6:	08 95       	ret

000001d8 <OneWire_Delay_Byte_Gap>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1d8:	88 ec       	ldi	r24, 0xC8	; 200
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <OneWire_Delay_Byte_Gap+0x4>

void OneWire_Delay_Byte_Gap(void){
  _delay_us(ONEWIRE_BYTE_GAP);
}
 1e0:	08 95       	ret

000001e2 <OneWire_Delay_Rx_Int>:
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 1e2:	ec e6       	ldi	r30, 0x6C	; 108
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	8f 7d       	andi	r24, 0xDF	; 223
 1ea:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ec:	85 e3       	ldi	r24, 0x35	; 53
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <OneWire_Delay_Rx_Int+0xc>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 1f2:	8a e6       	ldi	r24, 0x6A	; 106
 1f4:	8a 95       	dec	r24
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <OneWire_Delay_Rx_Int+0x12>
 1f8:	80 81       	ld	r24, Z
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	80 83       	st	Z, r24
void OneWire_Delay_Rx_Int(void){
  OneWire_TRX_Interrupt_Disable();
  OneWire_Delay_Clock_Low_Time();
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Interrupt_Enable();
}
 1fe:	08 95       	ret

00000200 <OneWire_TRX_Byte>:



uint16_t OneWire_TRX_Byte(uint16_t val){
 200:	ac 01       	movw	r20, r24
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	e5 e3       	ldi	r30, 0x35	; 53
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 20a:	7a e6       	ldi	r23, 0x6A	; 106
 20c:	3d 9a       	sbi	0x07, 5	; 7
 20e:	8e 2f       	mov	r24, r30
 210:	8a 95       	dec	r24
 212:	f1 f7       	brne	.-4      	; 0x210 <OneWire_TRX_Byte+0x10>
	//Initial Logic Low
	OneWire_TRX_Set_Logic(0);
    OneWire_Delay_Clock_Low_Time();
	
	//Data Controlled By Master
	if(i < (ONEWIRE_FRAME_LEN-1)){
 214:	6b 30       	cpi	r22, 0x0B	; 11
 216:	21 f0       	breq	.+8      	; 0x220 <OneWire_TRX_Byte+0x20>
      if(val & 0x800){
 218:	53 fd       	sbrc	r21, 3
 21a:	02 c0       	rjmp	.+4      	; 0x220 <OneWire_TRX_Byte+0x20>
void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 21c:	3d 9a       	sbi	0x07, 5	; 7
 21e:	01 c0       	rjmp	.+2      	; 0x222 <OneWire_TRX_Byte+0x22>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 220:	3d 98       	cbi	0x07, 5	; 7
 222:	87 2f       	mov	r24, r23
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <OneWire_TRX_Byte+0x24>
	}
	
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse();
	rx_val <<= 1;
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 22c:	86 b1       	in	r24, 0x06	; 6
	
	val <<= 1;
	OneWire_Delay_Half_Bit_Time();
	OneWire_Debug_Tx_Pulse();
	rx_val <<= 1;
	rx_val |= OneWire_TRX_Get_Input_State();
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	a5 e0       	ldi	r26, 0x05	; 5
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	aa 95       	dec	r26
 238:	e1 f7       	brne	.-8      	; 0x232 <OneWire_TRX_Byte+0x32>
 23a:	81 70       	andi	r24, 0x01	; 1
 23c:	90 70       	andi	r25, 0x00	; 0
 23e:	28 2b       	or	r18, r24
 240:	39 2b       	or	r19, r25
 242:	87 2f       	mov	r24, r23
 244:	8a 95       	dec	r24
 246:	f1 f7       	brne	.-4      	; 0x244 <OneWire_TRX_Byte+0x44>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 248:	3d 98       	cbi	0x07, 5	; 7
 24a:	8e 2f       	mov	r24, r30
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <OneWire_TRX_Byte+0x4c>
  
  //OneWire_TRX_Interrupt_Disable();
  
  uint16_t rx_val=0;
  
  for(uint8_t i=0;i<ONEWIRE_FRAME_LEN;i++){
 250:	6f 5f       	subi	r22, 0xFF	; 255
 252:	6c 30       	cpi	r22, 0x0C	; 12
 254:	19 f0       	breq	.+6      	; 0x25c <OneWire_TRX_Byte+0x5c>
	//Leave For Ack
	else{
	  OneWire_TRX_Set_Logic(1);
	}
	
	val <<= 1;
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	d8 cf       	rjmp	.-80     	; 0x20c <OneWire_TRX_Byte+0xc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 25c:	88 ec       	ldi	r24, 0xC8	; 200
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <OneWire_TRX_Byte+0x60>
  }
  
  //OneWire_TRX_Interrupt_Enable();
  OneWire_Delay_Byte_Gap();
  return rx_val;
}
 264:	c9 01       	movw	r24, r18
 266:	08 95       	ret

00000268 <OneWire_Bit_Sample_And_Update>:




void OneWire_Bit_Sample_And_Update(void){
  OneWire.FrameVal <<= 1;
 268:	80 91 01 01 	lds	r24, 0x0101
 26c:	90 91 02 01 	lds	r25, 0x0102
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	90 93 02 01 	sts	0x0102, r25
 278:	80 93 01 01 	sts	0x0101, r24
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 27c:	44 9a       	sbi	0x08, 4	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <OneWire_Bit_Sample_And_Update+0x18>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 284:	44 98       	cbi	0x08, 4	; 8


void OneWire_Bit_Sample_And_Update(void){
  OneWire.FrameVal <<= 1;
  OneWire_Debug_Rx_Pulse();
  OneWire.FrameVal |= OneWire_TRX_Get_Input_State();
 286:	20 91 01 01 	lds	r18, 0x0101
 28a:	30 91 02 01 	lds	r19, 0x0102
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 28e:	86 b1       	in	r24, 0x06	; 6


void OneWire_Bit_Sample_And_Update(void){
  OneWire.FrameVal <<= 1;
  OneWire_Debug_Rx_Pulse();
  OneWire.FrameVal |= OneWire_TRX_Get_Input_State();
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	45 e0       	ldi	r20, 0x05	; 5
 294:	96 95       	lsr	r25
 296:	87 95       	ror	r24
 298:	4a 95       	dec	r20
 29a:	e1 f7       	brne	.-8      	; 0x294 <OneWire_Bit_Sample_And_Update+0x2c>
 29c:	81 70       	andi	r24, 0x01	; 1
 29e:	90 70       	andi	r25, 0x00	; 0
 2a0:	82 2b       	or	r24, r18
 2a2:	93 2b       	or	r25, r19
 2a4:	90 93 02 01 	sts	0x0102, r25
 2a8:	80 93 01 01 	sts	0x0101, r24
  OneWire.BitCounter++;
 2ac:	e1 e0       	ldi	r30, 0x01	; 1
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	82 91       	ld	r24, -Z
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	80 83       	st	Z, r24
}
 2b6:	08 95       	ret

000002b8 <OneWire_Bit_Counter_Overflow>:


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 2b8:	80 91 00 01 	lds	r24, 0x0100
 2bc:	8c 30       	cpi	r24, 0x0C	; 12
 2be:	10 f4       	brcc	.+4      	; 0x2c4 <OneWire_Bit_Counter_Overflow+0xc>
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
    OneWire.BitCounter = 0;
 2c4:	10 92 00 01 	sts	0x0100, r1
 2c8:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
  }
  else{
    return 0;
  }
}
 2ca:	08 95       	ret

000002cc <OneWire_Buf_Sample_And_Update>:

void OneWire_Buf_Sample_And_Update(void){
  OneWire.FrameBuf[OneWire.FrameBufIndex] = OneWire.FrameVal;
 2cc:	e0 91 f5 01 	lds	r30, 0x01F5
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 91 01 01 	lds	r24, 0x0101
 2d6:	90 91 02 01 	lds	r25, 0x0102
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	e0 50       	subi	r30, 0x00	; 0
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	96 83       	std	Z+6, r25	; 0x06
 2e4:	85 83       	std	Z+5, r24	; 0x05
  OneWire.FrameVal = 0;
 2e6:	10 92 02 01 	sts	0x0102, r1
 2ea:	10 92 01 01 	sts	0x0101, r1
  OneWire.FrameBufIndex++;
 2ee:	80 91 f5 01 	lds	r24, 0x01F5
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	80 93 f5 01 	sts	0x01F5, r24
}
 2f8:	08 95       	ret

000002fa <OneWire_Buf_Counter_Overflow>:

uint8_t OneWire_Buf_Counter_Overflow(void){
  if(OneWire.FrameBufIndex >= ONEWIRE_FRAME_BUF){
 2fa:	80 91 f5 01 	lds	r24, 0x01F5
 2fe:	88 37       	cpi	r24, 0x78	; 120
 300:	68 f0       	brcs	.+26     	; 0x31c <OneWire_Buf_Counter_Overflow+0x22>
    OneWire.FrameBufIndex = 0;
 302:	10 92 f5 01 	sts	0x01F5, r1
	OneWire.FrameCounter++;
 306:	80 91 03 01 	lds	r24, 0x0103
 30a:	90 91 04 01 	lds	r25, 0x0104
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 04 01 	sts	0x0104, r25
 314:	80 93 03 01 	sts	0x0103, r24
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	08 95       	ret
	return 1;
  }
  else{
    OneWire.FrameCounter++;
 31c:	80 91 03 01 	lds	r24, 0x0103
 320:	90 91 04 01 	lds	r25, 0x0104
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	90 93 04 01 	sts	0x0104, r25
 32a:	80 93 03 01 	sts	0x0103, r24
 32e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
  }
}
 330:	08 95       	ret

00000332 <OneWire_Fill_Buf>:
    return 0;
  }
}

void OneWire_Buf_Sample_And_Update(void){
  OneWire.FrameBuf[OneWire.FrameBufIndex] = OneWire.FrameVal;
 332:	e0 91 f5 01 	lds	r30, 0x01F5
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 91 01 01 	lds	r24, 0x0101
 33c:	90 91 02 01 	lds	r25, 0x0102
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	e0 50       	subi	r30, 0x00	; 0
 346:	ff 4f       	sbci	r31, 0xFF	; 255
 348:	96 83       	std	Z+6, r25	; 0x06
 34a:	85 83       	std	Z+5, r24	; 0x05
  OneWire.FrameVal = 0;
 34c:	10 92 02 01 	sts	0x0102, r1
 350:	10 92 01 01 	sts	0x0101, r1
  OneWire.FrameBufIndex++;
 354:	80 91 f5 01 	lds	r24, 0x01F5
 358:	8f 5f       	subi	r24, 0xFF	; 255
 35a:	80 93 f5 01 	sts	0x01F5, r24
  }
}

void OneWire_Fill_Buf(void){
  OneWire_Buf_Sample_And_Update();
  OneWire_Buf_Counter_Overflow();
 35e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <OneWire_Buf_Counter_Overflow>
  
  if((OneWire.FrameBufIndex > 0) && ((OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_START_CMD) == ONEWIRE_START_CMD) ){
 362:	80 91 f5 01 	lds	r24, 0x01F5
 366:	88 23       	and	r24, r24
 368:	a1 f1       	breq	.+104    	; 0x3d2 <OneWire_Fill_Buf+0xa0>
 36a:	e0 91 f5 01 	lds	r30, 0x01F5
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	e2 50       	subi	r30, 0x02	; 2
 376:	ff 4f       	sbci	r31, 0xFF	; 255
 378:	85 81       	ldd	r24, Z+5	; 0x05
 37a:	96 81       	ldd	r25, Z+6	; 0x06
 37c:	93 ff       	sbrs	r25, 3
 37e:	29 c0       	rjmp	.+82     	; 0x3d2 <OneWire_Fill_Buf+0xa0>
    OneWire.CmdReceived = 1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 f6 01 	sts	0x01F6, r24
	OneWire.CmdVal = OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_RW_MASK;
 386:	e0 91 f5 01 	lds	r30, 0x01F5
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	e2 50       	subi	r30, 0x02	; 2
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	85 81       	ldd	r24, Z+5	; 0x05
 396:	96 81       	ldd	r25, Z+6	; 0x06
 398:	80 70       	andi	r24, 0x00	; 0
 39a:	92 70       	andi	r25, 0x02	; 2
 39c:	90 93 f8 01 	sts	0x01F8, r25
 3a0:	80 93 f7 01 	sts	0x01F7, r24
	OneWire.CmdValReg = (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_REG_MASK)>>1;
 3a4:	e0 91 f5 01 	lds	r30, 0x01F5
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	e2 50       	subi	r30, 0x02	; 2
 3b0:	ff 4f       	sbci	r31, 0xFF	; 255
 3b2:	85 81       	ldd	r24, Z+5	; 0x05
 3b4:	96 81       	ldd	r25, Z+6	; 0x06
 3b6:	8e 7f       	andi	r24, 0xFE	; 254
 3b8:	91 70       	andi	r25, 0x01	; 1
 3ba:	96 95       	lsr	r25
 3bc:	87 95       	ror	r24
 3be:	90 93 fa 01 	sts	0x01FA, r25
 3c2:	80 93 f9 01 	sts	0x01F9, r24
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 3c6:	44 9a       	sbi	0x08, 4	; 8
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	8a 95       	dec	r24
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <OneWire_Fill_Buf+0x98>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 3ce:	44 98       	cbi	0x08, 4	; 8
 3d0:	08 95       	ret
    OneWire.CmdReceived = 1;
	OneWire.CmdVal = OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_RW_MASK;
	OneWire.CmdValReg = (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_REG_MASK)>>1;
	OneWire_Debug_Rx_Pulse();
  }
  else if( (OneWire.FrameBuf[OneWire.FrameBufIndex-1] & ONEWIRE_STOP_CMD) == ONEWIRE_STOP_CMD){
 3d2:	e0 91 f5 01 	lds	r30, 0x01F5
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	e2 50       	subi	r30, 0x02	; 2
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	85 81       	ldd	r24, Z+5	; 0x05
 3e2:	96 81       	ldd	r25, Z+6	; 0x06
 3e4:	92 ff       	sbrs	r25, 2
 3e6:	19 c0       	rjmp	.+50     	; 0x41a <OneWire_Fill_Buf+0xe8>
    OneWire.CmdReceived = 0;
 3e8:	10 92 f6 01 	sts	0x01F6, r1
	OneWire.FrameBufIndex = 0;
 3ec:	10 92 f5 01 	sts	0x01F5, r1
	OneWire.FrameBuf[0] = 0;
 3f0:	10 92 06 01 	sts	0x0106, r1
 3f4:	10 92 05 01 	sts	0x0105, r1
	OneWire.CmdVal = 0;
 3f8:	10 92 f8 01 	sts	0x01F8, r1
 3fc:	10 92 f7 01 	sts	0x01F7, r1
	OneWire.CmdValReg = 0;
 400:	10 92 fa 01 	sts	0x01FA, r1
 404:	10 92 f9 01 	sts	0x01F9, r1
	OneWire.FeedbackDataLoaded = 0;
 408:	10 92 fd 01 	sts	0x01FD, r1
	OneWire.FeedbackCounter = 0;
 40c:	10 92 fe 01 	sts	0x01FE, r1
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 410:	44 9a       	sbi	0x08, 4	; 8
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	8a 95       	dec	r24
 416:	f1 f7       	brne	.-4      	; 0x414 <OneWire_Fill_Buf+0xe2>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 418:	44 98       	cbi	0x08, 4	; 8
 41a:	08 95       	ret

0000041c <OneWire_Read_Mode_Feedback>:
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 41c:	80 91 6c 00 	lds	r24, 0x006C
 420:	8f 7d       	andi	r24, 0xDF	; 223
 422:	80 93 6c 00 	sts	0x006C, r24
}


void OneWire_Read_Mode_Feedback(void){
  OneWire_TRX_Interrupt_Disable();
  if(OneWire.FeedbackData & 0x800){
 426:	80 91 fb 01 	lds	r24, 0x01FB
 42a:	90 91 fc 01 	lds	r25, 0x01FC
 42e:	93 ff       	sbrs	r25, 3
 430:	02 c0       	rjmp	.+4      	; 0x436 <OneWire_Read_Mode_Feedback+0x1a>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 432:	3d 98       	cbi	0x07, 5	; 7
 434:	01 c0       	rjmp	.+2      	; 0x438 <OneWire_Read_Mode_Feedback+0x1c>
  }
  else{
    ONEWIRE_TRX_DDR  |=  (1<<ONEWIRE_TRX_BP);
 436:	3d 9a       	sbi	0x07, 5	; 7
  if(OneWire.FeedbackData & 0x800){
	OneWire_TRX_Set_Logic(1);
  }else{
	OneWire_TRX_Set_Logic(0);
  }
  OneWire.FeedbackData <<= 1;
 438:	80 91 fb 01 	lds	r24, 0x01FB
 43c:	90 91 fc 01 	lds	r25, 0x01FC
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	90 93 fc 01 	sts	0x01FC, r25
 448:	80 93 fb 01 	sts	0x01FB, r24
 44c:	8a e6       	ldi	r24, 0x6A	; 106
 44e:	98 2f       	mov	r25, r24
 450:	9a 95       	dec	r25
 452:	f1 f7       	brne	.-4      	; 0x450 <OneWire_Read_Mode_Feedback+0x34>



void OneWire_TRX_Set_DDR(uint8_t state){
  if(state == 0){
    ONEWIRE_TRX_DDR  &=~ (1<<ONEWIRE_TRX_BP);
 454:	8a 95       	dec	r24
 456:	f1 f7       	brne	.-4      	; 0x454 <OneWire_Read_Mode_Feedback+0x38>
 458:	3d 98       	cbi	0x07, 5	; 7
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 45a:	80 91 6c 00 	lds	r24, 0x006C
 45e:	80 62       	ori	r24, 0x20	; 32
 460:	80 93 6c 00 	sts	0x006C, r24
  OneWire.FeedbackData <<= 1;
  OneWire_Delay_Half_Bit_Time();
  OneWire_Delay_Half_Bit_Time();
  OneWire_TRX_Set_Logic(1);
  OneWire_TRX_Interrupt_Enable();
}
 464:	08 95       	ret

00000466 <__vector_4>:





ISR(ONEWIRE_TRX_PCINT_VECT){
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	2f 93       	push	r18
 472:	3f 93       	push	r19
 474:	4f 93       	push	r20
 476:	5f 93       	push	r21
 478:	6f 93       	push	r22
 47a:	7f 93       	push	r23
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	af 93       	push	r26
 482:	bf 93       	push	r27
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
}

uint8_t OneWire_TRX_Interrupt_Status(void){
  if(ONEWIRE_TRX_PCMSK & (1<<ONEWIRE_TRX_BP)){
 488:	80 91 6c 00 	lds	r24, 0x006C
 48c:	85 ff       	sbrs	r24, 5
 48e:	5c c0       	rjmp	.+184    	; 0x548 <__vector_4+0xe2>
    ONEWIRE_TRX_PORT |=  (1<<ONEWIRE_TRX_BP);
  }
}

uint8_t OneWire_TRX_Get_Input_State(void){
  if(ONEWIRE_TRX_PIN & (1<<ONEWIRE_TRX_BP)){
 490:	35 99       	sbic	0x06, 5	; 6
 492:	5a c0       	rjmp	.+180    	; 0x548 <__vector_4+0xe2>
  //TRX Interrupt Fired
  if( OneWire_TRX_Interrupt_Status() == 1){        
	//Falling Edge Interrupt
    if(OneWire_TRX_Falling_Edge_Interrupt() == 1){
	  
	  if((OneWire.CmdReceived == 1) && (OneWire.CmdVal == ONEWIRE_WRITE_CMD)){
 494:	80 91 f6 01 	lds	r24, 0x01F6
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	39 f4       	brne	.+14     	; 0x4aa <__vector_4+0x44>
 49c:	80 91 f7 01 	lds	r24, 0x01F7
 4a0:	90 91 f8 01 	lds	r25, 0x01F8
 4a4:	89 2b       	or	r24, r25
 4a6:	09 f4       	brne	.+2      	; 0x4aa <__vector_4+0x44>
 4a8:	43 c0       	rjmp	.+134    	; 0x530 <__vector_4+0xca>
	    OneWire_Bit_Sample_And_Update();
	    if(OneWire_Bit_Counter_Overflow() == 1){
		  OneWire_Fill_Buf();
	    }
      }
	  else if((OneWire.CmdReceived == 1) && (OneWire.CmdVal == ONEWIRE_READ_CMD)){
 4aa:	20 91 f6 01 	lds	r18, 0x01F6
 4ae:	21 30       	cpi	r18, 0x01	; 1
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__vector_4+0x4e>
 4b2:	3e c0       	rjmp	.+124    	; 0x530 <__vector_4+0xca>
 4b4:	80 91 f7 01 	lds	r24, 0x01F7
 4b8:	90 91 f8 01 	lds	r25, 0x01F8
 4bc:	80 50       	subi	r24, 0x00	; 0
 4be:	92 40       	sbci	r25, 0x02	; 2
 4c0:	b9 f5       	brne	.+110    	; 0x530 <__vector_4+0xca>
		if(OneWire.FeedbackDataLoaded == 0){
 4c2:	80 91 fd 01 	lds	r24, 0x01FD
 4c6:	88 23       	and	r24, r24
 4c8:	71 f4       	brne	.+28     	; 0x4e6 <__vector_4+0x80>
		  OneWire.FeedbackData = (OneWire.CmdValReg<<1) | ONEWIRE_STOP_CMD | 1;
 4ca:	80 91 f9 01 	lds	r24, 0x01F9
 4ce:	90 91 fa 01 	lds	r25, 0x01FA
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	81 60       	ori	r24, 0x01	; 1
 4d8:	94 60       	ori	r25, 0x04	; 4
 4da:	90 93 fc 01 	sts	0x01FC, r25
 4de:	80 93 fb 01 	sts	0x01FB, r24
		  OneWire.FeedbackDataLoaded = 1;
 4e2:	20 93 fd 01 	sts	0x01FD, r18
		}
	    OneWire_Read_Mode_Feedback();
 4e6:	0e 94 0e 02 	call	0x41c	; 0x41c <OneWire_Read_Mode_Feedback>
		OneWire.FeedbackCounter ++;
 4ea:	80 91 fe 01 	lds	r24, 0x01FE
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
 4f0:	80 93 fe 01 	sts	0x01FE, r24
		if(OneWire.FeedbackCounter >= ONEWIRE_FRAME_LEN){
 4f4:	80 91 fe 01 	lds	r24, 0x01FE
 4f8:	8c 30       	cpi	r24, 0x0C	; 12
 4fa:	30 f1       	brcs	.+76     	; 0x548 <__vector_4+0xe2>
		  OneWire.CmdReceived = 0;
 4fc:	10 92 f6 01 	sts	0x01F6, r1
	      OneWire.FrameBufIndex = 0;
 500:	10 92 f5 01 	sts	0x01F5, r1
	      OneWire.FrameBuf[0] = 0;
 504:	10 92 06 01 	sts	0x0106, r1
 508:	10 92 05 01 	sts	0x0105, r1
	      OneWire.CmdVal = 0;
 50c:	10 92 f8 01 	sts	0x01F8, r1
 510:	10 92 f7 01 	sts	0x01F7, r1
	      OneWire.CmdValReg = 0;
 514:	10 92 fa 01 	sts	0x01FA, r1
 518:	10 92 f9 01 	sts	0x01F9, r1
	      OneWire.FeedbackDataLoaded = 0;
 51c:	10 92 fd 01 	sts	0x01FD, r1
	      OneWire.FeedbackCounter = 0;
 520:	10 92 fe 01 	sts	0x01FE, r1
  #endif
}

void OneWire_Debug_Rx_Pulse(void){
  #ifdef ONEWIRE_DBGRX_ENABLE
  ONEWIRE_DBGRX_PORT |= (1<<ONEWIRE_DBGRX_BP);
 524:	44 9a       	sbi	0x08, 4	; 8
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	8a 95       	dec	r24
 52a:	f1 f7       	brne	.-4      	; 0x528 <__vector_4+0xc2>
  _delay_us(1);
  ONEWIRE_DBGRX_PORT &=~(1<<ONEWIRE_DBGRX_BP);
 52c:	44 98       	cbi	0x08, 4	; 8
 52e:	0c c0       	rjmp	.+24     	; 0x548 <__vector_4+0xe2>
	      OneWire.FeedbackCounter = 0;
	      OneWire_Debug_Rx_Pulse();
		}
	  }
	  else{
	    OneWire_Delay_Rx_Int();
 530:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <OneWire_Delay_Rx_Int>
	    OneWire_Bit_Sample_And_Update();
 534:	0e 94 34 01 	call	0x268	; 0x268 <OneWire_Bit_Sample_And_Update>
  OneWire.BitCounter++;
}


uint8_t OneWire_Bit_Counter_Overflow(void){
  if(OneWire.BitCounter >= ONEWIRE_FRAME_LEN){
 538:	80 91 00 01 	lds	r24, 0x0100
 53c:	8c 30       	cpi	r24, 0x0C	; 12
 53e:	20 f0       	brcs	.+8      	; 0x548 <__vector_4+0xe2>
    OneWire.BitCounter = 0;
 540:	10 92 00 01 	sts	0x0100, r1
	  }
	  else{
	    OneWire_Delay_Rx_Int();
	    OneWire_Bit_Sample_And_Update();
	    if(OneWire_Bit_Counter_Overflow() == 1){
		  OneWire_Fill_Buf();
 544:	0e 94 99 01 	call	0x332	; 0x332 <OneWire_Fill_Buf>
	    }
	  }
	}
  }
}
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <OneWire_Init_Master>:



void OneWire_Init_Master(void){
  OneWire_Struct_Init();
 56a:	0e 94 4b 00 	call	0x96	; 0x96 <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 56e:	0e 94 a9 00 	call	0x152	; 0x152 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 572:	0e 94 af 00 	call	0x15e	; 0x15e <OneWire_TRX_Interrupt_Init>
void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
}

void OneWire_TRX_Interrupt_Disable(void){
  ONEWIRE_TRX_PCMSK &=~(1<<ONEWIRE_TRX_BP);
 576:	ec e6       	ldi	r30, 0x6C	; 108
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	8f 7d       	andi	r24, 0xDF	; 223
 57e:	80 83       	st	Z, r24
void OneWire_Init_Master(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Disable();
}
 580:	08 95       	ret

00000582 <OneWire_Init_Slave>:

void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
 582:	0e 94 4b 00 	call	0x96	; 0x96 <OneWire_Struct_Init>
  OneWire_TRX_GPIO_Init();
 586:	0e 94 a9 00 	call	0x152	; 0x152 <OneWire_TRX_GPIO_Init>
  OneWire_TRX_Interrupt_Init();
 58a:	0e 94 af 00 	call	0x15e	; 0x15e <OneWire_TRX_Interrupt_Init>
}



void OneWire_TRX_Interrupt_Enable(void){
  ONEWIRE_TRX_PCMSK |= (1<<ONEWIRE_TRX_BP);
 58e:	ec e6       	ldi	r30, 0x6C	; 108
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	80 81       	ld	r24, Z
 594:	80 62       	ori	r24, 0x20	; 32
 596:	80 83       	st	Z, r24
void OneWire_Init_Slave(void){
  OneWire_Struct_Init();
  OneWire_TRX_GPIO_Init();
  OneWire_TRX_Interrupt_Init();
  OneWire_TRX_Interrupt_Enable();
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
